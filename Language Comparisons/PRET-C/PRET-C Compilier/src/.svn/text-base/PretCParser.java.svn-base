// $ANTLR 3.1.2 C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g 2011-04-07 00:03:45

import java.util.Set;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.ArrayList;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** ANSI C ANTLR v3 grammar
  
Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example 
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
public class PretCParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ID_TOK", "SOURCE_TOK", "FUNCTION_TOK", "GLOBAL_DECLARATION_TOK", "DECLARATION_TOK", "TYPE_DECLARATION_TOK", "LABELED_STATMENT_TOK", "EXPRESSION_STATMENT_TOK", "SELECTION_STATMENT_TOK", "ITERATION_STATEMENT_TOK", "JUMP_STATMENT_TOK", "SCOPE_TOK", "EMPTY_TOK", "END_TOK", "ABORT_TOK", "PREPROC_TOK", "DECIMAL_LITERAL", "IDENTIFIER", "LINE_COMMAND", "HEX_LITERAL", "OCTAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "FLOATING_POINT_LITERAL", "LETTER", "EscapeSequence", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "OctalEscape", "UnicodeEscape", "WS", "COMMENT", "LINE_COMMENT", "'ReactiveInput'", "';'", "'ReactiveOutput'", "'='", "','", "'#range'", "'to'", "'thread'", "'('", "'void'", "')'", "'typedef'", "'extern'", "'static'", "'auto'", "'register'", "'unsigned'", "'signed'", "'char'", "'short'", "'int'", "'long'", "'float'", "'double'", "'{'", "'}'", "'struct'", "'union'", "':'", "'enum'", "'const'", "'volatile'", "'['", "']'", "'*'", "'...'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'sizeof'", "'.'", "'->'", "'&'", "'~'", "'!'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'?'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'", "'EOT'", "'case'", "'default'", "'strong'", "'abort'", "'when'", "'weak'", "'PAR'", "'if'", "'else'", "'switch'", "'while'", "'do'", "'for'", "'goto'", "'continue'", "'break'", "'return'"
    };
    public static final int ITERATION_STATEMENT_TOK=13;
    public static final int FloatTypeSuffix=33;
    public static final int LETTER=28;
    public static final int EMPTY_TOK=16;
    public static final int EOF=-1;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int PREPROC_TOK=19;
    public static final int T__92=92;
    public static final int STRING_LITERAL=26;
    public static final int EXPRESSION_STATMENT_TOK=11;
    public static final int T__90=90;
    public static final int FLOATING_POINT_LITERAL=27;
    public static final int COMMENT=37;
    public static final int T__99=99;
    public static final int T__98=98;
    public static final int T__97=97;
    public static final int T__96=96;
    public static final int T__95=95;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int LINE_COMMENT=38;
    public static final int IntegerTypeSuffix=31;
    public static final int SOURCE_TOK=5;
    public static final int CHARACTER_LITERAL=25;
    public static final int JUMP_STATMENT_TOK=14;
    public static final int T__85=85;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__89=89;
    public static final int T__88=88;
    public static final int ID_TOK=4;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int TYPE_DECLARATION_TOK=9;
    public static final int LINE_COMMAND=22;
    public static final int END_TOK=17;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int SCOPE_TOK=15;
    public static final int T__74=74;
    public static final int EscapeSequence=29;
    public static final int DECIMAL_LITERAL=20;
    public static final int T__73=73;
    public static final int T__79=79;
    public static final int T__78=78;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int Exponent=32;
    public static final int T__122=122;
    public static final int FUNCTION_TOK=6;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int HexDigit=30;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int IDENTIFIER=21;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int ABORT_TOK=18;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int HEX_LITERAL=23;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int DECLARATION_TOK=8;
    public static final int OCTAL_LITERAL=24;
    public static final int LABELED_STATMENT_TOK=10;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int SELECTION_STATMENT_TOK=12;
    public static final int GLOBAL_DECLARATION_TOK=7;
    public static final int T__39=39;
    public static final int UnicodeEscape=35;
    public static final int OctalEscape=34;

    // delegates
    // delegators

    protected static class is_scope {
        boolean typeDef;
        boolean declaration;
    }
    protected Stack is_stack = new Stack();
    protected static class Symbols_scope {
        Set types;
        // only track types in order to get parser working;
    }
    protected Stack Symbols_stack = new Stack();
    protected static class nodes_scope {
        StatementNode node;
    }
    protected Stack nodes_stack = new Stack();
    protected static class scopeNodes_scope {
        ScopeNode node;
    }
    protected Stack scopeNodes_stack = new Stack();
    protected static class isFromFunction_scope {
        boolean data;
    }
    protected Stack isFromFunction_stack = new Stack();


        public PretCParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PretCParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[255+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PretCParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g"; }


    	boolean addtype = true;
    	long idCount = 1; //id 0 reserved
    	long uniqueThdInstantID = 1;
    	String sourceTemp = "";
    	long scopeCount = -1;
    	long currentScope = -1;
    	long scopeFuncCount = 0; //scope = 0 funcScope = 0 = global
    	String constantExprTempIdentifier = "";
    	Hashtable<Long,ScopeNode> scopeList = new Hashtable<Long,ScopeNode>();
    	String preType = "";
    	String preVarSpecifiers ="";
    	String preMax = "";
    	String preMin = "";
    	long typeDefStuctIDGen = 0;
    	/*ArrayList weakAbortTemp = new ArrayList<Long>();
    	ArrayList strongAbortTemp = new ArrayList<Long>();
    	ArrayList hierWeakAbortTemp = new ArrayList<Long>();
    	ArrayList hierStrongAbortTemp = new ArrayList<Long>();*/
    	
    	Hashtable nodesTable= new Hashtable();// hash table of StatementNode test;
    	int debug = 0;
    	boolean isTypeName(String name) {
    		for (int i = Symbols_stack.size()-1; i>=0; i--) {
    			Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
    			if ( scope.types.contains(name) ) {
    				return true;
    			}
    		}
    		return false;
    	}
    	/*void errorExit(int line,String code) {
    		System.out.println("Error type at line "+line);
    		System.out.println(code);
    		System.exit(0);
    	}*/
    	/* error reporting codes*/
    	/*http://www.antlr.org/wiki/display/ANTLR3/Migrating+from+ANTLR+2+to+ANTLR+3*/
    	/*book error handeling*/
    	boolean errorReported = false;
    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		System.out.println("aaaaa "+input);
    		throw new MismatchedTokenException(ttype, input);
    		
    	}
    	
    	public Object recoverFromMismatchedSet(IntStream input, RecognitionException e,BitSet follow)
    		throws RecognitionException
    	{
    		System.out.println("bbbbb "+input);
    		throw e;
    	}

    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		return "cccccc";
    	}



    public static class translation_unit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "translation_unit"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:190:1: translation_unit : ( external_declaration )+ ;
    public final PretCParser.translation_unit_return translation_unit() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());
        scopeNodes_stack.push(new scopeNodes_scope());

        PretCParser.translation_unit_return retval = new PretCParser.translation_unit_return();
        retval.start = input.LT(1);
        int translation_unit_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.external_declaration_return external_declaration1 = null;




          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();
          
          scopeCount = 0;
          currentScope = 0;
          ((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:208:2: ( ( external_declaration )+ )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:208:4: ( external_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:208:4: ( external_declaration )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                alt1 = dfa1.predict(input);
                switch (alt1) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: external_declaration
            	    {
            	    pushFollow(FOLLOW_external_declaration_in_translation_unit247);
            	    external_declaration1=external_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, external_declaration1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	scopeList.put(currentScope, ((scopeNodes_scope)scopeNodes_stack.peek()).node);
              	//System.out.println("--------------------------------");
              	//System.out.println(nodesTable);
              	//System.out.println("--------------------------------");
              	//System.out.println(scopeList);
              	//System.out.println("--------------------------------");
              	//System.out.println(input);

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, translation_unit_StartIndex); }
            Symbols_stack.pop();
            scopeNodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "translation_unit"

    public static class external_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "external_declaration"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:211:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration -> ^( GLOBAL_DECLARATION_TOK declaration ) | 'ReactiveInput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveInput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | 'ReactiveOutput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveOutput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | thread_definition );
    public final PretCParser.external_declaration_return external_declaration() throws RecognitionException {
        nodes_stack.push(new nodes_scope());

        PretCParser.external_declaration_return retval = new PretCParser.external_declaration_return();
        retval.start = input.LT(1);
        int external_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal4=null;
        Token char_literal7=null;
        Token string_literal8=null;
        Token char_literal11=null;
        PretCParser.function_definition_return function_definition2 = null;

        PretCParser.declaration_return declaration3 = null;

        PretCParser.declaration_specifiers_return declaration_specifiers5 = null;

        PretCParser.reactive_declarator_return reactive_declarator6 = null;

        PretCParser.declaration_specifiers_return declaration_specifiers9 = null;

        PretCParser.reactive_declarator_return reactive_declarator10 = null;

        PretCParser.thread_definition_return thread_definition12 = null;


        CommonTree string_literal4_tree=null;
        CommonTree char_literal7_tree=null;
        CommonTree string_literal8_tree=null;
        CommonTree char_literal11_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        RewriteRuleSubtreeStream stream_reactive_declarator=new RewriteRuleSubtreeStream(adaptor,"rule reactive_declarator");

          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          long ID=-1;
          long lineNo = input.LT(1).getLine();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration -> ^( GLOBAL_DECLARATION_TOK declaration ) | 'ReactiveInput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveInput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | 'ReactiveOutput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveOutput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | thread_definition )
            int alt2=5;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_definition_in_external_declaration301);
                    function_definition2=function_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_definition2.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:237:4: declaration
                    {
                    pushFollow(FOLLOW_declaration_in_external_declaration308);
                    declaration3=declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration.add(declaration3.getTree());


                    // AST REWRITE
                    // elements: declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 237:16: -> ^( GLOBAL_DECLARATION_TOK declaration )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:237:19: ^( GLOBAL_DECLARATION_TOK declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GLOBAL_DECLARATION_TOK, "GLOBAL_DECLARATION_TOK"), root_1);

                        adaptor.addChild(root_1, stream_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:239:4: 'ReactiveInput' declaration_specifiers reactive_declarator ';'
                    {
                    string_literal4=(Token)match(input,39,FOLLOW_39_in_external_declaration325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_39.add(string_literal4);

                    pushFollow(FOLLOW_declaration_specifiers_in_external_declaration327);
                    declaration_specifiers5=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers5.getTree());
                    pushFollow(FOLLOW_reactive_declarator_in_external_declaration329);
                    reactive_declarator6=reactive_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reactive_declarator.add(reactive_declarator6.getTree());
                    char_literal7=(Token)match(input,40,FOLLOW_40_in_external_declaration331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal7);

                    if ( state.backtracking==0 ) {

                      			sourceTemp =  "//Reactive Input\n ";
                      			sourceTemp += (declaration_specifiers5!=null?input.toString(declaration_specifiers5.start,declaration_specifiers5.stop):null)+" "+(reactive_declarator6!=null?input.toString(reactive_declarator6.start,reactive_declarator6.stop):null) ;
                      			sourceTemp += ";\n";
                      			
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			if (isFromFunction_stack.size() > 0) { //within function scope
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			}else{
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=0; //global
                      			}
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.type="ReactiveInput";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 39
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 261:4: -> ^( 'ReactiveInput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:261:6: ^( 'ReactiveInput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:262:4: 'ReactiveOutput' declaration_specifiers reactive_declarator ';'
                    {
                    string_literal8=(Token)match(input,41,FOLLOW_41_in_external_declaration351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_41.add(string_literal8);

                    pushFollow(FOLLOW_declaration_specifiers_in_external_declaration353);
                    declaration_specifiers9=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers9.getTree());
                    pushFollow(FOLLOW_reactive_declarator_in_external_declaration355);
                    reactive_declarator10=reactive_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reactive_declarator.add(reactive_declarator10.getTree());
                    char_literal11=(Token)match(input,40,FOLLOW_40_in_external_declaration357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal11);

                    if ( state.backtracking==0 ) {

                      			sourceTemp =  "//Reactive Output\n";
                      			sourceTemp += (declaration_specifiers9!=null?input.toString(declaration_specifiers9.start,declaration_specifiers9.stop):null)+" "+(reactive_declarator10!=null?input.toString(reactive_declarator10.start,reactive_declarator10.stop):null) ;
                      			sourceTemp += ";\n";
                      			
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			if (isFromFunction_stack.size() > 0) { //within function scope
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			}else{
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=0; //global
                      			}
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.type="ReactiveOutput";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 41
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 284:4: -> ^( 'ReactiveOutput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:284:6: ^( 'ReactiveOutput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:285:4: thread_definition
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_thread_definition_in_external_declaration376);
                    thread_definition12=thread_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, thread_definition12.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, external_declaration_StartIndex); }
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "external_declaration"

    public static class reactive_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reactive_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:288:1: reactive_declarator : (d1= declarator ( '=' initializer )? ( range_declarator )? ) ( ',' d2= declarator ( '=' initializer )? ( range_declarator )? )* ;
    public final PretCParser.reactive_declarator_return reactive_declarator() throws RecognitionException {
        PretCParser.reactive_declarator_return retval = new PretCParser.reactive_declarator_return();
        retval.start = input.LT(1);
        int reactive_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal13=null;
        Token char_literal16=null;
        Token char_literal17=null;
        PretCParser.declarator_return d1 = null;

        PretCParser.declarator_return d2 = null;

        PretCParser.initializer_return initializer14 = null;

        PretCParser.range_declarator_return range_declarator15 = null;

        PretCParser.initializer_return initializer18 = null;

        PretCParser.range_declarator_return range_declarator19 = null;


        CommonTree char_literal13_tree=null;
        CommonTree char_literal16_tree=null;
        CommonTree char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:2: ( (d1= declarator ( '=' initializer )? ( range_declarator )? ) ( ',' d2= declarator ( '=' initializer )? ( range_declarator )? )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:4: (d1= declarator ( '=' initializer )? ( range_declarator )? ) ( ',' d2= declarator ( '=' initializer )? ( range_declarator )? )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:4: (d1= declarator ( '=' initializer )? ( range_declarator )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:5: d1= declarator ( '=' initializer )? ( range_declarator )?
            {
            pushFollow(FOLLOW_declarator_in_reactive_declarator391);
            d1=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, d1.getTree());
            if ( state.backtracking==0 ) {
              ((nodes_scope)nodes_stack.peek()).node.name.add((d1!=null?input.toString(d1.start,d1.stop):null));((scopeNodes_scope)scopeNodes_stack.peek()).node.variableMapPut((d1!=null?input.toString(d1.start,d1.stop):null),((nodes_scope)nodes_stack.peek()).node);
            }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:110: ( '=' initializer )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==42) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:111: '=' initializer
                    {
                    char_literal13=(Token)match(input,42,FOLLOW_42_in_reactive_declarator396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = (CommonTree)adaptor.create(char_literal13);
                    adaptor.addChild(root_0, char_literal13_tree);
                    }
                    pushFollow(FOLLOW_initializer_in_reactive_declarator398);
                    initializer14=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer14.getTree());

                    }
                    break;

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:129: ( range_declarator )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==44) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: range_declarator
                    {
                    pushFollow(FOLLOW_range_declarator_in_reactive_declarator402);
                    range_declarator15=range_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range_declarator15.getTree());

                    }
                    break;

            }


            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:148: ( ',' d2= declarator ( '=' initializer )? ( range_declarator )? )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==43) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:149: ',' d2= declarator ( '=' initializer )? ( range_declarator )?
            	    {
            	    char_literal16=(Token)match(input,43,FOLLOW_43_in_reactive_declarator407); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal16_tree = (CommonTree)adaptor.create(char_literal16);
            	    adaptor.addChild(root_0, char_literal16_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.constantStatement.add(new ArrayList<String>());
            	    }
            	    pushFollow(FOLLOW_declarator_in_reactive_declarator413);
            	    d2=declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, d2.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.declaredType.add(preType);((nodes_scope)nodes_stack.peek()).node.varSpecifiers.add(preVarSpecifiers);((nodes_scope)nodes_stack.peek()).node.name.add((d2!=null?input.toString(d2.start,d2.stop):null));((scopeNodes_scope)scopeNodes_stack.peek()).node.variableMapPut((d2!=null?input.toString(d2.start,d2.stop):null),((nodes_scope)nodes_stack.peek()).node);
            	    }
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:409: ( '=' initializer )?
            	    int alt5=2;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==42) ) {
            	        alt5=1;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:410: '=' initializer
            	            {
            	            char_literal17=(Token)match(input,42,FOLLOW_42_in_reactive_declarator418); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal17_tree = (CommonTree)adaptor.create(char_literal17);
            	            adaptor.addChild(root_0, char_literal17_tree);
            	            }
            	            pushFollow(FOLLOW_initializer_in_reactive_declarator420);
            	            initializer18=initializer();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer18.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:289:428: ( range_declarator )?
            	    int alt6=2;
            	    int LA6_0 = input.LA(1);

            	    if ( (LA6_0==44) ) {
            	        alt6=1;
            	    }
            	    switch (alt6) {
            	        case 1 :
            	            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: range_declarator
            	            {
            	            pushFollow(FOLLOW_range_declarator_in_reactive_declarator424);
            	            range_declarator19=range_declarator();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, range_declarator19.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, reactive_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reactive_declarator"

    public static class range_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:291:1: range_declarator : '#range' min= DECIMAL_LITERAL 'to' max= DECIMAL_LITERAL ;
    public final PretCParser.range_declarator_return range_declarator() throws RecognitionException {
        PretCParser.range_declarator_return retval = new PretCParser.range_declarator_return();
        retval.start = input.LT(1);
        int range_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token min=null;
        Token max=null;
        Token string_literal20=null;
        Token string_literal21=null;

        CommonTree min_tree=null;
        CommonTree max_tree=null;
        CommonTree string_literal20_tree=null;
        CommonTree string_literal21_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:292:2: ( '#range' min= DECIMAL_LITERAL 'to' max= DECIMAL_LITERAL )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:292:5: '#range' min= DECIMAL_LITERAL 'to' max= DECIMAL_LITERAL
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal20=(Token)match(input,44,FOLLOW_44_in_range_declarator438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = (CommonTree)adaptor.create(string_literal20);
            adaptor.addChild(root_0, string_literal20_tree);
            }
            min=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_range_declarator442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            min_tree = (CommonTree)adaptor.create(min);
            adaptor.addChild(root_0, min_tree);
            }
            string_literal21=(Token)match(input,45,FOLLOW_45_in_range_declarator444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal21_tree = (CommonTree)adaptor.create(string_literal21);
            adaptor.addChild(root_0, string_literal21_tree);
            }
            max=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_range_declarator448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            max_tree = (CommonTree)adaptor.create(max);
            adaptor.addChild(root_0, max_tree);
            }
            if ( state.backtracking==0 ) {

              			//System.out.println("ddddddddddddddddd "+((nodes_scope)nodes_stack.peek()).node.functionParameter);
              			//System.out.println("fffffffffffffffff "+((nodes_scope)nodes_stack.peek()).node.name);
              			int numberOfProcessedVariables = ((nodes_scope)nodes_stack.peek()).node.name.size();
              			if (((nodes_scope)nodes_stack.peek()).node.functionParameter.size() > 0) {
              				//minus 1 has function has already processed the name before processing the range
              				//hwere name on variable declare doesnt do that
              				numberOfProcessedVariables = ((nodes_scope)nodes_stack.peek()).node.functionParameter.size()-1;
              			}
              			while(numberOfProcessedVariables > ((nodes_scope)nodes_stack.peek()).node.minValue.size()) {
              				((nodes_scope)nodes_stack.peek()).node.minValue.add("UNDEFINED");
              				((nodes_scope)nodes_stack.peek()).node.maxValue.add("UNDEFINED");
              			}
              			((nodes_scope)nodes_stack.peek()).node.minValue.add((min!=null?min.getText():null));
              			((nodes_scope)nodes_stack.peek()).node.maxValue.add((max!=null?max.getText():null));
              			
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, range_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range_declarator"

    public static class thread_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "thread_definition"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:311:1: thread_definition : 'thread' IDENTIFIER '(' 'void' ')' scope_statement -> ^( 'thread' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] scope_statement ) ;
    public final PretCParser.thread_definition_return thread_definition() throws RecognitionException {
        nodes_stack.push(new nodes_scope());

        PretCParser.thread_definition_return retval = new PretCParser.thread_definition_return();
        retval.start = input.LT(1);
        int thread_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal22=null;
        Token IDENTIFIER23=null;
        Token char_literal24=null;
        Token string_literal25=null;
        Token char_literal26=null;
        PretCParser.scope_statement_return scope_statement27 = null;


        CommonTree string_literal22_tree=null;
        CommonTree IDENTIFIER23_tree=null;
        CommonTree char_literal24_tree=null;
        CommonTree string_literal25_tree=null;
        CommonTree char_literal26_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_scope_statement=new RewriteRuleSubtreeStream(adaptor,"rule scope_statement");

          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          long ID=-1;
          long lineNo = input.LT(1).getLine();
          scopeFuncCount++; //thread is a type of function

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:319:2: ( 'thread' IDENTIFIER '(' 'void' ')' scope_statement -> ^( 'thread' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] scope_statement ) )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:319:4: 'thread' IDENTIFIER '(' 'void' ')' scope_statement
            {
            string_literal22=(Token)match(input,46,FOLLOW_46_in_thread_definition473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal22);

            IDENTIFIER23=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_thread_definition475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER23);

            char_literal24=(Token)match(input,47,FOLLOW_47_in_thread_definition477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(char_literal24);

            string_literal25=(Token)match(input,48,FOLLOW_48_in_thread_definition479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal25);

            char_literal26=(Token)match(input,49,FOLLOW_49_in_thread_definition481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(char_literal26);

            pushFollow(FOLLOW_scope_statement_in_thread_definition483);
            scope_statement27=scope_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_scope_statement.add(scope_statement27.getTree());
            if ( state.backtracking==0 ) {

              			sourceTemp = "thread "+(IDENTIFIER23!=null?IDENTIFIER23.getText():null)+"(void)";
              			ID = idCount++;
              			((nodes_scope)nodes_stack.peek()).node.ID=ID;
              			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
              			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
              			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
              			((nodes_scope)nodes_stack.peek()).node.type="thread";
              			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
              			((nodes_scope)nodes_stack.peek()).node.name.add((IDENTIFIER23!=null?IDENTIFIER23.getText():null).trim()); //added trim to remove white space causing error
              			
              			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
              			if (debug > 0) {
              				System.out.println(nodesTable.get(ID));
              			}
              		
            }


            // AST REWRITE
            // elements: 46, scope_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 335:5: -> ^( 'thread' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] scope_statement )
            {
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:335:9: ^( 'thread' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] scope_statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));
                adaptor.addChild(root_1, stream_scope_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, thread_definition_StartIndex); }
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "thread_definition"

    public static class function_definition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_definition"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:338:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ scope_statement | scope_statement ) -> ^( FUNCTION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ( declaration )* scope_statement ) ;
    public final PretCParser.function_definition_return function_definition() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());
        nodes_stack.push(new nodes_scope());
        is_stack.push(new is_scope());
        isFromFunction_stack.push(new isFromFunction_scope());
        scopeNodes_stack.push(new scopeNodes_scope());

        PretCParser.function_definition_return retval = new PretCParser.function_definition_return();
        retval.start = input.LT(1);
        int function_definition_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.declaration_specifiers_return declaration_specifiers28 = null;

        PretCParser.declarator_return declarator29 = null;

        PretCParser.declaration_return declaration30 = null;

        PretCParser.scope_statement_return scope_statement31 = null;

        PretCParser.scope_statement_return scope_statement32 = null;


        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        RewriteRuleSubtreeStream stream_scope_statement=new RewriteRuleSubtreeStream(adaptor,"rule scope_statement");

          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();
          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          ((isFromFunction_scope)isFromFunction_stack.peek()).data = new Boolean(true);
          long ID=-1;
          long lineNo = input.LT(1).getLine();
          scopeFuncCount++; 
          long previousScope = currentScope;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:356:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ scope_statement | scope_statement ) -> ^( FUNCTION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ( declaration )* scope_statement ) )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:356:4: ( declaration_specifiers )? declarator ( ( declaration )+ scope_statement | scope_statement )
            {
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:356:4: ( declaration_specifiers )?
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declaration_specifiers
                    {
                    pushFollow(FOLLOW_declaration_specifiers_in_function_definition539);
                    declaration_specifiers28=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers28.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			((isFromFunction_scope)isFromFunction_stack.peek()).data = false;
              			currentScope = ++scopeCount;
              			((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);
              		  	((scopeNodes_scope)scopeNodes_stack.peek()).node.parentID = previousScope;
              		
            }
            pushFollow(FOLLOW_declarator_in_function_definition551);
            declarator29=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declarator.add(declarator29.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:364:3: ( ( declaration )+ scope_statement | scope_statement )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:364:5: ( declaration )+ scope_statement
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:364:5: ( declaration )+
                    int cnt9=0;
                    loop9:
                    do {
                        int alt9=2;
                        alt9 = dfa9.predict(input);
                        switch (alt9) {
                    	case 1 :
                    	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declaration
                    	    {
                    	    pushFollow(FOLLOW_declaration_in_function_definition560);
                    	    declaration30=declaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declaration.add(declaration30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt9 >= 1 ) break loop9;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(9, input);
                                throw eee;
                        }
                        cnt9++;
                    } while (true);

                    pushFollow(FOLLOW_scope_statement_in_function_definition563);
                    scope_statement31=scope_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_scope_statement.add(scope_statement31.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:365:5: scope_statement
                    {
                    pushFollow(FOLLOW_scope_statement_in_function_definition573);
                    scope_statement32=scope_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_scope_statement.add(scope_statement32.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			sourceTemp = "";
              			if ((declaration_specifiers28!=null?input.toString(declaration_specifiers28.start,declaration_specifiers28.stop):null) != null) {
              				sourceTemp +=  (declaration_specifiers28!=null?input.toString(declaration_specifiers28.start,declaration_specifiers28.stop):null);
              			}
              			sourceTemp +=  " " + (declarator29!=null?input.toString(declarator29.start,declarator29.stop):null);
              			ID = idCount++;
              			((nodes_scope)nodes_stack.peek()).node.ID=ID;
              			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
              			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
              			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
              			String function_name = ((declarator29!=null?input.toString(declarator29.start,declarator29.stop):null)).replaceFirst("[(].*","").trim(); //add trim on name
              			//System.out.println("........................."+function_name);
              			((nodes_scope)nodes_stack.peek()).node.type="function";
              			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
              			//((nodes_scope)nodes_stack.peek()).node.name.add((declarator29!=null?input.toString(declarator29.start,declarator29.stop):null));
              			((nodes_scope)nodes_stack.peek()).node.name.add(function_name);
              			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
              			if (debug > 0) {
              				System.out.println(nodesTable.get(ID));
              			}
              		
            }


            // AST REWRITE
            // elements: scope_statement, declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 389:3: -> ^( FUNCTION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ( declaration )* scope_statement )
            {
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:389:7: ^( FUNCTION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ( declaration )* scope_statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_TOK, "FUNCTION_TOK"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:389:60: ( declaration )*
                while ( stream_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_declaration.nextTree());

                }
                stream_declaration.reset();
                adaptor.addChild(root_1, stream_scope_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                ((isFromFunction_scope)isFromFunction_stack.peek()).data = false;
                
                scopeList.put(currentScope,((scopeNodes_scope)scopeNodes_stack.peek()).node);
                currentScope = previousScope;

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, function_definition_StartIndex); }
            Symbols_stack.pop();
            nodes_stack.pop();
            is_stack.pop();
            isFromFunction_stack.pop();
            scopeNodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "function_definition"

    public static class declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:393:1: declaration : ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' -> ^( TYPE_DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | declaration_specifiers ( init_declarator_list )? ';' -> ^( DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | LINE_COMMAND -> PREPROC_TOK[$LINE_COMMAND.text] );
    public final PretCParser.declaration_return declaration() throws RecognitionException {
        is_stack.push(new is_scope());
        nodes_stack.push(new nodes_scope());

        PretCParser.declaration_return retval = new PretCParser.declaration_return();
        retval.start = input.LT(1);
        int declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal33=null;
        Token char_literal36=null;
        Token char_literal39=null;
        Token LINE_COMMAND40=null;
        PretCParser.declaration_specifiers_return declaration_specifiers34 = null;

        PretCParser.init_declarator_list_return init_declarator_list35 = null;

        PretCParser.declaration_specifiers_return declaration_specifiers37 = null;

        PretCParser.init_declarator_list_return init_declarator_list38 = null;


        CommonTree string_literal33_tree=null;
        CommonTree char_literal36_tree=null;
        CommonTree char_literal39_tree=null;
        CommonTree LINE_COMMAND40_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_LINE_COMMAND=new RewriteRuleTokenStream(adaptor,"token LINE_COMMAND");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_init_declarator_list=new RewriteRuleSubtreeStream(adaptor,"rule init_declarator_list");

          ((is_scope)is_stack.peek()).typeDef = false;
          ((is_scope)is_stack.peek()).declaration = true;
          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          long ID=-1;
          long lineNo = input.LT(1).getLine();
          boolean gotName = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:406:2: ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' -> ^( TYPE_DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | declaration_specifiers ( init_declarator_list )? ';' -> ^( DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | LINE_COMMAND -> PREPROC_TOK[$LINE_COMMAND.text] )
            int alt13=3;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:406:4: 'typedef' ( declaration_specifiers )? init_declarator_list ';'
                    {
                    string_literal33=(Token)match(input,50,FOLLOW_50_in_declaration641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_50.add(string_literal33);

                    if ( state.backtracking==0 ) {
                      ((nodes_scope)nodes_stack.peek()).node.type="typedef";
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:406:45: ( declaration_specifiers )?
                    int alt11=2;
                    alt11 = dfa11.predict(input);
                    switch (alt11) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declaration_specifiers
                            {
                            pushFollow(FOLLOW_declaration_specifiers_in_declaration645);
                            declaration_specifiers34=declaration_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers34.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      ((is_scope)is_stack.peek()).typeDef =true;
                    }
                    pushFollow(FOLLOW_init_declarator_list_in_declaration653);
                    init_declarator_list35=init_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_init_declarator_list.add(init_declarator_list35.getTree());
                    char_literal36=(Token)match(input,40,FOLLOW_40_in_declaration655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal36);

                    if ( state.backtracking==0 ) {

                      	  		sourceTemp = "typedef ";
                      	  		if ((declaration_specifiers34!=null?input.toString(declaration_specifiers34.start,declaration_specifiers34.stop):null) != null) {
                      	  			sourceTemp += (declaration_specifiers34!=null?input.toString(declaration_specifiers34.start,declaration_specifiers34.stop):null) +" ";
                      	  		}
                      	  		sourceTemp += (init_declarator_list35!=null?input.toString(init_declarator_list35.start,init_declarator_list35.stop):null) +";";
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			if (isFromFunction_stack.size() > 0) { //within function scope
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			}else{
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=0; //global
                      			}
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:5: -> ^( TYPE_DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:430:7: ^( TYPE_DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATION_TOK, "TYPE_DECLARATION_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:432:4: declaration_specifiers ( init_declarator_list )? ';'
                    {
                    pushFollow(FOLLOW_declaration_specifiers_in_declaration687);
                    declaration_specifiers37=declaration_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers37.getTree());
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:432:27: ( init_declarator_list )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==IDENTIFIER||LA12_0==47||LA12_0==73) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:432:28: init_declarator_list
                            {
                            pushFollow(FOLLOW_init_declarator_list_in_declaration690);
                            init_declarator_list38=init_declarator_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_init_declarator_list.add(init_declarator_list38.getTree());
                            if ( state.backtracking==0 ) {
                              gotName=true;
                            }

                            }
                            break;

                    }

                    char_literal39=(Token)match(input,40,FOLLOW_40_in_declaration696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal39);

                    if ( state.backtracking==0 ) {

                      			if (gotName == false) {
                      				((nodes_scope)nodes_stack.peek()).node.name.add(""); 
                      			}
                      			sourceTemp =  "";
                      			sourceTemp += (declaration_specifiers37!=null?input.toString(declaration_specifiers37.start,declaration_specifiers37.stop):null) ;
                      			if ((init_declarator_list38!=null?input.toString(init_declarator_list38.start,init_declarator_list38.stop):null) != null) {
                      				sourceTemp += " " + (init_declarator_list38!=null?input.toString(init_declarator_list38.start,init_declarator_list38.stop):null);
                      			}
                      			sourceTemp += ";";
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			if (isFromFunction_stack.size() > 0) { //within function scope
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			}else{
                      				((nodes_scope)nodes_stack.peek()).node.funcScopeID=0; //global
                      			}
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.type="declare";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 460:3: -> ^( DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:460:5: ^( DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION_TOK, "DECLARATION_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+ID));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:461:4: LINE_COMMAND
                    {
                    LINE_COMMAND40=(Token)match(input,LINE_COMMAND,FOLLOW_LINE_COMMAND_in_declaration719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LINE_COMMAND.add(LINE_COMMAND40);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 461:17: -> PREPROC_TOK[$LINE_COMMAND.text]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PREPROC_TOK, (LINE_COMMAND40!=null?LINE_COMMAND40.getText():null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                ((is_scope)is_stack.peek()).declaration = false;

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, declaration_StartIndex); }
            is_stack.pop();
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "declaration"

    public static class declaration_specifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration_specifiers"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:464:1: declaration_specifiers : ( storage_class_specifier | type_qualifier )* type_specifier ;
    public final PretCParser.declaration_specifiers_return declaration_specifiers() throws RecognitionException {
        PretCParser.declaration_specifiers_return retval = new PretCParser.declaration_specifiers_return();
        retval.start = input.LT(1);
        int declaration_specifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.storage_class_specifier_return storage_class_specifier41 = null;

        PretCParser.type_qualifier_return type_qualifier42 = null;

        PretCParser.type_specifier_return type_specifier43 = null;




        	String specifiers = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:472:2: ( ( storage_class_specifier | type_qualifier )* type_specifier )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:472:6: ( storage_class_specifier | type_qualifier )* type_specifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:472:6: ( storage_class_specifier | type_qualifier )*
            loop14:
            do {
                int alt14=3;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:472:10: storage_class_specifier
            	    {
            	    pushFollow(FOLLOW_storage_class_specifier_in_declaration_specifiers749);
            	    storage_class_specifier41=storage_class_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, storage_class_specifier41.getTree());
            	    if ( state.backtracking==0 ) {
            	      specifiers+=(storage_class_specifier41!=null?input.toString(storage_class_specifier41.start,storage_class_specifier41.stop):null)+" ";
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:473:14: type_qualifier
            	    {
            	    pushFollow(FOLLOW_type_qualifier_in_declaration_specifiers766);
            	    type_qualifier42=type_qualifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier42.getTree());
            	    if ( state.backtracking==0 ) {
            	      specifiers+=(type_qualifier42!=null?input.toString(type_qualifier42.start,type_qualifier42.stop):null)+" ";
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            pushFollow(FOLLOW_type_specifier_in_declaration_specifiers799);
            type_specifier43=type_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier43.getTree());
            if ( state.backtracking==0 ) {
              specifiers+=(type_specifier43!=null?input.toString(type_specifier43.start,type_specifier43.stop):null)+" ";
            }
            if ( state.backtracking==0 ) {

                      	if (addtype) {
                      		((nodes_scope)nodes_stack.peek()).node.varSpecifiers.add(specifiers);
                      		preVarSpecifiers = specifiers; 
                      	}
                      	
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, declaration_specifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declaration_specifiers"

    public static class init_declarator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_declarator_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:488:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
    public final PretCParser.init_declarator_list_return init_declarator_list() throws RecognitionException {
        PretCParser.init_declarator_list_return retval = new PretCParser.init_declarator_list_return();
        retval.start = input.LT(1);
        int init_declarator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal45=null;
        PretCParser.init_declarator_return init_declarator44 = null;

        PretCParser.init_declarator_return init_declarator46 = null;


        CommonTree char_literal45_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:489:2: ( init_declarator ( ',' init_declarator )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:489:4: init_declarator ( ',' init_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_init_declarator_in_init_declarator_list847);
            init_declarator44=init_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, init_declarator44.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:489:20: ( ',' init_declarator )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==43) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:489:21: ',' init_declarator
            	    {
            	    char_literal45=(Token)match(input,43,FOLLOW_43_in_init_declarator_list850); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal45_tree = (CommonTree)adaptor.create(char_literal45);
            	    adaptor.addChild(root_0, char_literal45_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.constantStatement.add(new ArrayList<String>());
            	    }
            	    pushFollow(FOLLOW_init_declarator_in_init_declarator_list853);
            	    init_declarator46=init_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, init_declarator46.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.declaredType.add(preType);((nodes_scope)nodes_stack.peek()).node.varSpecifiers.add(preVarSpecifiers);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, init_declarator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "init_declarator_list"

    public static class init_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:492:1: init_declarator : declarator ( '=' initializer )? ( range_declarator )? ;
    public final PretCParser.init_declarator_return init_declarator() throws RecognitionException {
        PretCParser.init_declarator_return retval = new PretCParser.init_declarator_return();
        retval.start = input.LT(1);
        int init_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal48=null;
        PretCParser.declarator_return declarator47 = null;

        PretCParser.initializer_return initializer49 = null;

        PretCParser.range_declarator_return range_declarator50 = null;


        CommonTree char_literal48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:493:2: ( declarator ( '=' initializer )? ( range_declarator )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:493:4: declarator ( '=' initializer )? ( range_declarator )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_declarator_in_init_declarator870);
            declarator47=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator47.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:493:15: ( '=' initializer )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==42) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:493:16: '=' initializer
                    {
                    char_literal48=(Token)match(input,42,FOLLOW_42_in_init_declarator873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal48_tree = (CommonTree)adaptor.create(char_literal48);
                    adaptor.addChild(root_0, char_literal48_tree);
                    }
                    pushFollow(FOLLOW_initializer_in_init_declarator875);
                    initializer49=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer49.getTree());

                    }
                    break;

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:493:35: ( range_declarator )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==44) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: range_declarator
                    {
                    pushFollow(FOLLOW_range_declarator_in_init_declarator880);
                    range_declarator50=range_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range_declarator50.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			//System.out.println("sssssssss "+(declarator47!=null?input.toString(declarator47.start,declarator47.stop):null));
              			((nodes_scope)nodes_stack.peek()).node.name.add((declarator47!=null?input.toString(declarator47.start,declarator47.stop):null));	
              			if (((nodes_scope)nodes_stack.peek()).node.type.equals("typedef")==false) {
              				((scopeNodes_scope)scopeNodes_stack.peek()).node.variableMapPut((declarator47!=null?input.toString(declarator47.start,declarator47.stop):null),((nodes_scope)nodes_stack.peek()).node);
              			}
              			
              			/*if (((nodes_scope)nodes_stack.peek()).node.constantStatement.size() < ((nodes_scope)nodes_stack.peek()).node.name.size()) {
              				((nodes_scope)nodes_stack.peek()).node.constantStatement.add("UNDEFINED");//undefined var
              			}*/
              			//((nodes_scope)nodes_stack.peek()).node.constantStatement.add((initializer49!=null?input.toString(initializer49.start,initializer49.stop):null));
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, init_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "init_declarator"

    public static class storage_class_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "storage_class_specifier"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:508:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
    public final PretCParser.storage_class_specifier_return storage_class_specifier() throws RecognitionException {
        PretCParser.storage_class_specifier_return retval = new PretCParser.storage_class_specifier_return();
        retval.start = input.LT(1);
        int storage_class_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set51=null;

        CommonTree set51_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:509:2: ( 'extern' | 'static' | 'auto' | 'register' )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set51=(Token)input.LT(1);
            if ( (input.LA(1)>=51 && input.LA(1)<=54) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set51));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, storage_class_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "storage_class_specifier"

    public static class type_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_specifier"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:515:1: type_specifier : ( 'void' | ( 'unsigned' | 'signed' )? 'char' | ( 'unsigned' | 'signed' )? 'short' | ( 'unsigned' | 'signed' )? 'int' | ( 'unsigned' | 'signed' )? 'long' | 'float' | 'double' | struct_or_union_specifier | enum_specifier | type_id );
    public final PretCParser.type_specifier_return type_specifier() throws RecognitionException {
        PretCParser.type_specifier_return retval = new PretCParser.type_specifier_return();
        retval.start = input.LT(1);
        int type_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal52=null;
        Token string_literal53=null;
        Token string_literal54=null;
        Token string_literal55=null;
        Token string_literal56=null;
        Token string_literal57=null;
        Token string_literal58=null;
        Token string_literal59=null;
        Token string_literal60=null;
        Token string_literal61=null;
        Token string_literal62=null;
        Token string_literal63=null;
        Token string_literal64=null;
        Token string_literal65=null;
        Token string_literal66=null;
        PretCParser.struct_or_union_specifier_return struct_or_union_specifier67 = null;

        PretCParser.enum_specifier_return enum_specifier68 = null;

        PretCParser.type_id_return type_id69 = null;


        CommonTree string_literal52_tree=null;
        CommonTree string_literal53_tree=null;
        CommonTree string_literal54_tree=null;
        CommonTree string_literal55_tree=null;
        CommonTree string_literal56_tree=null;
        CommonTree string_literal57_tree=null;
        CommonTree string_literal58_tree=null;
        CommonTree string_literal59_tree=null;
        CommonTree string_literal60_tree=null;
        CommonTree string_literal61_tree=null;
        CommonTree string_literal62_tree=null;
        CommonTree string_literal63_tree=null;
        CommonTree string_literal64_tree=null;
        CommonTree string_literal65_tree=null;
        CommonTree string_literal66_tree=null;


        	String typeTemp = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:534:2: ( 'void' | ( 'unsigned' | 'signed' )? 'char' | ( 'unsigned' | 'signed' )? 'short' | ( 'unsigned' | 'signed' )? 'int' | ( 'unsigned' | 'signed' )? 'long' | 'float' | 'double' | struct_or_union_specifier | enum_specifier | type_id )
            int alt22=10;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:534:4: 'void'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal52=(Token)match(input,48,FOLLOW_48_in_type_specifier932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal52_tree = (CommonTree)adaptor.create(string_literal52);
                    adaptor.addChild(root_0, string_literal52_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp ="void";
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:535:4: ( 'unsigned' | 'signed' )? 'char'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:535:4: ( 'unsigned' | 'signed' )?
                    int alt18=3;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==55) ) {
                        alt18=1;
                    }
                    else if ( (LA18_0==56) ) {
                        alt18=2;
                    }
                    switch (alt18) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:535:5: 'unsigned'
                            {
                            string_literal53=(Token)match(input,55,FOLLOW_55_in_type_specifier949); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal53_tree = (CommonTree)adaptor.create(string_literal53);
                            adaptor.addChild(root_0, string_literal53_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="unsigned";
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:535:39: 'signed'
                            {
                            string_literal54=(Token)match(input,56,FOLLOW_56_in_type_specifier953); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal54_tree = (CommonTree)adaptor.create(string_literal54);
                            adaptor.addChild(root_0, string_literal54_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="signed";
                            }

                            }
                            break;

                    }

                    string_literal55=(Token)match(input,57,FOLLOW_57_in_type_specifier958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = (CommonTree)adaptor.create(string_literal55);
                    adaptor.addChild(root_0, string_literal55_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp +=" char";
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:536:4: ( 'unsigned' | 'signed' )? 'short'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:536:4: ( 'unsigned' | 'signed' )?
                    int alt19=3;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==55) ) {
                        alt19=1;
                    }
                    else if ( (LA19_0==56) ) {
                        alt19=2;
                    }
                    switch (alt19) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:536:5: 'unsigned'
                            {
                            string_literal56=(Token)match(input,55,FOLLOW_55_in_type_specifier966); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal56_tree = (CommonTree)adaptor.create(string_literal56);
                            adaptor.addChild(root_0, string_literal56_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="unsigned";
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:536:39: 'signed'
                            {
                            string_literal57=(Token)match(input,56,FOLLOW_56_in_type_specifier970); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal57_tree = (CommonTree)adaptor.create(string_literal57);
                            adaptor.addChild(root_0, string_literal57_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="signed";
                            }

                            }
                            break;

                    }

                    string_literal58=(Token)match(input,58,FOLLOW_58_in_type_specifier975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal58_tree = (CommonTree)adaptor.create(string_literal58);
                    adaptor.addChild(root_0, string_literal58_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp +=" short";
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:537:4: ( 'unsigned' | 'signed' )? 'int'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:537:4: ( 'unsigned' | 'signed' )?
                    int alt20=3;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==55) ) {
                        alt20=1;
                    }
                    else if ( (LA20_0==56) ) {
                        alt20=2;
                    }
                    switch (alt20) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:537:5: 'unsigned'
                            {
                            string_literal59=(Token)match(input,55,FOLLOW_55_in_type_specifier983); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal59_tree = (CommonTree)adaptor.create(string_literal59);
                            adaptor.addChild(root_0, string_literal59_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="unsigned";
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:537:39: 'signed'
                            {
                            string_literal60=(Token)match(input,56,FOLLOW_56_in_type_specifier987); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal60_tree = (CommonTree)adaptor.create(string_literal60);
                            adaptor.addChild(root_0, string_literal60_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="signed";
                            }

                            }
                            break;

                    }

                    string_literal61=(Token)match(input,59,FOLLOW_59_in_type_specifier992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal61_tree = (CommonTree)adaptor.create(string_literal61);
                    adaptor.addChild(root_0, string_literal61_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp +=" int";
                    }

                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:538:4: ( 'unsigned' | 'signed' )? 'long'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:538:4: ( 'unsigned' | 'signed' )?
                    int alt21=3;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==55) ) {
                        alt21=1;
                    }
                    else if ( (LA21_0==56) ) {
                        alt21=2;
                    }
                    switch (alt21) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:538:5: 'unsigned'
                            {
                            string_literal62=(Token)match(input,55,FOLLOW_55_in_type_specifier1001); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal62_tree = (CommonTree)adaptor.create(string_literal62);
                            adaptor.addChild(root_0, string_literal62_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="unsigned";
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:538:39: 'signed'
                            {
                            string_literal63=(Token)match(input,56,FOLLOW_56_in_type_specifier1005); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal63_tree = (CommonTree)adaptor.create(string_literal63);
                            adaptor.addChild(root_0, string_literal63_tree);
                            }
                            if ( state.backtracking==0 ) {
                              typeTemp="signed";
                            }

                            }
                            break;

                    }

                    string_literal64=(Token)match(input,60,FOLLOW_60_in_type_specifier1010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal64_tree = (CommonTree)adaptor.create(string_literal64);
                    adaptor.addChild(root_0, string_literal64_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp +=" long";
                    }

                    }
                    break;
                case 6 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:539:4: 'float'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal65=(Token)match(input,61,FOLLOW_61_in_type_specifier1017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal65_tree = (CommonTree)adaptor.create(string_literal65);
                    adaptor.addChild(root_0, string_literal65_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp ="float";
                    }

                    }
                    break;
                case 7 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:540:4: 'double'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal66=(Token)match(input,62,FOLLOW_62_in_type_specifier1032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal66_tree = (CommonTree)adaptor.create(string_literal66);
                    adaptor.addChild(root_0, string_literal66_tree);
                    }
                    if ( state.backtracking==0 ) {
                      typeTemp ="double";
                    }

                    }
                    break;
                case 8 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:543:4: struct_or_union_specifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_specifier_in_type_specifier1051);
                    struct_or_union_specifier67=struct_or_union_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union_specifier67.getTree());
                    if ( state.backtracking==0 ) {

                      						typeTemp = (struct_or_union_specifier67!=null?struct_or_union_specifier67.typeTemp:null);
                      						//declared stuctures
                      						//(struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).sourceNode = ((nodes_scope)nodes_stack.peek()).node;
                      						((nodes_scope)nodes_stack.peek()).node.addScopedVaraibles((struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null));
                      						
                      						(struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).structTypeName = (struct_or_union_specifier67!=null?struct_or_union_specifier67.structTypeName:null);
                      						if ((struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).name.size()>0) { //has things inside struct
                      							//System.out.println((struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).name+" sdfadsghgas ash "+ (struct_or_union_specifier67!=null?struct_or_union_specifier67.structTypeName:null) + " "+((nodes_scope)nodes_stack.peek()).node);
                      							if ((struct_or_union_specifier67!=null?struct_or_union_specifier67.structTypeName:null) == null) {  
                      								//if (((nodes_scope)nodes_stack.peek()).node.type.equals("typedef")) {
                      								//	System.out.println(((nodes_scope)nodes_stack.peek()).node.name.get(0));
                      								////	((scopeNodes_scope)scopeNodes_stack.peek()).node.listOfStruct.put(((nodes_scope)nodes_stack.peek()).node.name.get(0),((nodes_scope)nodes_stack.peek()).node);
                      								//	(struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).structTypeName = ((nodes_scope)nodes_stack.peek()).node.name.get(0);
                      								//	
                      								//}else{
                      									long ID = typeDefStuctIDGen++;
                      									((scopeNodes_scope)scopeNodes_stack.peek()).node.listOfStruct.put("_gen_struct_"+(ID),((nodes_scope)nodes_stack.peek()).node);
                      									(struct_or_union_specifier67!=null?struct_or_union_specifier67.n:null).structTypeName = "_gen_struct_"+ID;
                      								//}
                      							}else{
                      								((scopeNodes_scope)scopeNodes_stack.peek()).node.listOfStruct.put((struct_or_union_specifier67!=null?struct_or_union_specifier67.structTypeName:null),((nodes_scope)nodes_stack.peek()).node);
                      							}
                      							//System.out.println("ddddddddddddddddddd" + ((nodes_scope)nodes_stack.peek()).node);
                      						}
                      					
                    }

                    }
                    break;
                case 9 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:569:4: enum_specifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enum_specifier_in_type_specifier1058);
                    enum_specifier68=enum_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_specifier68.getTree());
                    if ( state.backtracking==0 ) {
                      typeTemp ="enum";
                    }

                    }
                    break;
                case 10 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:570:4: type_id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_id_in_type_specifier1067);
                    type_id69=type_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_id69.getTree());
                    if ( state.backtracking==0 ) {
                      typeTemp =(type_id69!=null?input.toString(type_id69.start,type_id69.stop):null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	if (typeTemp.equals("") == false) {
              		if (isFromFunction_stack.size() > 0 && ((isFromFunction_scope)isFromFunction_stack.peek()).data == true) {
              			((nodes_scope)nodes_stack.peek()).node.returnType=typeTemp;
              		}else{
              			        
                      		if (addtype) {
                      			preType = typeTemp.replaceAll(" ","");
              				((nodes_scope)nodes_stack.peek()).node.declaredType.add(preType);
              				
              			}
              			
              		}	
              	}

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, type_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_specifier"

    public static class type_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_id"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:573:1: type_id : {...}? IDENTIFIER ;
    public final PretCParser.type_id_return type_id() throws RecognitionException {
        PretCParser.type_id_return retval = new PretCParser.type_id_return();
        retval.start = input.LT(1);
        int type_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER70=null;

        CommonTree IDENTIFIER70_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:574:5: ({...}? IDENTIFIER )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:574:9: {...}? IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((isTypeName(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
            }
            IDENTIFIER70=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_type_id1092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER70_tree = (CommonTree)adaptor.create(IDENTIFIER70);
            adaptor.addChild(root_0, IDENTIFIER70_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, type_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_id"

    public static class struct_or_union_specifier_return extends ParserRuleReturnScope {
        public String typeTemp;
        public StatementNode n;
        public String structTypeName;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_or_union_specifier"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:578:1: struct_or_union_specifier returns [String typeTemp, StatementNode n, String structTypeName] options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );
    public final PretCParser.struct_or_union_specifier_return struct_or_union_specifier() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());
        nodes_stack.push(new nodes_scope());

        PretCParser.struct_or_union_specifier_return retval = new PretCParser.struct_or_union_specifier_return();
        retval.start = input.LT(1);
        int struct_or_union_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER72=null;
        Token char_literal73=null;
        Token char_literal75=null;
        Token IDENTIFIER77=null;
        PretCParser.struct_or_union_return struct_or_union71 = null;

        PretCParser.struct_declaration_list_return struct_declaration_list74 = null;

        PretCParser.struct_or_union_return struct_or_union76 = null;


        CommonTree IDENTIFIER72_tree=null;
        CommonTree char_literal73_tree=null;
        CommonTree char_literal75_tree=null;
        CommonTree IDENTIFIER77_tree=null;


          retval.n =  new StatementNode();
          retval.n.type = "scopedVaraibles";	
          ((nodes_scope)nodes_stack.peek()).node = retval.n;
          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();
          retval.typeTemp = "";
          

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:589:2: ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER )
            int alt24=2;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:589:4: struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_in_struct_or_union_specifier1136);
                    struct_or_union71=struct_or_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union71.getTree());
                    if ( state.backtracking==0 ) {
                      retval.typeTemp = (struct_or_union71!=null?struct_or_union71.typeTemp:null);
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:589:61: ( IDENTIFIER )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==IDENTIFIER) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:589:62: IDENTIFIER
                            {
                            IDENTIFIER72=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_or_union_specifier1141); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENTIFIER72_tree = (CommonTree)adaptor.create(IDENTIFIER72);
                            adaptor.addChild(root_0, IDENTIFIER72_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.structTypeName = (IDENTIFIER72!=null?IDENTIFIER72.getText():null);
                            }

                            }
                            break;

                    }

                    char_literal73=(Token)match(input,63,FOLLOW_63_in_struct_or_union_specifier1146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
                    adaptor.addChild(root_0, char_literal73_tree);
                    }
                    pushFollow(FOLLOW_struct_declaration_list_in_struct_or_union_specifier1148);
                    struct_declaration_list74=struct_declaration_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration_list74.getTree());
                    char_literal75=(Token)match(input,64,FOLLOW_64_in_struct_or_union_specifier1150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal75_tree = (CommonTree)adaptor.create(char_literal75);
                    adaptor.addChild(root_0, char_literal75_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:590:4: struct_or_union IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_or_union_in_struct_or_union_specifier1155);
                    struct_or_union76=struct_or_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_or_union76.getTree());
                    if ( state.backtracking==0 ) {
                      retval.typeTemp = (struct_or_union76!=null?struct_or_union76.typeTemp:null);
                    }
                    IDENTIFIER77=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_or_union_specifier1159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER77_tree = (CommonTree)adaptor.create(IDENTIFIER77);
                    adaptor.addChild(root_0, IDENTIFIER77_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.structTypeName = (IDENTIFIER77!=null?IDENTIFIER77.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, struct_or_union_specifier_StartIndex); }
            Symbols_stack.pop();
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "struct_or_union_specifier"

    public static class struct_or_union_return extends ParserRuleReturnScope {
        public String typeTemp;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_or_union"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:593:1: struct_or_union returns [String typeTemp] : ( 'struct' | 'union' );
    public final PretCParser.struct_or_union_return struct_or_union() throws RecognitionException {
        PretCParser.struct_or_union_return retval = new PretCParser.struct_or_union_return();
        retval.start = input.LT(1);
        int struct_or_union_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal78=null;
        Token string_literal79=null;

        CommonTree string_literal78_tree=null;
        CommonTree string_literal79_tree=null;


        	retval.typeTemp = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:606:2: ( 'struct' | 'union' )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==65) ) {
                alt25=1;
            }
            else if ( (LA25_0==66) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:606:4: 'struct'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal78=(Token)match(input,65,FOLLOW_65_in_struct_or_union1180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal78_tree = (CommonTree)adaptor.create(string_literal78);
                    adaptor.addChild(root_0, string_literal78_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.typeTemp ="struct";
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:607:4: 'union'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal79=(Token)match(input,66,FOLLOW_66_in_struct_or_union1187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal79_tree = (CommonTree)adaptor.create(string_literal79);
                    adaptor.addChild(root_0, string_literal79_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.typeTemp ="union";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, struct_or_union_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_or_union"

    public static class struct_declaration_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declaration_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:610:1: struct_declaration_list : struct_declaration ( struct_declaration )* ;
    public final PretCParser.struct_declaration_list_return struct_declaration_list() throws RecognitionException {
        scopeNodes_stack.push(new scopeNodes_scope());

        PretCParser.struct_declaration_list_return retval = new PretCParser.struct_declaration_list_return();
        retval.start = input.LT(1);
        int struct_declaration_list_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.struct_declaration_return struct_declaration80 = null;

        PretCParser.struct_declaration_return struct_declaration81 = null;




          long previousScope = currentScope;
          //dont put in init , init can prograss more than once when findingin which is right


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:623:2: ( struct_declaration ( struct_declaration )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:623:4: struct_declaration ( struct_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
                
              		currentScope = ++scopeCount;
              		((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);
              		((scopeNodes_scope)scopeNodes_stack.peek()).node.parentID = previousScope;
              	  
            }
            pushFollow(FOLLOW_struct_declaration_in_struct_declaration_list1218);
            struct_declaration80=struct_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration80.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:627:25: ( struct_declaration )*
            loop26:
            do {
                int alt26=2;
                alt26 = dfa26.predict(input);
                switch (alt26) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:627:26: struct_declaration
            	    {
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.constantStatement.add(new ArrayList<String>());
            	    }
            	    pushFollow(FOLLOW_struct_declaration_in_struct_declaration_list1223);
            	    struct_declaration81=struct_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration81.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              	 	((nodes_scope)nodes_stack.peek()).node.scopeID = currentScope;
              	  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                scopeList.put(currentScope,((scopeNodes_scope)scopeNodes_stack.peek()).node);
               // System.out.println("A"+currentScope);
                currentScope = previousScope;
                

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, struct_declaration_list_StartIndex); }
            scopeNodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "struct_declaration_list"

    public static class struct_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declaration"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:633:1: struct_declaration : specifier_qualifier_list ( struct_declarator_list )? ';' ;
    public final PretCParser.struct_declaration_return struct_declaration() throws RecognitionException {
        PretCParser.struct_declaration_return retval = new PretCParser.struct_declaration_return();
        retval.start = input.LT(1);
        int struct_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal84=null;
        PretCParser.specifier_qualifier_list_return specifier_qualifier_list82 = null;

        PretCParser.struct_declarator_list_return struct_declarator_list83 = null;


        CommonTree char_literal84_tree=null;


        	boolean hasName = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:637:2: ( specifier_qualifier_list ( struct_declarator_list )? ';' )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:637:4: specifier_qualifier_list ( struct_declarator_list )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_specifier_qualifier_list_in_struct_declaration1245);
            specifier_qualifier_list82=specifier_qualifier_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specifier_qualifier_list82.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:637:29: ( struct_declarator_list )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==IDENTIFIER||LA27_0==47||LA27_0==67||LA27_0==73) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:637:30: struct_declarator_list
                    {
                    pushFollow(FOLLOW_struct_declarator_list_in_struct_declaration1248);
                    struct_declarator_list83=struct_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator_list83.getTree());
                    if ( state.backtracking==0 ) {
                      hasName = true;
                    }

                    }
                    break;

            }

            char_literal84=(Token)match(input,40,FOLLOW_40_in_struct_declaration1252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal84_tree = (CommonTree)adaptor.create(char_literal84);
            adaptor.addChild(root_0, char_literal84_tree);
            }
            if ( state.backtracking==0 ) {

              		if (hasName == false) {
              			((nodes_scope)nodes_stack.peek()).node.name.add("");	
              		}
              	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, struct_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"

    public static class specifier_qualifier_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "specifier_qualifier_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:645:1: specifier_qualifier_list : ( type_qualifier | type_specifier )+ ;
    public final PretCParser.specifier_qualifier_list_return specifier_qualifier_list() throws RecognitionException {
        PretCParser.specifier_qualifier_list_return retval = new PretCParser.specifier_qualifier_list_return();
        retval.start = input.LT(1);
        int specifier_qualifier_list_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.type_qualifier_return type_qualifier85 = null;

        PretCParser.type_specifier_return type_specifier86 = null;




        	String specifiers = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:2: ( ( type_qualifier | type_specifier )+ )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:4: ( type_qualifier | type_specifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:4: ( type_qualifier | type_specifier )+
            int cnt28=0;
            loop28:
            do {
                int alt28=3;
                alt28 = dfa28.predict(input);
                switch (alt28) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:6: type_qualifier
            	    {
            	    pushFollow(FOLLOW_type_qualifier_in_specifier_qualifier_list1273);
            	    type_qualifier85=type_qualifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier85.getTree());
            	    if ( state.backtracking==0 ) {
            	      specifiers+=(type_qualifier85!=null?input.toString(type_qualifier85.start,type_qualifier85.stop):null);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:59: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_specifier_qualifier_list1279);
            	    type_specifier86=type_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_specifier86.getTree());
            	    if ( state.backtracking==0 ) {
            	      specifiers+=(type_specifier86!=null?input.toString(type_specifier86.start,type_specifier86.stop):null);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);

            if ( state.backtracking==0 ) {
              ((nodes_scope)nodes_stack.peek()).node.varSpecifiers.add(specifiers);preVarSpecifiers = specifiers; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, specifier_qualifier_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "specifier_qualifier_list"

    public static class struct_declarator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declarator_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:653:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
    public final PretCParser.struct_declarator_list_return struct_declarator_list() throws RecognitionException {
        PretCParser.struct_declarator_list_return retval = new PretCParser.struct_declarator_list_return();
        retval.start = input.LT(1);
        int struct_declarator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal88=null;
        PretCParser.struct_declarator_return struct_declarator87 = null;

        PretCParser.struct_declarator_return struct_declarator89 = null;


        CommonTree char_literal88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:654:2: ( struct_declarator ( ',' struct_declarator )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:654:4: struct_declarator ( ',' struct_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_struct_declarator_in_struct_declarator_list1298);
            struct_declarator87=struct_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator87.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:654:22: ( ',' struct_declarator )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==43) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:654:23: ',' struct_declarator
            	    {
            	    char_literal88=(Token)match(input,43,FOLLOW_43_in_struct_declarator_list1301); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal88_tree = (CommonTree)adaptor.create(char_literal88);
            	    adaptor.addChild(root_0, char_literal88_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.constantStatement.add(new ArrayList<String>());
            	    }
            	    pushFollow(FOLLOW_struct_declarator_in_struct_declarator_list1306);
            	    struct_declarator89=struct_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declarator89.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.declaredType.add(preType);((nodes_scope)nodes_stack.peek()).node.varSpecifiers.add(preVarSpecifiers);
            	    }

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, struct_declarator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declarator_list"

    public static class struct_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:657:1: struct_declarator : ( declarator ( ':' constant_expression )? ( range_declarator )? | ':' constant_expression );
    public final PretCParser.struct_declarator_return struct_declarator() throws RecognitionException {
        PretCParser.struct_declarator_return retval = new PretCParser.struct_declarator_return();
        retval.start = input.LT(1);
        int struct_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal91=null;
        Token char_literal94=null;
        PretCParser.declarator_return declarator90 = null;

        PretCParser.constant_expression_return constant_expression92 = null;

        PretCParser.range_declarator_return range_declarator93 = null;

        PretCParser.constant_expression_return constant_expression95 = null;


        CommonTree char_literal91_tree=null;
        CommonTree char_literal94_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:658:2: ( declarator ( ':' constant_expression )? ( range_declarator )? | ':' constant_expression )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==IDENTIFIER||LA32_0==47||LA32_0==73) ) {
                alt32=1;
            }
            else if ( (LA32_0==67) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:658:4: declarator ( ':' constant_expression )? ( range_declarator )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_declarator_in_struct_declarator1321);
                    declarator90=declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarator90.getTree());
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:658:15: ( ':' constant_expression )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==67) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:658:16: ':' constant_expression
                            {
                            char_literal91=(Token)match(input,67,FOLLOW_67_in_struct_declarator1324); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal91_tree = (CommonTree)adaptor.create(char_literal91);
                            adaptor.addChild(root_0, char_literal91_tree);
                            }
                            pushFollow(FOLLOW_constant_expression_in_struct_declarator1326);
                            constant_expression92=constant_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression92.getTree());

                            }
                            break;

                    }

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:658:43: ( range_declarator )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==44) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: range_declarator
                            {
                            pushFollow(FOLLOW_range_declarator_in_struct_declarator1331);
                            range_declarator93=range_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, range_declarator93.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      			//System.out.println("ddddddddddd"+(declarator90!=null?input.toString(declarator90.start,declarator90.stop):null));
                      			((nodes_scope)nodes_stack.peek()).node.name.add((declarator90!=null?input.toString(declarator90.start,declarator90.stop):null)); 
                      			((scopeNodes_scope)scopeNodes_stack.peek()).node.variableMapPut((declarator90!=null?input.toString(declarator90.start,declarator90.stop):null),((nodes_scope)nodes_stack.peek()).node);
                      			if ((constant_expression92!=null?input.toString(constant_expression92.start,constant_expression92.stop):null) != null) {
                      				((nodes_scope)nodes_stack.peek()).node.constantStatement.get(((nodes_scope)nodes_stack.peek()).node.constantStatement.size()-1).add((constant_expression92!=null?input.toString(constant_expression92.start,constant_expression92.stop):null));
                      			}/*else{
                      				((nodes_scope)nodes_stack.peek()).node.constantStatement.add("UNDEFINED");
                      			}*/
                      			
                      			//((nodes_scope)nodes_stack.peek()).node.constantStatement.add((constant_expression92!=null?input.toString(constant_expression92.start,constant_expression92.stop):null));
                      		
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:671:4: ':' constant_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal94=(Token)match(input,67,FOLLOW_67_in_struct_declarator1342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal94_tree = (CommonTree)adaptor.create(char_literal94);
                    adaptor.addChild(root_0, char_literal94_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_struct_declarator1344);
                    constant_expression95=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression95.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, struct_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declarator"

    public static class enum_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_specifier"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:674:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );
    public final PretCParser.enum_specifier_return enum_specifier() throws RecognitionException {
        PretCParser.enum_specifier_return retval = new PretCParser.enum_specifier_return();
        retval.start = input.LT(1);
        int enum_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal96=null;
        Token char_literal97=null;
        Token char_literal99=null;
        Token string_literal100=null;
        Token IDENTIFIER101=null;
        Token char_literal102=null;
        Token char_literal104=null;
        Token string_literal105=null;
        Token IDENTIFIER106=null;
        PretCParser.enumerator_list_return enumerator_list98 = null;

        PretCParser.enumerator_list_return enumerator_list103 = null;


        CommonTree string_literal96_tree=null;
        CommonTree char_literal97_tree=null;
        CommonTree char_literal99_tree=null;
        CommonTree string_literal100_tree=null;
        CommonTree IDENTIFIER101_tree=null;
        CommonTree char_literal102_tree=null;
        CommonTree char_literal104_tree=null;
        CommonTree string_literal105_tree=null;
        CommonTree IDENTIFIER106_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:676:2: ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER )
            int alt33=3;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:676:4: 'enum' '{' enumerator_list '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal96=(Token)match(input,68,FOLLOW_68_in_enum_specifier1363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal96_tree = (CommonTree)adaptor.create(string_literal96);
                    adaptor.addChild(root_0, string_literal96_tree);
                    }
                    char_literal97=(Token)match(input,63,FOLLOW_63_in_enum_specifier1365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal97_tree = (CommonTree)adaptor.create(char_literal97);
                    adaptor.addChild(root_0, char_literal97_tree);
                    }
                    pushFollow(FOLLOW_enumerator_list_in_enum_specifier1367);
                    enumerator_list98=enumerator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator_list98.getTree());
                    char_literal99=(Token)match(input,64,FOLLOW_64_in_enum_specifier1369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal99_tree = (CommonTree)adaptor.create(char_literal99);
                    adaptor.addChild(root_0, char_literal99_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:677:4: 'enum' IDENTIFIER '{' enumerator_list '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal100=(Token)match(input,68,FOLLOW_68_in_enum_specifier1375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal100_tree = (CommonTree)adaptor.create(string_literal100);
                    adaptor.addChild(root_0, string_literal100_tree);
                    }
                    IDENTIFIER101=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_specifier1377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER101_tree = (CommonTree)adaptor.create(IDENTIFIER101);
                    adaptor.addChild(root_0, IDENTIFIER101_tree);
                    }
                    char_literal102=(Token)match(input,63,FOLLOW_63_in_enum_specifier1379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal102_tree = (CommonTree)adaptor.create(char_literal102);
                    adaptor.addChild(root_0, char_literal102_tree);
                    }
                    pushFollow(FOLLOW_enumerator_list_in_enum_specifier1381);
                    enumerator_list103=enumerator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator_list103.getTree());
                    char_literal104=(Token)match(input,64,FOLLOW_64_in_enum_specifier1383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal104_tree = (CommonTree)adaptor.create(char_literal104);
                    adaptor.addChild(root_0, char_literal104_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:678:4: 'enum' IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal105=(Token)match(input,68,FOLLOW_68_in_enum_specifier1388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal105_tree = (CommonTree)adaptor.create(string_literal105);
                    adaptor.addChild(root_0, string_literal105_tree);
                    }
                    IDENTIFIER106=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_specifier1390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER106_tree = (CommonTree)adaptor.create(IDENTIFIER106);
                    adaptor.addChild(root_0, IDENTIFIER106_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, enum_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_specifier"

    public static class enumerator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumerator_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:681:1: enumerator_list : enumerator ( ',' enumerator )* ;
    public final PretCParser.enumerator_list_return enumerator_list() throws RecognitionException {
        PretCParser.enumerator_list_return retval = new PretCParser.enumerator_list_return();
        retval.start = input.LT(1);
        int enumerator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal108=null;
        PretCParser.enumerator_return enumerator107 = null;

        PretCParser.enumerator_return enumerator109 = null;


        CommonTree char_literal108_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:682:2: ( enumerator ( ',' enumerator )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:682:4: enumerator ( ',' enumerator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumerator_in_enumerator_list1401);
            enumerator107=enumerator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator107.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:682:15: ( ',' enumerator )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==43) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:682:16: ',' enumerator
            	    {
            	    char_literal108=(Token)match(input,43,FOLLOW_43_in_enumerator_list1404); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal108_tree = (CommonTree)adaptor.create(char_literal108);
            	    adaptor.addChild(root_0, char_literal108_tree);
            	    }
            	    pushFollow(FOLLOW_enumerator_in_enumerator_list1406);
            	    enumerator109=enumerator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumerator109.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, enumerator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumerator_list"

    public static class enumerator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumerator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:685:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
    public final PretCParser.enumerator_return enumerator() throws RecognitionException {
        PretCParser.enumerator_return retval = new PretCParser.enumerator_return();
        retval.start = input.LT(1);
        int enumerator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER110=null;
        Token char_literal111=null;
        PretCParser.constant_expression_return constant_expression112 = null;


        CommonTree IDENTIFIER110_tree=null;
        CommonTree char_literal111_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:686:2: ( IDENTIFIER ( '=' constant_expression )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:686:4: IDENTIFIER ( '=' constant_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENTIFIER110=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumerator1419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER110_tree = (CommonTree)adaptor.create(IDENTIFIER110);
            adaptor.addChild(root_0, IDENTIFIER110_tree);
            }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:686:15: ( '=' constant_expression )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==42) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:686:16: '=' constant_expression
                    {
                    char_literal111=(Token)match(input,42,FOLLOW_42_in_enumerator1422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal111_tree = (CommonTree)adaptor.create(char_literal111);
                    adaptor.addChild(root_0, char_literal111_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_enumerator1424);
                    constant_expression112=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression112.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, enumerator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumerator"

    public static class type_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_qualifier"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:689:1: type_qualifier : ( 'const' | 'volatile' );
    public final PretCParser.type_qualifier_return type_qualifier() throws RecognitionException {
        PretCParser.type_qualifier_return retval = new PretCParser.type_qualifier_return();
        retval.start = input.LT(1);
        int type_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set113=null;

        CommonTree set113_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:690:2: ( 'const' | 'volatile' )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set113=(Token)input.LT(1);
            if ( (input.LA(1)>=69 && input.LA(1)<=70) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set113));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, type_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_qualifier"

    public static class declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:694:1: declarator : ( ( pointer )? direct_declarator | pointer );
    public final PretCParser.declarator_return declarator() throws RecognitionException {
        PretCParser.declarator_return retval = new PretCParser.declarator_return();
        retval.start = input.LT(1);
        int declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.pointer_return pointer114 = null;

        PretCParser.direct_declarator_return direct_declarator115 = null;

        PretCParser.pointer_return pointer116 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:2: ( ( pointer )? direct_declarator | pointer )
            int alt37=2;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:4: ( pointer )? direct_declarator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:4: ( pointer )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==73) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: pointer
                            {
                            pushFollow(FOLLOW_pointer_in_declarator1453);
                            pointer114=pointer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer114.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_direct_declarator_in_declarator1456);
                    direct_declarator115=direct_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_declarator115.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:696:4: pointer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pointer_in_declarator1461);
                    pointer116=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declarator"

    public static class direct_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "direct_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:699:1: direct_declarator : ( IDENTIFIER ( declarator_suffix )* -> ( declarator_suffix )* | '(' declarator ')' ( declarator_suffix )* -> '(' declarator ')' ( declarator_suffix )* );
    public final PretCParser.direct_declarator_return direct_declarator() throws RecognitionException {
        PretCParser.direct_declarator_return retval = new PretCParser.direct_declarator_return();
        retval.start = input.LT(1);
        int direct_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER117=null;
        Token char_literal119=null;
        Token char_literal121=null;
        PretCParser.declarator_suffix_return declarator_suffix118 = null;

        PretCParser.declarator_return declarator120 = null;

        PretCParser.declarator_suffix_return declarator_suffix122 = null;


        CommonTree IDENTIFIER117_tree=null;
        CommonTree char_literal119_tree=null;
        CommonTree char_literal121_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_declarator_suffix=new RewriteRuleSubtreeStream(adaptor,"rule declarator_suffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:700:2: ( IDENTIFIER ( declarator_suffix )* -> ( declarator_suffix )* | '(' declarator ')' ( declarator_suffix )* -> '(' declarator ')' ( declarator_suffix )* )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==IDENTIFIER) ) {
                alt40=1;
            }
            else if ( (LA40_0==47) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:700:7: IDENTIFIER ( declarator_suffix )*
                    {
                    IDENTIFIER117=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_direct_declarator1475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER117);

                    if ( state.backtracking==0 ) {

                      			if (is_stack.size()>0&&((is_scope)is_stack.peek()).typeDef) {
                      				((Symbols_scope)Symbols_stack.peek()).types.add((IDENTIFIER117!=null?IDENTIFIER117.getText():null));
                      				((scopeNodes_scope)scopeNodes_stack.peek()).node.listOfTypeDef.put((IDENTIFIER117!=null?IDENTIFIER117.getText():null),((nodes_scope)nodes_stack.peek()).node);
                      				System.out.println("define type "+(IDENTIFIER117!=null?IDENTIFIER117.getText():null));
                      			}
                      			
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:708:4: ( declarator_suffix )*
                    loop38:
                    do {
                        int alt38=2;
                        alt38 = dfa38.predict(input);
                        switch (alt38) {
                    	case 1 :
                    	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declarator_suffix
                    	    {
                    	    pushFollow(FOLLOW_declarator_suffix_in_direct_declarator1486);
                    	    declarator_suffix118=declarator_suffix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declarator_suffix.add(declarator_suffix118.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: declarator_suffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 709:4: -> ( declarator_suffix )*
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:709:7: ( declarator_suffix )*
                        while ( stream_declarator_suffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_declarator_suffix.nextTree());

                        }
                        stream_declarator_suffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:711:3: '(' declarator ')' ( declarator_suffix )*
                    {
                    char_literal119=(Token)match(input,47,FOLLOW_47_in_direct_declarator1505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal119);

                    pushFollow(FOLLOW_declarator_in_direct_declarator1507);
                    declarator120=declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declarator.add(declarator120.getTree());
                    char_literal121=(Token)match(input,49,FOLLOW_49_in_direct_declarator1509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal121);

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:711:22: ( declarator_suffix )*
                    loop39:
                    do {
                        int alt39=2;
                        alt39 = dfa39.predict(input);
                        switch (alt39) {
                    	case 1 :
                    	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declarator_suffix
                    	    {
                    	    pushFollow(FOLLOW_declarator_suffix_in_direct_declarator1511);
                    	    declarator_suffix122=declarator_suffix();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declarator_suffix.add(declarator_suffix122.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: 47, declarator_suffix, 49, declarator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 711:41: -> '(' declarator ')' ( declarator_suffix )*
                    {
                        adaptor.addChild(root_0, stream_47.nextNode());
                        adaptor.addChild(root_0, stream_declarator.nextTree());
                        adaptor.addChild(root_0, stream_49.nextNode());
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:711:63: ( declarator_suffix )*
                        while ( stream_declarator_suffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_declarator_suffix.nextTree());

                        }
                        stream_declarator_suffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, direct_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "direct_declarator"

    public static class declarator_suffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarator_suffix"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:714:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
    public final PretCParser.declarator_suffix_return declarator_suffix() throws RecognitionException {
        PretCParser.declarator_suffix_return retval = new PretCParser.declarator_suffix_return();
        retval.start = input.LT(1);
        int declarator_suffix_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal123=null;
        Token char_literal125=null;
        Token char_literal126=null;
        Token char_literal127=null;
        Token char_literal128=null;
        Token char_literal130=null;
        Token char_literal131=null;
        Token char_literal133=null;
        Token char_literal134=null;
        Token char_literal135=null;
        PretCParser.constant_expression_return constant_expression124 = null;

        PretCParser.parameter_type_list_return parameter_type_list129 = null;

        PretCParser.identifier_list_return identifier_list132 = null;


        CommonTree char_literal123_tree=null;
        CommonTree char_literal125_tree=null;
        CommonTree char_literal126_tree=null;
        CommonTree char_literal127_tree=null;
        CommonTree char_literal128_tree=null;
        CommonTree char_literal130_tree=null;
        CommonTree char_literal131_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree char_literal134_tree=null;
        CommonTree char_literal135_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:715:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
            int alt41=5;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:715:6: '[' constant_expression ']'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal123=(Token)match(input,71,FOLLOW_71_in_declarator_suffix1536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal123_tree = (CommonTree)adaptor.create(char_literal123);
                    adaptor.addChild(root_0, char_literal123_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_declarator_suffix1538);
                    constant_expression124=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression124.getTree());
                    char_literal125=(Token)match(input,72,FOLLOW_72_in_declarator_suffix1540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal125_tree = (CommonTree)adaptor.create(char_literal125);
                    adaptor.addChild(root_0, char_literal125_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:716:9: '[' ']'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal126=(Token)match(input,71,FOLLOW_71_in_declarator_suffix1550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal126_tree = (CommonTree)adaptor.create(char_literal126);
                    adaptor.addChild(root_0, char_literal126_tree);
                    }
                    char_literal127=(Token)match(input,72,FOLLOW_72_in_declarator_suffix1552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal127_tree = (CommonTree)adaptor.create(char_literal127);
                    adaptor.addChild(root_0, char_literal127_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:717:9: '(' parameter_type_list ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal128=(Token)match(input,47,FOLLOW_47_in_declarator_suffix1562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal128_tree = (CommonTree)adaptor.create(char_literal128);
                    adaptor.addChild(root_0, char_literal128_tree);
                    }
                    pushFollow(FOLLOW_parameter_type_list_in_declarator_suffix1564);
                    parameter_type_list129=parameter_type_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type_list129.getTree());
                    char_literal130=(Token)match(input,49,FOLLOW_49_in_declarator_suffix1566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal130_tree = (CommonTree)adaptor.create(char_literal130);
                    adaptor.addChild(root_0, char_literal130_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:718:9: '(' identifier_list ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal131=(Token)match(input,47,FOLLOW_47_in_declarator_suffix1576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal131_tree = (CommonTree)adaptor.create(char_literal131);
                    adaptor.addChild(root_0, char_literal131_tree);
                    }
                    pushFollow(FOLLOW_identifier_list_in_declarator_suffix1578);
                    identifier_list132=identifier_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier_list132.getTree());
                    char_literal133=(Token)match(input,49,FOLLOW_49_in_declarator_suffix1580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal133_tree = (CommonTree)adaptor.create(char_literal133);
                    adaptor.addChild(root_0, char_literal133_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:719:9: '(' ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal134=(Token)match(input,47,FOLLOW_47_in_declarator_suffix1590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = (CommonTree)adaptor.create(char_literal134);
                    adaptor.addChild(root_0, char_literal134_tree);
                    }
                    char_literal135=(Token)match(input,49,FOLLOW_49_in_declarator_suffix1592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal135_tree = (CommonTree)adaptor.create(char_literal135);
                    adaptor.addChild(root_0, char_literal135_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, declarator_suffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declarator_suffix"

    public static class pointer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pointer"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:722:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );
    public final PretCParser.pointer_return pointer() throws RecognitionException {
        PretCParser.pointer_return retval = new PretCParser.pointer_return();
        retval.start = input.LT(1);
        int pointer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal136=null;
        Token char_literal139=null;
        Token char_literal141=null;
        PretCParser.type_qualifier_return type_qualifier137 = null;

        PretCParser.pointer_return pointer138 = null;

        PretCParser.pointer_return pointer140 = null;


        CommonTree char_literal136_tree=null;
        CommonTree char_literal139_tree=null;
        CommonTree char_literal141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:2: ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' )
            int alt44=3;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:4: '*' ( type_qualifier )+ ( pointer )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal136=(Token)match(input,73,FOLLOW_73_in_pointer1603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal136_tree = (CommonTree)adaptor.create(char_literal136);
                    adaptor.addChild(root_0, char_literal136_tree);
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:8: ( type_qualifier )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        alt42 = dfa42.predict(input);
                        switch (alt42) {
                    	case 1 :
                    	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: type_qualifier
                    	    {
                    	    pushFollow(FOLLOW_type_qualifier_in_pointer1605);
                    	    type_qualifier137=type_qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_qualifier137.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:24: ( pointer )?
                    int alt43=2;
                    alt43 = dfa43.predict(input);
                    switch (alt43) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: pointer
                            {
                            pushFollow(FOLLOW_pointer_in_pointer1608);
                            pointer138=pointer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer138.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:724:4: '*' pointer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal139=(Token)match(input,73,FOLLOW_73_in_pointer1614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal139_tree = (CommonTree)adaptor.create(char_literal139);
                    adaptor.addChild(root_0, char_literal139_tree);
                    }
                    pushFollow(FOLLOW_pointer_in_pointer1616);
                    pointer140=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer140.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:725:4: '*'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal141=(Token)match(input,73,FOLLOW_73_in_pointer1621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal141_tree = (CommonTree)adaptor.create(char_literal141);
                    adaptor.addChild(root_0, char_literal141_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, pointer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pointer"

    public static class parameter_type_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:728:1: parameter_type_list : parameter_list ( ',' '...' )? ;
    public final PretCParser.parameter_type_list_return parameter_type_list() throws RecognitionException {
        PretCParser.parameter_type_list_return retval = new PretCParser.parameter_type_list_return();
        retval.start = input.LT(1);
        int parameter_type_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal143=null;
        Token string_literal144=null;
        PretCParser.parameter_list_return parameter_list142 = null;


        CommonTree char_literal143_tree=null;
        CommonTree string_literal144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:729:2: ( parameter_list ( ',' '...' )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:729:4: parameter_list ( ',' '...' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_parameter_list_in_parameter_type_list1632);
            parameter_list142=parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_list142.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:729:19: ( ',' '...' )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==43) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:729:20: ',' '...'
                    {
                    char_literal143=(Token)match(input,43,FOLLOW_43_in_parameter_type_list1635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal143_tree = (CommonTree)adaptor.create(char_literal143);
                    adaptor.addChild(root_0, char_literal143_tree);
                    }
                    string_literal144=(Token)match(input,74,FOLLOW_74_in_parameter_type_list1637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal144_tree = (CommonTree)adaptor.create(string_literal144);
                    adaptor.addChild(root_0, string_literal144_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, parameter_type_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type_list"

    public static class parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:732:1: parameter_list : p1= parameter_declaration ( ',' p2= parameter_declaration )* ;
    public final PretCParser.parameter_list_return parameter_list() throws RecognitionException {
        PretCParser.parameter_list_return retval = new PretCParser.parameter_list_return();
        retval.start = input.LT(1);
        int parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal145=null;
        PretCParser.parameter_declaration_return p1 = null;

        PretCParser.parameter_declaration_return p2 = null;


        CommonTree char_literal145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:733:2: (p1= parameter_declaration ( ',' p2= parameter_declaration )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:733:4: p1= parameter_declaration ( ',' p2= parameter_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_parameter_declaration_in_parameter_list1653);
            p1=parameter_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p1.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:737:3: ( ',' p2= parameter_declaration )*
            loop46:
            do {
                int alt46=2;
                alt46 = dfa46.predict(input);
                switch (alt46) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:737:4: ',' p2= parameter_declaration
            	    {
            	    char_literal145=(Token)match(input,43,FOLLOW_43_in_parameter_list1663); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal145_tree = (CommonTree)adaptor.create(char_literal145);
            	    adaptor.addChild(root_0, char_literal145_tree);
            	    }
            	    pushFollow(FOLLOW_parameter_declaration_in_parameter_list1667);
            	    p2=parameter_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p2.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_list"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:745:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ( range_declarator )? -> declaration_specifiers ( declarator )* ( abstract_declarator )* ;
    public final PretCParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PretCParser.parameter_declaration_return retval = new PretCParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.declaration_specifiers_return declaration_specifiers146 = null;

        PretCParser.declarator_return declarator147 = null;

        PretCParser.abstract_declarator_return abstract_declarator148 = null;

        PretCParser.range_declarator_return range_declarator149 = null;


        RewriteRuleSubtreeStream stream_declaration_specifiers=new RewriteRuleSubtreeStream(adaptor,"rule declaration_specifiers");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_abstract_declarator=new RewriteRuleSubtreeStream(adaptor,"rule abstract_declarator");
        RewriteRuleSubtreeStream stream_range_declarator=new RewriteRuleSubtreeStream(adaptor,"rule range_declarator");

        	//boolean hasDecl = false;
        	addtype = true;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:753:2: ( declaration_specifiers ( declarator | abstract_declarator )* ( range_declarator )? -> declaration_specifiers ( declarator )* ( abstract_declarator )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:753:4: declaration_specifiers ( declarator | abstract_declarator )* ( range_declarator )?
            {
            if ( state.backtracking==0 ) {

              		if (is_stack.size()>0&&((is_scope)is_stack.peek()).declaration) {
              			addtype = false;	    		
              		}
              	  
            }
            pushFollow(FOLLOW_declaration_specifiers_in_parameter_declaration1708);
            declaration_specifiers146=declaration_specifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declaration_specifiers.add(declaration_specifiers146.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:760:5: ( declarator | abstract_declarator )*
            loop47:
            do {
                int alt47=3;
                alt47 = dfa47.predict(input);
                switch (alt47) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:760:6: declarator
            	    {
            	    pushFollow(FOLLOW_declarator_in_parameter_declaration1719);
            	    declarator147=declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declarator.add(declarator147.getTree());
            	    if ( state.backtracking==0 ) {

            	      					    		if (is_stack.size()>0&&((is_scope)is_stack.peek()).declaration) {
            	      					    		
            	      					    		}else{
            	          	    
            	      								((nodes_scope)nodes_stack.peek()).node.functionParameter.add((declarator147!=null?input.toString(declarator147.start,declarator147.stop):null));
            	      								((scopeNodes_scope)scopeNodes_stack.peek()).node.variableMapPut((declarator147!=null?input.toString(declarator147.start,declarator147.stop):null),((nodes_scope)nodes_stack.peek()).node);
            	      							}
            	      							//hasDecl = true;
            	      						
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:770:6: abstract_declarator
            	    {
            	    pushFollow(FOLLOW_abstract_declarator_in_parameter_declaration1729);
            	    abstract_declarator148=abstract_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_abstract_declarator.add(abstract_declarator148.getTree());
            	    if ( state.backtracking==0 ) {
            	      System.out.println("\nAbstractor not handled contact developer\n");
            	      						
            	      						
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:775:5: ( range_declarator )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==44) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: range_declarator
                    {
                    pushFollow(FOLLOW_range_declarator_in_parameter_declaration1750);
                    range_declarator149=range_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_range_declarator.add(range_declarator149.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              							/*if (hasDecl == false) {
              								((nodes_scope)nodes_stack.peek()).node.functionParameter.add("");
              								
              							}*/
              						
            }


            // AST REWRITE
            // elements: abstract_declarator, declaration_specifiers, declarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 783:5: -> declaration_specifiers ( declarator )* ( abstract_declarator )*
            {
                adaptor.addChild(root_0, stream_declaration_specifiers.nextTree());
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:783:31: ( declarator )*
                while ( stream_declarator.hasNext() ) {
                    adaptor.addChild(root_0, stream_declarator.nextTree());

                }
                stream_declarator.reset();
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:783:43: ( abstract_declarator )*
                while ( stream_abstract_declarator.hasNext() ) {
                    adaptor.addChild(root_0, stream_abstract_declarator.nextTree());

                }
                stream_abstract_declarator.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	addtype = true;

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class identifier_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:787:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
    public final PretCParser.identifier_list_return identifier_list() throws RecognitionException {
        PretCParser.identifier_list_return retval = new PretCParser.identifier_list_return();
        retval.start = input.LT(1);
        int identifier_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER150=null;
        Token char_literal151=null;
        Token IDENTIFIER152=null;

        CommonTree IDENTIFIER150_tree=null;
        CommonTree char_literal151_tree=null;
        CommonTree IDENTIFIER152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:788:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:788:4: IDENTIFIER ( ',' IDENTIFIER )*
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENTIFIER150=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier_list1795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER150_tree = (CommonTree)adaptor.create(IDENTIFIER150);
            adaptor.addChild(root_0, IDENTIFIER150_tree);
            }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:788:15: ( ',' IDENTIFIER )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==43) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:788:16: ',' IDENTIFIER
            	    {
            	    char_literal151=(Token)match(input,43,FOLLOW_43_in_identifier_list1798); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal151_tree = (CommonTree)adaptor.create(char_literal151);
            	    adaptor.addChild(root_0, char_literal151_tree);
            	    }
            	    IDENTIFIER152=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier_list1800); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IDENTIFIER152_tree = (CommonTree)adaptor.create(IDENTIFIER152);
            	    adaptor.addChild(root_0, IDENTIFIER152_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, identifier_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier_list"

    public static class type_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_name"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:791:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
    public final PretCParser.type_name_return type_name() throws RecognitionException {
        PretCParser.type_name_return retval = new PretCParser.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.specifier_qualifier_list_return specifier_qualifier_list153 = null;

        PretCParser.abstract_declarator_return abstract_declarator154 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:792:2: ( specifier_qualifier_list ( abstract_declarator )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:792:4: specifier_qualifier_list ( abstract_declarator )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_specifier_qualifier_list_in_type_name1813);
            specifier_qualifier_list153=specifier_qualifier_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specifier_qualifier_list153.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:792:29: ( abstract_declarator )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==47||LA50_0==71||LA50_0==73) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: abstract_declarator
                    {
                    pushFollow(FOLLOW_abstract_declarator_in_type_name1815);
                    abstract_declarator154=abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator154.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public static class abstract_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:795:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
    public final PretCParser.abstract_declarator_return abstract_declarator() throws RecognitionException {
        PretCParser.abstract_declarator_return retval = new PretCParser.abstract_declarator_return();
        retval.start = input.LT(1);
        int abstract_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.pointer_return pointer155 = null;

        PretCParser.direct_abstract_declarator_return direct_abstract_declarator156 = null;

        PretCParser.direct_abstract_declarator_return direct_abstract_declarator157 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:796:2: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==73) ) {
                alt52=1;
            }
            else if ( (LA52_0==47||LA52_0==71) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:796:4: pointer ( direct_abstract_declarator )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pointer_in_abstract_declarator1827);
                    pointer155=pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer155.getTree());
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:796:12: ( direct_abstract_declarator )?
                    int alt51=2;
                    alt51 = dfa51.predict(input);
                    switch (alt51) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: direct_abstract_declarator
                            {
                            pushFollow(FOLLOW_direct_abstract_declarator_in_abstract_declarator1829);
                            direct_abstract_declarator156=direct_abstract_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_abstract_declarator156.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:797:4: direct_abstract_declarator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_direct_abstract_declarator_in_abstract_declarator1835);
                    direct_abstract_declarator157=direct_abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, direct_abstract_declarator157.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, abstract_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_declarator"

    public static class direct_abstract_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "direct_abstract_declarator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:800:1: direct_abstract_declarator : ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
    public final PretCParser.direct_abstract_declarator_return direct_abstract_declarator() throws RecognitionException {
        PretCParser.direct_abstract_declarator_return retval = new PretCParser.direct_abstract_declarator_return();
        retval.start = input.LT(1);
        int direct_abstract_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal158=null;
        Token char_literal160=null;
        PretCParser.abstract_declarator_return abstract_declarator159 = null;

        PretCParser.abstract_declarator_suffix_return abstract_declarator_suffix161 = null;

        PretCParser.abstract_declarator_suffix_return abstract_declarator_suffix162 = null;


        CommonTree char_literal158_tree=null;
        CommonTree char_literal160_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:2: ( ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix )
            int alt53=2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:6: '(' abstract_declarator ')'
                    {
                    char_literal158=(Token)match(input,47,FOLLOW_47_in_direct_abstract_declarator1848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (CommonTree)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }
                    pushFollow(FOLLOW_abstract_declarator_in_direct_abstract_declarator1850);
                    abstract_declarator159=abstract_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator159.getTree());
                    char_literal160=(Token)match(input,49,FOLLOW_49_in_direct_abstract_declarator1852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal160_tree = (CommonTree)adaptor.create(char_literal160);
                    adaptor.addChild(root_0, char_literal160_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:36: abstract_declarator_suffix
                    {
                    pushFollow(FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1856);
                    abstract_declarator_suffix161=abstract_declarator_suffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator_suffix161.getTree());

                    }
                    break;

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:65: ( abstract_declarator_suffix )*
            loop54:
            do {
                int alt54=2;
                alt54 = dfa54.predict(input);
                switch (alt54) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: abstract_declarator_suffix
            	    {
            	    pushFollow(FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1860);
            	    abstract_declarator_suffix162=abstract_declarator_suffix();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_declarator_suffix162.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, direct_abstract_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "direct_abstract_declarator"

    public static class abstract_declarator_suffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_declarator_suffix"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:804:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );
    public final PretCParser.abstract_declarator_suffix_return abstract_declarator_suffix() throws RecognitionException {
        PretCParser.abstract_declarator_suffix_return retval = new PretCParser.abstract_declarator_suffix_return();
        retval.start = input.LT(1);
        int abstract_declarator_suffix_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal163=null;
        Token char_literal164=null;
        Token char_literal165=null;
        Token char_literal167=null;
        Token char_literal168=null;
        Token char_literal169=null;
        Token char_literal170=null;
        Token char_literal172=null;
        PretCParser.constant_expression_return constant_expression166 = null;

        PretCParser.parameter_type_list_return parameter_type_list171 = null;


        CommonTree char_literal163_tree=null;
        CommonTree char_literal164_tree=null;
        CommonTree char_literal165_tree=null;
        CommonTree char_literal167_tree=null;
        CommonTree char_literal168_tree=null;
        CommonTree char_literal169_tree=null;
        CommonTree char_literal170_tree=null;
        CommonTree char_literal172_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:805:2: ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' )
            int alt55=4;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:805:4: '[' ']'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal163=(Token)match(input,71,FOLLOW_71_in_abstract_declarator_suffix1872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal163_tree = (CommonTree)adaptor.create(char_literal163);
                    adaptor.addChild(root_0, char_literal163_tree);
                    }
                    char_literal164=(Token)match(input,72,FOLLOW_72_in_abstract_declarator_suffix1874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal164_tree = (CommonTree)adaptor.create(char_literal164);
                    adaptor.addChild(root_0, char_literal164_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:806:4: '[' constant_expression ']'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal165=(Token)match(input,71,FOLLOW_71_in_abstract_declarator_suffix1879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal165_tree = (CommonTree)adaptor.create(char_literal165);
                    adaptor.addChild(root_0, char_literal165_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_abstract_declarator_suffix1881);
                    constant_expression166=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression166.getTree());
                    char_literal167=(Token)match(input,72,FOLLOW_72_in_abstract_declarator_suffix1883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal167_tree = (CommonTree)adaptor.create(char_literal167);
                    adaptor.addChild(root_0, char_literal167_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:807:4: '(' ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal168=(Token)match(input,47,FOLLOW_47_in_abstract_declarator_suffix1888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal168_tree = (CommonTree)adaptor.create(char_literal168);
                    adaptor.addChild(root_0, char_literal168_tree);
                    }
                    char_literal169=(Token)match(input,49,FOLLOW_49_in_abstract_declarator_suffix1890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal169_tree = (CommonTree)adaptor.create(char_literal169);
                    adaptor.addChild(root_0, char_literal169_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:808:4: '(' parameter_type_list ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal170=(Token)match(input,47,FOLLOW_47_in_abstract_declarator_suffix1895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal170_tree = (CommonTree)adaptor.create(char_literal170);
                    adaptor.addChild(root_0, char_literal170_tree);
                    }
                    pushFollow(FOLLOW_parameter_type_list_in_abstract_declarator_suffix1897);
                    parameter_type_list171=parameter_type_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type_list171.getTree());
                    char_literal172=(Token)match(input,49,FOLLOW_49_in_abstract_declarator_suffix1899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal172_tree = (CommonTree)adaptor.create(char_literal172);
                    adaptor.addChild(root_0, char_literal172_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, abstract_declarator_suffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_declarator_suffix"

    public static class initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initializer"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:811:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
    public final PretCParser.initializer_return initializer() throws RecognitionException {
        PretCParser.initializer_return retval = new PretCParser.initializer_return();
        retval.start = input.LT(1);
        int initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal174=null;
        Token char_literal176=null;
        Token char_literal177=null;
        PretCParser.assignment_expression_return assignment_expression173 = null;

        PretCParser.initializer_list_return initializer_list175 = null;


        CommonTree char_literal174_tree=null;
        CommonTree char_literal176_tree=null;
        CommonTree char_literal177_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:812:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( ((LA57_0>=DECIMAL_LITERAL && LA57_0<=IDENTIFIER)||(LA57_0>=HEX_LITERAL && LA57_0<=FLOATING_POINT_LITERAL)||LA57_0==47||LA57_0==73||(LA57_0>=75 && LA57_0<=76)||(LA57_0>=79 && LA57_0<=81)||(LA57_0>=84 && LA57_0<=86)) ) {
                alt57=1;
            }
            else if ( (LA57_0==63) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:812:4: assignment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_assignment_expression_in_initializer1911);
                    assignment_expression173=assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression173.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:813:4: '{' initializer_list ( ',' )? '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal174=(Token)match(input,63,FOLLOW_63_in_initializer1916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal174_tree = (CommonTree)adaptor.create(char_literal174);
                    adaptor.addChild(root_0, char_literal174_tree);
                    }
                    pushFollow(FOLLOW_initializer_list_in_initializer1918);
                    initializer_list175=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_list175.getTree());
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:813:25: ( ',' )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==43) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: ','
                            {
                            char_literal176=(Token)match(input,43,FOLLOW_43_in_initializer1920); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal176_tree = (CommonTree)adaptor.create(char_literal176);
                            adaptor.addChild(root_0, char_literal176_tree);
                            }

                            }
                            break;

                    }

                    char_literal177=(Token)match(input,64,FOLLOW_64_in_initializer1923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal177_tree = (CommonTree)adaptor.create(char_literal177);
                    adaptor.addChild(root_0, char_literal177_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initializer"

    public static class initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initializer_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:816:1: initializer_list : initializer ( ',' initializer )* ;
    public final PretCParser.initializer_list_return initializer_list() throws RecognitionException {
        PretCParser.initializer_list_return retval = new PretCParser.initializer_list_return();
        retval.start = input.LT(1);
        int initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal179=null;
        PretCParser.initializer_return initializer178 = null;

        PretCParser.initializer_return initializer180 = null;


        CommonTree char_literal179_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:817:2: ( initializer ( ',' initializer )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:817:4: initializer ( ',' initializer )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_initializer_in_initializer_list1934);
            initializer178=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer178.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:817:16: ( ',' initializer )*
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:817:17: ',' initializer
            	    {
            	    char_literal179=(Token)match(input,43,FOLLOW_43_in_initializer_list1937); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal179_tree = (CommonTree)adaptor.create(char_literal179);
            	    adaptor.addChild(root_0, char_literal179_tree);
            	    }
            	    pushFollow(FOLLOW_initializer_in_initializer_list1939);
            	    initializer180=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer180.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initializer_list"

    public static class argument_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_expression_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:822:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
    public final PretCParser.argument_expression_list_return argument_expression_list() throws RecognitionException {
        PretCParser.argument_expression_list_return retval = new PretCParser.argument_expression_list_return();
        retval.start = input.LT(1);
        int argument_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal182=null;
        PretCParser.assignment_expression_return assignment_expression181 = null;

        PretCParser.assignment_expression_return assignment_expression183 = null;


        CommonTree char_literal182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:823:2: ( assignment_expression ( ',' assignment_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:823:6: assignment_expression ( ',' assignment_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_assignment_expression_in_argument_expression_list1956);
            assignment_expression181=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression181.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:823:28: ( ',' assignment_expression )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==43) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:823:29: ',' assignment_expression
            	    {
            	    char_literal182=(Token)match(input,43,FOLLOW_43_in_argument_expression_list1959); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal182_tree = (CommonTree)adaptor.create(char_literal182);
            	    adaptor.addChild(root_0, char_literal182_tree);
            	    }
            	    pushFollow(FOLLOW_assignment_expression_in_argument_expression_list1961);
            	    assignment_expression183=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression183.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, argument_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_expression_list"

    public static class additive_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additive_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:826:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
    public final PretCParser.additive_expression_return additive_expression() throws RecognitionException {
        PretCParser.additive_expression_return retval = new PretCParser.additive_expression_return();
        retval.start = input.LT(1);
        int additive_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal185=null;
        Token char_literal187=null;
        PretCParser.multiplicative_expression_return multiplicative_expression184 = null;

        PretCParser.multiplicative_expression_return multiplicative_expression186 = null;

        PretCParser.multiplicative_expression_return multiplicative_expression188 = null;


        CommonTree char_literal185_tree=null;
        CommonTree char_literal187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:4: ( multiplicative_expression )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:5: multiplicative_expression
            {
            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression1975);
            multiplicative_expression184=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression184.getTree());

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
            loop60:
            do {
                int alt60=3;
                alt60 = dfa60.predict(input);
                switch (alt60) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:33: '+' multiplicative_expression
            	    {
            	    char_literal185=(Token)match(input,75,FOLLOW_75_in_additive_expression1979); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal185_tree = (CommonTree)adaptor.create(char_literal185);
            	    adaptor.addChild(root_0, char_literal185_tree);
            	    }
            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression1981);
            	    multiplicative_expression186=multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression186.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:827:65: '-' multiplicative_expression
            	    {
            	    char_literal187=(Token)match(input,76,FOLLOW_76_in_additive_expression1985); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal187_tree = (CommonTree)adaptor.create(char_literal187);
            	    adaptor.addChild(root_0, char_literal187_tree);
            	    }
            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression1987);
            	    multiplicative_expression188=multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression188.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, additive_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicative_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:830:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
    public final PretCParser.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        PretCParser.multiplicative_expression_return retval = new PretCParser.multiplicative_expression_return();
        retval.start = input.LT(1);
        int multiplicative_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal190=null;
        Token char_literal192=null;
        Token char_literal194=null;
        PretCParser.cast_expression_return cast_expression189 = null;

        PretCParser.cast_expression_return cast_expression191 = null;

        PretCParser.cast_expression_return cast_expression193 = null;

        PretCParser.cast_expression_return cast_expression195 = null;


        CommonTree char_literal190_tree=null;
        CommonTree char_literal192_tree=null;
        CommonTree char_literal194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:4: ( cast_expression )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:5: cast_expression
            {
            pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2001);
            cast_expression189=cast_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression189.getTree());

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
            loop61:
            do {
                int alt61=4;
                alt61 = dfa61.predict(input);
                switch (alt61) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:23: '*' cast_expression
            	    {
            	    char_literal190=(Token)match(input,73,FOLLOW_73_in_multiplicative_expression2005); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal190_tree = (CommonTree)adaptor.create(char_literal190);
            	    adaptor.addChild(root_0, char_literal190_tree);
            	    }
            	    pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2007);
            	    cast_expression191=cast_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression191.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:45: '/' cast_expression
            	    {
            	    char_literal192=(Token)match(input,77,FOLLOW_77_in_multiplicative_expression2011); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal192_tree = (CommonTree)adaptor.create(char_literal192);
            	    adaptor.addChild(root_0, char_literal192_tree);
            	    }
            	    pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2013);
            	    cast_expression193=cast_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression193.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:831:67: '%' cast_expression
            	    {
            	    char_literal194=(Token)match(input,78,FOLLOW_78_in_multiplicative_expression2017); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal194_tree = (CommonTree)adaptor.create(char_literal194);
            	    adaptor.addChild(root_0, char_literal194_tree);
            	    }
            	    pushFollow(FOLLOW_cast_expression_in_multiplicative_expression2019);
            	    cast_expression195=cast_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression195.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, multiplicative_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"

    public static class cast_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cast_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:834:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
    public final PretCParser.cast_expression_return cast_expression() throws RecognitionException {
        PretCParser.cast_expression_return retval = new PretCParser.cast_expression_return();
        retval.start = input.LT(1);
        int cast_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal196=null;
        Token char_literal198=null;
        PretCParser.type_name_return type_name197 = null;

        PretCParser.cast_expression_return cast_expression199 = null;

        PretCParser.unary_expression_return unary_expression200 = null;


        CommonTree char_literal196_tree=null;
        CommonTree char_literal198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:835:2: ( '(' type_name ')' cast_expression | unary_expression )
            int alt62=2;
            alt62 = dfa62.predict(input);
            switch (alt62) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:835:4: '(' type_name ')' cast_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal196=(Token)match(input,47,FOLLOW_47_in_cast_expression2032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal196_tree = (CommonTree)adaptor.create(char_literal196);
                    adaptor.addChild(root_0, char_literal196_tree);
                    }
                    pushFollow(FOLLOW_type_name_in_cast_expression2034);
                    type_name197=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name197.getTree());
                    char_literal198=(Token)match(input,49,FOLLOW_49_in_cast_expression2036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal198_tree = (CommonTree)adaptor.create(char_literal198);
                    adaptor.addChild(root_0, char_literal198_tree);
                    }
                    pushFollow(FOLLOW_cast_expression_in_cast_expression2038);
                    cast_expression199=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression199.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:836:4: unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unary_expression_in_cast_expression2043);
                    unary_expression200=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression200.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, cast_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cast_expression"

    public static class unary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:839:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );
    public final PretCParser.unary_expression_return unary_expression() throws RecognitionException {
        PretCParser.unary_expression_return retval = new PretCParser.unary_expression_return();
        retval.start = input.LT(1);
        int unary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal202=null;
        Token string_literal204=null;
        Token string_literal208=null;
        Token string_literal210=null;
        Token char_literal211=null;
        Token char_literal213=null;
        PretCParser.postfix_expression_return postfix_expression201 = null;

        PretCParser.unary_expression_return unary_expression203 = null;

        PretCParser.unary_expression_return unary_expression205 = null;

        PretCParser.unary_operator_return unary_operator206 = null;

        PretCParser.cast_expression_return cast_expression207 = null;

        PretCParser.unary_expression_return unary_expression209 = null;

        PretCParser.type_name_return type_name212 = null;


        CommonTree string_literal202_tree=null;
        CommonTree string_literal204_tree=null;
        CommonTree string_literal208_tree=null;
        CommonTree string_literal210_tree=null;
        CommonTree char_literal211_tree=null;
        CommonTree char_literal213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:840:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' )
            int alt63=6;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:840:4: postfix_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfix_expression_in_unary_expression2054);
                    postfix_expression201=postfix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_expression201.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:841:4: '++' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal202=(Token)match(input,79,FOLLOW_79_in_unary_expression2059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal202_tree = (CommonTree)adaptor.create(string_literal202);
                    adaptor.addChild(root_0, string_literal202_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2061);
                    unary_expression203=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression203.getTree());
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.assignedVars.add("++"+constantExprTempIdentifier);
                      		
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:845:4: '--' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal204=(Token)match(input,80,FOLLOW_80_in_unary_expression2070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal204_tree = (CommonTree)adaptor.create(string_literal204);
                    adaptor.addChild(root_0, string_literal204_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2072);
                    unary_expression205=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression205.getTree());
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.assignedVars.add("--"+constantExprTempIdentifier);
                      		
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:849:4: unary_operator cast_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unary_operator_in_unary_expression2081);
                    unary_operator206=unary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator206.getTree());
                    pushFollow(FOLLOW_cast_expression_in_unary_expression2083);
                    cast_expression207=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression207.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:850:4: 'sizeof' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal208=(Token)match(input,81,FOLLOW_81_in_unary_expression2088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal208_tree = (CommonTree)adaptor.create(string_literal208);
                    adaptor.addChild(root_0, string_literal208_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression2090);
                    unary_expression209=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression209.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:851:4: 'sizeof' '(' type_name ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal210=(Token)match(input,81,FOLLOW_81_in_unary_expression2095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal210_tree = (CommonTree)adaptor.create(string_literal210);
                    adaptor.addChild(root_0, string_literal210_tree);
                    }
                    char_literal211=(Token)match(input,47,FOLLOW_47_in_unary_expression2097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal211_tree = (CommonTree)adaptor.create(char_literal211);
                    adaptor.addChild(root_0, char_literal211_tree);
                    }
                    pushFollow(FOLLOW_type_name_in_unary_expression2099);
                    type_name212=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name212.getTree());
                    char_literal213=(Token)match(input,49,FOLLOW_49_in_unary_expression2101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal213_tree = (CommonTree)adaptor.create(char_literal213);
                    adaptor.addChild(root_0, char_literal213_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, unary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class postfix_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:854:1: postfix_expression : primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' i1= IDENTIFIER | '->' i2= IDENTIFIER | '++' | '--' )* ;
    public final PretCParser.postfix_expression_return postfix_expression() throws RecognitionException {
        PretCParser.postfix_expression_return retval = new PretCParser.postfix_expression_return();
        retval.start = input.LT(1);
        int postfix_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token char_literal215=null;
        Token char_literal217=null;
        Token char_literal218=null;
        Token char_literal219=null;
        Token char_literal220=null;
        Token char_literal222=null;
        Token char_literal223=null;
        Token string_literal224=null;
        Token string_literal225=null;
        Token string_literal226=null;
        PretCParser.primary_expression_return primary_expression214 = null;

        PretCParser.expression_return expression216 = null;

        PretCParser.argument_expression_list_return argument_expression_list221 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree char_literal215_tree=null;
        CommonTree char_literal217_tree=null;
        CommonTree char_literal218_tree=null;
        CommonTree char_literal219_tree=null;
        CommonTree char_literal220_tree=null;
        CommonTree char_literal222_tree=null;
        CommonTree char_literal223_tree=null;
        CommonTree string_literal224_tree=null;
        CommonTree string_literal225_tree=null;
        CommonTree string_literal226_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:855:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' i1= IDENTIFIER | '->' i2= IDENTIFIER | '++' | '--' )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:855:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' i1= IDENTIFIER | '->' i2= IDENTIFIER | '++' | '--' )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_primary_expression_in_postfix_expression2114);
            primary_expression214=primary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression214.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:856:9: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' i1= IDENTIFIER | '->' i2= IDENTIFIER | '++' | '--' )*
            loop64:
            do {
                int alt64=8;
                alt64 = dfa64.predict(input);
                switch (alt64) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:856:13: '[' expression ']'
            	    {
            	    char_literal215=(Token)match(input,71,FOLLOW_71_in_postfix_expression2128); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal215_tree = (CommonTree)adaptor.create(char_literal215);
            	    adaptor.addChild(root_0, char_literal215_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_postfix_expression2130);
            	    expression216=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression216.getTree());
            	    char_literal217=(Token)match(input,72,FOLLOW_72_in_postfix_expression2132); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal217_tree = (CommonTree)adaptor.create(char_literal217);
            	    adaptor.addChild(root_0, char_literal217_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:857:13: '(' ')'
            	    {
            	    char_literal218=(Token)match(input,47,FOLLOW_47_in_postfix_expression2146); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal218_tree = (CommonTree)adaptor.create(char_literal218);
            	    adaptor.addChild(root_0, char_literal218_tree);
            	    }
            	    char_literal219=(Token)match(input,49,FOLLOW_49_in_postfix_expression2148); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal219_tree = (CommonTree)adaptor.create(char_literal219);
            	    adaptor.addChild(root_0, char_literal219_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:858:13: '(' argument_expression_list ')'
            	    {
            	    char_literal220=(Token)match(input,47,FOLLOW_47_in_postfix_expression2162); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal220_tree = (CommonTree)adaptor.create(char_literal220);
            	    adaptor.addChild(root_0, char_literal220_tree);
            	    }
            	    pushFollow(FOLLOW_argument_expression_list_in_postfix_expression2164);
            	    argument_expression_list221=argument_expression_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_expression_list221.getTree());
            	    char_literal222=(Token)match(input,49,FOLLOW_49_in_postfix_expression2166); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal222_tree = (CommonTree)adaptor.create(char_literal222);
            	    adaptor.addChild(root_0, char_literal222_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:859:13: '.' i1= IDENTIFIER
            	    {
            	    char_literal223=(Token)match(input,82,FOLLOW_82_in_postfix_expression2180); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal223_tree = (CommonTree)adaptor.create(char_literal223);
            	    adaptor.addChild(root_0, char_literal223_tree);
            	    }
            	    i1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_postfix_expression2184); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i1_tree = (CommonTree)adaptor.create(i1);
            	    adaptor.addChild(root_0, i1_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      constantExprTempIdentifier+="."+(i1!=null?i1.getText():null);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:860:13: '->' i2= IDENTIFIER
            	    {
            	    string_literal224=(Token)match(input,83,FOLLOW_83_in_postfix_expression2200); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal224_tree = (CommonTree)adaptor.create(string_literal224);
            	    adaptor.addChild(root_0, string_literal224_tree);
            	    }
            	    i2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_postfix_expression2204); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i2_tree = (CommonTree)adaptor.create(i2);
            	    adaptor.addChild(root_0, i2_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      constantExprTempIdentifier+="->"+(i2!=null?i2.getText():null);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:861:13: '++'
            	    {
            	    string_literal225=(Token)match(input,79,FOLLOW_79_in_postfix_expression2220); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal225_tree = (CommonTree)adaptor.create(string_literal225);
            	    adaptor.addChild(root_0, string_literal225_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.assignedVars.add(constantExprTempIdentifier+"++");
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:862:13: '--'
            	    {
            	    string_literal226=(Token)match(input,80,FOLLOW_80_in_postfix_expression2237); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal226_tree = (CommonTree)adaptor.create(string_literal226);
            	    adaptor.addChild(root_0, string_literal226_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.assignedVars.add(constantExprTempIdentifier+"--");
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, postfix_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_expression"

    public static class unary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_operator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:866:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
    public final PretCParser.unary_operator_return unary_operator() throws RecognitionException {
        PretCParser.unary_operator_return retval = new PretCParser.unary_operator_return();
        retval.start = input.LT(1);
        int unary_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set227=null;

        CommonTree set227_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:867:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set227=(Token)input.LT(1);
            if ( input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=84 && input.LA(1)<=86) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set227));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, unary_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_operator"

    public static class primary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:875:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' );
    public final PretCParser.primary_expression_return primary_expression() throws RecognitionException {
        PretCParser.primary_expression_return retval = new PretCParser.primary_expression_return();
        retval.start = input.LT(1);
        int primary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER228=null;
        Token char_literal230=null;
        Token char_literal232=null;
        PretCParser.constant_return constant229 = null;

        PretCParser.expression_return expression231 = null;


        CommonTree IDENTIFIER228_tree=null;
        CommonTree char_literal230_tree=null;
        CommonTree char_literal232_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:876:2: ( IDENTIFIER | constant | '(' expression ')' )
            int alt65=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt65=1;
                }
                break;
            case DECIMAL_LITERAL:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case FLOATING_POINT_LITERAL:
                {
                alt65=2;
                }
                break;
            case 47:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:876:4: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENTIFIER228=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary_expression2298); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER228_tree = (CommonTree)adaptor.create(IDENTIFIER228);
                    adaptor.addChild(root_0, IDENTIFIER228_tree);
                    }
                    if ( state.backtracking==0 ) {
                      constantExprTempIdentifier=(IDENTIFIER228!=null?IDENTIFIER228.getText():null);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:877:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_primary_expression2305);
                    constant229=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant229.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:878:4: '(' expression ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal230=(Token)match(input,47,FOLLOW_47_in_primary_expression2310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal230_tree = (CommonTree)adaptor.create(char_literal230);
                    adaptor.addChild(root_0, char_literal230_tree);
                    }
                    pushFollow(FOLLOW_expression_in_primary_expression2312);
                    expression231=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression231.getTree());
                    char_literal232=(Token)match(input,49,FOLLOW_49_in_primary_expression2314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal232_tree = (CommonTree)adaptor.create(char_literal232);
                    adaptor.addChild(root_0, char_literal232_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, primary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:881:1: constant : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL );
    public final PretCParser.constant_return constant() throws RecognitionException {
        PretCParser.constant_return retval = new PretCParser.constant_return();
        retval.start = input.LT(1);
        int constant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set233=null;

        CommonTree set233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:882:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set233=(Token)input.LT(1);
            if ( input.LA(1)==DECIMAL_LITERAL||(input.LA(1)>=HEX_LITERAL && input.LA(1)<=FLOATING_POINT_LITERAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set233));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, constant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:892:1: expression : a1= assignment_expression ( ',' a2= assignment_expression )* ;
    public final PretCParser.expression_return expression() throws RecognitionException {
        PretCParser.expression_return retval = new PretCParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal234=null;
        PretCParser.assignment_expression_return a1 = null;

        PretCParser.assignment_expression_return a2 = null;


        CommonTree char_literal234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:893:2: (a1= assignment_expression ( ',' a2= assignment_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:893:4: a1= assignment_expression ( ',' a2= assignment_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_assignment_expression_in_expression2393);
            a1=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, a1.getTree());
            if ( state.backtracking==0 ) {
              ((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add((a1!=null?input.toString(a1.start,a1.stop):null));
            }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:893:82: ( ',' a2= assignment_expression )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==43) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:893:83: ',' a2= assignment_expression
            	    {
            	    char_literal234=(Token)match(input,43,FOLLOW_43_in_expression2398); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal234_tree = (CommonTree)adaptor.create(char_literal234);
            	    adaptor.addChild(root_0, char_literal234_tree);
            	    }
            	    pushFollow(FOLLOW_assignment_expression_in_expression2403);
            	    a2=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a2.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add((a2!=null?input.toString(a2.start,a2.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constant_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:896:1: constant_expression : conditional_expression ;
    public final PretCParser.constant_expression_return constant_expression() throws RecognitionException {
        PretCParser.constant_expression_return retval = new PretCParser.constant_expression_return();
        retval.start = input.LT(1);
        int constant_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.conditional_expression_return conditional_expression235 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:897:2: ( conditional_expression )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:897:4: conditional_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditional_expression_in_constant_expression2417);
            conditional_expression235=conditional_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, constant_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_expression"

    public static class assignment_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:900:1: assignment_expression : ( lvalue assignment_operator assignment_expression | constant_expression );
    public final PretCParser.assignment_expression_return assignment_expression() throws RecognitionException {
        PretCParser.assignment_expression_return retval = new PretCParser.assignment_expression_return();
        retval.start = input.LT(1);
        int assignment_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.lvalue_return lvalue236 = null;

        PretCParser.assignment_operator_return assignment_operator237 = null;

        PretCParser.assignment_expression_return assignment_expression238 = null;

        PretCParser.constant_expression_return constant_expression239 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:901:2: ( lvalue assignment_operator assignment_expression | constant_expression )
            int alt67=2;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:901:4: lvalue assignment_operator assignment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lvalue_in_assignment_expression2430);
                    lvalue236=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue236.getTree());
                    pushFollow(FOLLOW_assignment_operator_in_assignment_expression2432);
                    assignment_operator237=assignment_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_operator237.getTree());
                    pushFollow(FOLLOW_assignment_expression_in_assignment_expression2434);
                    assignment_expression238=assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression238.getTree());
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.assignedVars.add((lvalue236!=null?input.toString(lvalue236.start,lvalue236.stop):null));
                      			
                      		
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:906:4: constant_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_expression_in_assignment_expression2443);
                    constant_expression239=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression239.getTree());
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.constantStatement.get(((nodes_scope)nodes_stack.peek()).node.constantStatement.size()-1).add((constant_expression239!=null?input.toString(constant_expression239.start,constant_expression239.stop):null));
                      		
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, assignment_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_expression"

    public static class lvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalue"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:912:1: lvalue : unary_expression ;
    public final PretCParser.lvalue_return lvalue() throws RecognitionException {
        PretCParser.lvalue_return retval = new PretCParser.lvalue_return();
        retval.start = input.LT(1);
        int lvalue_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.unary_expression_return unary_expression240 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:913:2: ( unary_expression )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:913:4: unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_expression_in_lvalue2459);
            unary_expression240=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression240.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, lvalue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalue"

    public static class assignment_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_operator"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:916:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
    public final PretCParser.assignment_operator_return assignment_operator() throws RecognitionException {
        PretCParser.assignment_operator_return retval = new PretCParser.assignment_operator_return();
        retval.start = input.LT(1);
        int assignment_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set241=null;

        CommonTree set241_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:917:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set241=(Token)input.LT(1);
            if ( input.LA(1)==42||(input.LA(1)>=87 && input.LA(1)<=96) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set241));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, assignment_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"

    public static class conditional_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:930:1: conditional_expression : logical_or_expression ( '?' expression ':' conditional_expression )? ;
    public final PretCParser.conditional_expression_return conditional_expression() throws RecognitionException {
        PretCParser.conditional_expression_return retval = new PretCParser.conditional_expression_return();
        retval.start = input.LT(1);
        int conditional_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal243=null;
        Token char_literal245=null;
        PretCParser.logical_or_expression_return logical_or_expression242 = null;

        PretCParser.expression_return expression244 = null;

        PretCParser.conditional_expression_return conditional_expression246 = null;


        CommonTree char_literal243_tree=null;
        CommonTree char_literal245_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:931:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:931:4: logical_or_expression ( '?' expression ':' conditional_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logical_or_expression_in_conditional_expression2531);
            logical_or_expression242=logical_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_or_expression242.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:931:26: ( '?' expression ':' conditional_expression )?
            int alt68=2;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:931:27: '?' expression ':' conditional_expression
                    {
                    char_literal243=(Token)match(input,97,FOLLOW_97_in_conditional_expression2534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal243_tree = (CommonTree)adaptor.create(char_literal243);
                    adaptor.addChild(root_0, char_literal243_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditional_expression2536);
                    expression244=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression244.getTree());
                    char_literal245=(Token)match(input,67,FOLLOW_67_in_conditional_expression2538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal245_tree = (CommonTree)adaptor.create(char_literal245);
                    adaptor.addChild(root_0, char_literal245_tree);
                    }
                    pushFollow(FOLLOW_conditional_expression_in_conditional_expression2540);
                    conditional_expression246=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression246.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, conditional_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public static class logical_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_or_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:934:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
    public final PretCParser.logical_or_expression_return logical_or_expression() throws RecognitionException {
        PretCParser.logical_or_expression_return retval = new PretCParser.logical_or_expression_return();
        retval.start = input.LT(1);
        int logical_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal248=null;
        PretCParser.logical_and_expression_return logical_and_expression247 = null;

        PretCParser.logical_and_expression_return logical_and_expression249 = null;


        CommonTree string_literal248_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:935:2: ( logical_and_expression ( '||' logical_and_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:935:4: logical_and_expression ( '||' logical_and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression2553);
            logical_and_expression247=logical_and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression247.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:935:27: ( '||' logical_and_expression )*
            loop69:
            do {
                int alt69=2;
                alt69 = dfa69.predict(input);
                switch (alt69) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:935:28: '||' logical_and_expression
            	    {
            	    string_literal248=(Token)match(input,98,FOLLOW_98_in_logical_or_expression2556); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal248_tree = (CommonTree)adaptor.create(string_literal248);
            	    adaptor.addChild(root_0, string_literal248_tree);
            	    }
            	    pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression2558);
            	    logical_and_expression249=logical_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression249.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, logical_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_or_expression"

    public static class logical_and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_and_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:938:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    public final PretCParser.logical_and_expression_return logical_and_expression() throws RecognitionException {
        PretCParser.logical_and_expression_return retval = new PretCParser.logical_and_expression_return();
        retval.start = input.LT(1);
        int logical_and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal251=null;
        PretCParser.inclusive_or_expression_return inclusive_or_expression250 = null;

        PretCParser.inclusive_or_expression_return inclusive_or_expression252 = null;


        CommonTree string_literal251_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:939:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:939:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression2571);
            inclusive_or_expression250=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression250.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:939:28: ( '&&' inclusive_or_expression )*
            loop70:
            do {
                int alt70=2;
                alt70 = dfa70.predict(input);
                switch (alt70) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:939:29: '&&' inclusive_or_expression
            	    {
            	    string_literal251=(Token)match(input,99,FOLLOW_99_in_logical_and_expression2574); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal251_tree = (CommonTree)adaptor.create(string_literal251);
            	    adaptor.addChild(root_0, string_literal251_tree);
            	    }
            	    pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression2576);
            	    inclusive_or_expression252=inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression252.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, logical_and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_and_expression"

    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusive_or_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:942:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    public final PretCParser.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        PretCParser.inclusive_or_expression_return retval = new PretCParser.inclusive_or_expression_return();
        retval.start = input.LT(1);
        int inclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal254=null;
        PretCParser.exclusive_or_expression_return exclusive_or_expression253 = null;

        PretCParser.exclusive_or_expression_return exclusive_or_expression255 = null;


        CommonTree char_literal254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:943:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:943:4: exclusive_or_expression ( '|' exclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression2589);
            exclusive_or_expression253=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression253.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:943:28: ( '|' exclusive_or_expression )*
            loop71:
            do {
                int alt71=2;
                alt71 = dfa71.predict(input);
                switch (alt71) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:943:29: '|' exclusive_or_expression
            	    {
            	    char_literal254=(Token)match(input,100,FOLLOW_100_in_inclusive_or_expression2592); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal254_tree = (CommonTree)adaptor.create(char_literal254);
            	    adaptor.addChild(root_0, char_literal254_tree);
            	    }
            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression2594);
            	    exclusive_or_expression255=exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression255.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, inclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"

    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusive_or_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:946:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
    public final PretCParser.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        PretCParser.exclusive_or_expression_return retval = new PretCParser.exclusive_or_expression_return();
        retval.start = input.LT(1);
        int exclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal257=null;
        PretCParser.and_expression_return and_expression256 = null;

        PretCParser.and_expression_return and_expression258 = null;


        CommonTree char_literal257_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:947:2: ( and_expression ( '^' and_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:947:4: and_expression ( '^' and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression2607);
            and_expression256=and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression256.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:947:19: ( '^' and_expression )*
            loop72:
            do {
                int alt72=2;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:947:20: '^' and_expression
            	    {
            	    char_literal257=(Token)match(input,101,FOLLOW_101_in_exclusive_or_expression2610); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal257_tree = (CommonTree)adaptor.create(char_literal257);
            	    adaptor.addChild(root_0, char_literal257_tree);
            	    }
            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression2612);
            	    and_expression258=and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression258.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, exclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"

    public static class and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:950:1: and_expression : equality_expression ( '&' equality_expression )* ;
    public final PretCParser.and_expression_return and_expression() throws RecognitionException {
        PretCParser.and_expression_return retval = new PretCParser.and_expression_return();
        retval.start = input.LT(1);
        int and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal260=null;
        PretCParser.equality_expression_return equality_expression259 = null;

        PretCParser.equality_expression_return equality_expression261 = null;


        CommonTree char_literal260_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:951:2: ( equality_expression ( '&' equality_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:951:4: equality_expression ( '&' equality_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equality_expression_in_and_expression2625);
            equality_expression259=equality_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression259.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:951:24: ( '&' equality_expression )*
            loop73:
            do {
                int alt73=2;
                alt73 = dfa73.predict(input);
                switch (alt73) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:951:25: '&' equality_expression
            	    {
            	    char_literal260=(Token)match(input,84,FOLLOW_84_in_and_expression2628); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal260_tree = (CommonTree)adaptor.create(char_literal260);
            	    adaptor.addChild(root_0, char_literal260_tree);
            	    }
            	    pushFollow(FOLLOW_equality_expression_in_and_expression2630);
            	    equality_expression261=equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression261.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "and_expression"

    public static class equality_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equality_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:953:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    public final PretCParser.equality_expression_return equality_expression() throws RecognitionException {
        PretCParser.equality_expression_return retval = new PretCParser.equality_expression_return();
        retval.start = input.LT(1);
        int equality_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set263=null;
        PretCParser.relational_expression_return relational_expression262 = null;

        PretCParser.relational_expression_return relational_expression264 = null;


        CommonTree set263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:954:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:954:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relational_expression_in_equality_expression2642);
            relational_expression262=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression262.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:954:26: ( ( '==' | '!=' ) relational_expression )*
            loop74:
            do {
                int alt74=2;
                alt74 = dfa74.predict(input);
                switch (alt74) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:954:27: ( '==' | '!=' ) relational_expression
            	    {
            	    set263=(Token)input.LT(1);
            	    if ( (input.LA(1)>=102 && input.LA(1)<=103) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set263));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression2651);
            	    relational_expression264=relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression264.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, equality_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public static class relational_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:957:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
    public final PretCParser.relational_expression_return relational_expression() throws RecognitionException {
        PretCParser.relational_expression_return retval = new PretCParser.relational_expression_return();
        retval.start = input.LT(1);
        int relational_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set266=null;
        PretCParser.shift_expression_return shift_expression265 = null;

        PretCParser.shift_expression_return shift_expression267 = null;


        CommonTree set266_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:958:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:958:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shift_expression_in_relational_expression2664);
            shift_expression265=shift_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression265.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:958:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
            loop75:
            do {
                int alt75=2;
                alt75 = dfa75.predict(input);
                switch (alt75) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:958:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
            	    {
            	    set266=(Token)input.LT(1);
            	    if ( (input.LA(1)>=104 && input.LA(1)<=107) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set266));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression2677);
            	    shift_expression267=shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression267.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, relational_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class shift_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shift_expression"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:961:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
    public final PretCParser.shift_expression_return shift_expression() throws RecognitionException {
        PretCParser.shift_expression_return retval = new PretCParser.shift_expression_return();
        retval.start = input.LT(1);
        int shift_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set269=null;
        PretCParser.additive_expression_return additive_expression268 = null;

        PretCParser.additive_expression_return additive_expression270 = null;


        CommonTree set269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:962:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:962:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additive_expression_in_shift_expression2693);
            additive_expression268=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression268.getTree());
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:962:24: ( ( '<<' | '>>' ) additive_expression )*
            loop76:
            do {
                int alt76=2;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:962:25: ( '<<' | '>>' ) additive_expression
            	    {
            	    set269=(Token)input.LT(1);
            	    if ( (input.LA(1)>=108 && input.LA(1)<=109) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set269));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_additive_expression_in_shift_expression2702);
            	    additive_expression270=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression270.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, shift_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shift_expression"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:967:1: statement : ( labeled_statement -> ^( LABELED_STATMENT_TOK ID_TOK[\"\"+(ID)] labeled_statement ) | expression_statement | selection_statement | iteration_statement | jump_statement -> ^( JUMP_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$jump_statement.text] ) | parallel_statement | 'EOT' ';' -> ^( 'EOT' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) | preemption_statment | scope_statement );
    public final PretCParser.statement_return statement() throws RecognitionException {
        nodes_stack.push(new nodes_scope());

        PretCParser.statement_return retval = new PretCParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal277=null;
        Token char_literal278=null;
        PretCParser.labeled_statement_return labeled_statement271 = null;

        PretCParser.expression_statement_return expression_statement272 = null;

        PretCParser.selection_statement_return selection_statement273 = null;

        PretCParser.iteration_statement_return iteration_statement274 = null;

        PretCParser.jump_statement_return jump_statement275 = null;

        PretCParser.parallel_statement_return parallel_statement276 = null;

        PretCParser.preemption_statment_return preemption_statment279 = null;

        PretCParser.scope_statement_return scope_statement280 = null;


        CommonTree string_literal277_tree=null;
        CommonTree char_literal278_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleSubtreeStream stream_labeled_statement=new RewriteRuleSubtreeStream(adaptor,"rule labeled_statement");
        RewriteRuleSubtreeStream stream_jump_statement=new RewriteRuleSubtreeStream(adaptor,"rule jump_statement");

          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          long ID=-1;
          long lineNo = input.LT(1).getLine();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:974:2: ( labeled_statement -> ^( LABELED_STATMENT_TOK ID_TOK[\"\"+(ID)] labeled_statement ) | expression_statement | selection_statement | iteration_statement | jump_statement -> ^( JUMP_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$jump_statement.text] ) | parallel_statement | 'EOT' ';' -> ^( 'EOT' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) | preemption_statment | scope_statement )
            int alt77=9;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:974:4: labeled_statement
                    {
                    pushFollow(FOLLOW_labeled_statement_in_statement2727);
                    labeled_statement271=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_labeled_statement.add(labeled_statement271.getTree());
                    if ( state.backtracking==0 ) {

                      			//sourceTemp = (labeled_statement271!=null?input.toString(labeled_statement271.start,labeled_statement271.stop):null);
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			//((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: labeled_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 987:5: -> ^( LABELED_STATMENT_TOK ID_TOK[\"\"+(ID)] labeled_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:987:8: ^( LABELED_STATMENT_TOK ID_TOK[\"\"+(ID)] labeled_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATMENT_TOK, "LABELED_STATMENT_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_1, stream_labeled_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:989:4: expression_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_statement_in_statement2750);
                    expression_statement272=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_statement272.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:990:4: selection_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selection_statement_in_statement2756);
                    selection_statement273=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selection_statement273.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:991:4: iteration_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_iteration_statement_in_statement2762);
                    iteration_statement274=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iteration_statement274.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:992:4: jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_statement2768);
                    jump_statement275=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jump_statement.add(jump_statement275.getTree());
                    if ( state.backtracking==0 ) {

                      			sourceTemp = (jump_statement275!=null?input.toString(jump_statement275.start,jump_statement275.stop):null);
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1005:5: -> ^( JUMP_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$jump_statement.text] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1005:8: ^( JUMP_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$jump_statement.text] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JUMP_STATMENT_TOK, "JUMP_STATMENT_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, (jump_statement275!=null?input.toString(jump_statement275.start,jump_statement275.stop):null)));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1006:4: parallel_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parallel_statement_in_statement2791);
                    parallel_statement276=parallel_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_statement276.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1007:4: 'EOT' ';'
                    {
                    string_literal277=(Token)match(input,110,FOLLOW_110_in_statement2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_110.add(string_literal277);

                    char_literal278=(Token)match(input,40,FOLLOW_40_in_statement2799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal278);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "EOT;";
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="EOT";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 110
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1021:5: -> ^( 'EOT' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1021:8: ^( 'EOT' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1022:4: preemption_statment
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_preemption_statment_in_statement2821);
                    preemption_statment279=preemption_statment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preemption_statment279.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1023:4: scope_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_scope_statement_in_statement2826);
                    scope_statement280=scope_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scope_statement280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, statement_StartIndex); }
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class labeled_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "labeled_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1026:1: labeled_statement : ( IDENTIFIER ':' -> SOURCE_TOK[$IDENTIFIER.text+\":\"] | 'case' constant_expression ':' -> SOURCE_TOK[\"case \"+$constant_expression.text+\":\"] | 'default' ':' -> SOURCE_TOK[\"default:\"] );
    public final PretCParser.labeled_statement_return labeled_statement() throws RecognitionException {
        PretCParser.labeled_statement_return retval = new PretCParser.labeled_statement_return();
        retval.start = input.LT(1);
        int labeled_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER281=null;
        Token char_literal282=null;
        Token string_literal283=null;
        Token char_literal285=null;
        Token string_literal286=null;
        Token char_literal287=null;
        PretCParser.constant_expression_return constant_expression284 = null;


        CommonTree IDENTIFIER281_tree=null;
        CommonTree char_literal282_tree=null;
        CommonTree string_literal283_tree=null;
        CommonTree char_literal285_tree=null;
        CommonTree string_literal286_tree=null;
        CommonTree char_literal287_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_constant_expression=new RewriteRuleSubtreeStream(adaptor,"rule constant_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1027:2: ( IDENTIFIER ':' -> SOURCE_TOK[$IDENTIFIER.text+\":\"] | 'case' constant_expression ':' -> SOURCE_TOK[\"case \"+$constant_expression.text+\":\"] | 'default' ':' -> SOURCE_TOK[\"default:\"] )
            int alt78=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt78=1;
                }
                break;
            case 111:
                {
                alt78=2;
                }
                break;
            case 112:
                {
                alt78=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1027:4: IDENTIFIER ':'
                    {
                    IDENTIFIER281=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_labeled_statement2837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER281);

                    char_literal282=(Token)match(input,67,FOLLOW_67_in_labeled_statement2839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_67.add(char_literal282);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = (IDENTIFIER281!=null?IDENTIFIER281.getText():null)+":";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.name.add((IDENTIFIER281!=null?IDENTIFIER281.getText():null));
                      			((nodes_scope)nodes_stack.peek()).node.type="label";	
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1034:3: -> SOURCE_TOK[$IDENTIFIER.text+\":\"]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(SOURCE_TOK, (IDENTIFIER281!=null?IDENTIFIER281.getText():null)+":"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1035:4: 'case' constant_expression ':'
                    {
                    string_literal283=(Token)match(input,111,FOLLOW_111_in_labeled_statement2859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_111.add(string_literal283);

                    pushFollow(FOLLOW_constant_expression_in_labeled_statement2861);
                    constant_expression284=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_expression.add(constant_expression284.getTree());
                    char_literal285=(Token)match(input,67,FOLLOW_67_in_labeled_statement2863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_67.add(char_literal285);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "case "+(constant_expression284!=null?input.toString(constant_expression284.start,constant_expression284.stop):null)+":";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="case";	
                      			//((nodes_scope)nodes_stack.peek()).node.constantStatement.add((constant_expression284!=null?input.toString(constant_expression284.start,constant_expression284.stop):null));
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1042:3: -> SOURCE_TOK[\"case \"+$constant_expression.text+\":\"]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(SOURCE_TOK, "case "+(constant_expression284!=null?input.toString(constant_expression284.start,constant_expression284.stop):null)+":"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1043:4: 'default' ':'
                    {
                    string_literal286=(Token)match(input,112,FOLLOW_112_in_labeled_statement2884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(string_literal286);

                    char_literal287=(Token)match(input,67,FOLLOW_67_in_labeled_statement2886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_67.add(char_literal287);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "default:";
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="default";	
                      			//((nodes_scope)nodes_stack.peek()).node.constantStatement.add($constant_expression.text);
                      		
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1050:3: -> SOURCE_TOK[\"default:\"]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(SOURCE_TOK, "default:"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, labeled_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"

    public static class scope_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scope_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1053:1: scope_statement : ( '{' '}' -> ^( SCOPE_TOK EMPTY_TOK END_TOK ) | '{' compound_statement '}' -> ^( SCOPE_TOK compound_statement END_TOK ) );
    public final PretCParser.scope_statement_return scope_statement() throws RecognitionException {
        scopeNodes_stack.push(new scopeNodes_scope());

        PretCParser.scope_statement_return retval = new PretCParser.scope_statement_return();
        retval.start = input.LT(1);
        int scope_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal288=null;
        Token char_literal289=null;
        Token char_literal290=null;
        Token char_literal292=null;
        PretCParser.compound_statement_return compound_statement291 = null;


        CommonTree char_literal288_tree=null;
        CommonTree char_literal289_tree=null;
        CommonTree char_literal290_tree=null;
        CommonTree char_literal292_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleSubtreeStream stream_compound_statement=new RewriteRuleSubtreeStream(adaptor,"rule compound_statement");

          long previousScope = currentScope;
          //dont put in init , init can prograss more than once when findingin which is right


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1067:2: ( '{' '}' -> ^( SCOPE_TOK EMPTY_TOK END_TOK ) | '{' compound_statement '}' -> ^( SCOPE_TOK compound_statement END_TOK ) )
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1067:4: '{' '}'
                    {
                    char_literal288=(Token)match(input,63,FOLLOW_63_in_scope_statement2928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_63.add(char_literal288);

                    if ( state.backtracking==0 ) {

                      		  currentScope = ++scopeCount;
                      		  ((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);
                      		  ((scopeNodes_scope)scopeNodes_stack.peek()).node.parentID = previousScope;
                      		 // System.out.println(currentScope);
                      		
                    }
                    char_literal289=(Token)match(input,64,FOLLOW_64_in_scope_statement2938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_64.add(char_literal289);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1074:8: -> ^( SCOPE_TOK EMPTY_TOK END_TOK )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1074:11: ^( SCOPE_TOK EMPTY_TOK END_TOK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCOPE_TOK, "SCOPE_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(EMPTY_TOK, "EMPTY_TOK"));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(END_TOK, "END_TOK"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1075:4: '{' compound_statement '}'
                    {
                    char_literal290=(Token)match(input,63,FOLLOW_63_in_scope_statement2954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_63.add(char_literal290);

                    if ( state.backtracking==0 ) {

                      		  currentScope = ++scopeCount;
                      		  ((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);
                      		  ((scopeNodes_scope)scopeNodes_stack.peek()).node.parentID = previousScope;
                      		//  System.out.println(currentScope);
                      		
                    }
                    pushFollow(FOLLOW_compound_statement_in_scope_statement2965);
                    compound_statement291=compound_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_statement.add(compound_statement291.getTree());
                    char_literal292=(Token)match(input,64,FOLLOW_64_in_scope_statement2967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_64.add(char_literal292);



                    // AST REWRITE
                    // elements: compound_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1082:28: -> ^( SCOPE_TOK compound_statement END_TOK )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1082:31: ^( SCOPE_TOK compound_statement END_TOK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCOPE_TOK, "SCOPE_TOK"), root_1);

                        adaptor.addChild(root_1, stream_compound_statement.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(END_TOK, "END_TOK"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                scopeList.put(currentScope,((scopeNodes_scope)scopeNodes_stack.peek()).node);
               // System.out.println("A"+currentScope);
                currentScope = previousScope;
                

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, scope_statement_StartIndex); }
            scopeNodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "scope_statement"

    public static class condition_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1084:1: condition_statement : ( ( '{' ( compound_statement )? '}' )=> scope_statement | ( declaration | statement ) -> ^( SCOPE_TOK ( declaration )? ( statement )? END_TOK ) );
    public final PretCParser.condition_statement_return condition_statement() throws RecognitionException {
        scopeNodes_stack.push(new scopeNodes_scope());

        PretCParser.condition_statement_return retval = new PretCParser.condition_statement_return();
        retval.start = input.LT(1);
        int condition_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.scope_statement_return scope_statement293 = null;

        PretCParser.declaration_return declaration294 = null;

        PretCParser.statement_return statement295 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");

          long previousScope = currentScope;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:2: ( ( '{' ( compound_statement )? '}' )=> scope_statement | ( declaration | statement ) -> ^( SCOPE_TOK ( declaration )? ( statement )? END_TOK ) )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:4: ( '{' ( compound_statement )? '}' )=> scope_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_scope_statement_in_condition_statement3011);
                    scope_statement293=scope_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scope_statement293.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:4: ( declaration | statement )
                    {
                    if ( state.backtracking==0 ) {
                      currentScope = ++scopeCount; ((scopeNodes_scope)scopeNodes_stack.peek()).node = new ScopeNode(currentScope);((scopeNodes_scope)scopeNodes_stack.peek()).node.parentID = previousScope;
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:126: ( declaration | statement )
                    int alt80=2;
                    alt80 = dfa80.predict(input);
                    switch (alt80) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:127: declaration
                            {
                            pushFollow(FOLLOW_declaration_in_condition_statement3018);
                            declaration294=declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declaration.add(declaration294.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:139: statement
                            {
                            pushFollow(FOLLOW_statement_in_condition_statement3020);
                            statement295=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement295.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      scopeList.put(currentScope,((scopeNodes_scope)scopeNodes_stack.peek()).node);currentScope = previousScope;
                    }


                    // AST REWRITE
                    // elements: declaration, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1090:229: -> ^( SCOPE_TOK ( declaration )? ( statement )? END_TOK )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:232: ^( SCOPE_TOK ( declaration )? ( statement )? END_TOK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCOPE_TOK, "SCOPE_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:244: ( declaration )?
                        if ( stream_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_declaration.nextTree());

                        }
                        stream_declaration.reset();
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:257: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(END_TOK, "END_TOK"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, condition_statement_StartIndex); }
            scopeNodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "condition_statement"

    public static class compound_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1093:1: compound_statement : ( declaration | statement_list )* ;
    public final PretCParser.compound_statement_return compound_statement() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        PretCParser.compound_statement_return retval = new PretCParser.compound_statement_return();
        retval.start = input.LT(1);
        int compound_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.declaration_return declaration296 = null;

        PretCParser.statement_list_return statement_list297 = null;




          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:2: ( ( declaration | statement_list )* )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:4: ( declaration | statement_list )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:4: ( declaration | statement_list )*
            loop82:
            do {
                int alt82=3;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:5: declaration
            	    {
            	    pushFollow(FOLLOW_declaration_in_compound_statement3066);
            	    declaration296=declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration296.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:17: statement_list
            	    {
            	    pushFollow(FOLLOW_statement_list_in_compound_statement3068);
            	    statement_list297=statement_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list297.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, compound_statement_StartIndex); }
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "compound_statement"

    public static class statement_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_list"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1101:1: statement_list : ( statement )+ ;
    public final PretCParser.statement_list_return statement_list() throws RecognitionException {
        PretCParser.statement_list_return retval = new PretCParser.statement_list_return();
        retval.start = input.LT(1);
        int statement_list_StartIndex = input.index();
        CommonTree root_0 = null;

        PretCParser.statement_return statement298 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1102:2: ( ( statement )+ )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1102:4: ( statement )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1102:4: ( statement )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                alt83 = dfa83.predict(input);
                switch (alt83) {
            	case 1 :
            	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list3083);
            	    statement298=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement298.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, statement_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_list"

    public static class preemption_statment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preemption_statment"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1106:1: preemption_statment : ( 'strong' 'abort' condition_statement 'when' '(' expression ')' ';' -> ^( ABORT_TOK ^( 'strong' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement ) | 'weak' 'abort' condition_statement 'when' '(' expression ')' ';' -> ^( ABORT_TOK ^( 'weak' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement ) );
    public final PretCParser.preemption_statment_return preemption_statment() throws RecognitionException {
        PretCParser.preemption_statment_return retval = new PretCParser.preemption_statment_return();
        retval.start = input.LT(1);
        int preemption_statment_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal299=null;
        Token string_literal300=null;
        Token string_literal302=null;
        Token char_literal303=null;
        Token char_literal305=null;
        Token char_literal306=null;
        Token string_literal307=null;
        Token string_literal308=null;
        Token string_literal310=null;
        Token char_literal311=null;
        Token char_literal313=null;
        Token char_literal314=null;
        PretCParser.condition_statement_return condition_statement301 = null;

        PretCParser.expression_return expression304 = null;

        PretCParser.condition_statement_return condition_statement309 = null;

        PretCParser.expression_return expression312 = null;


        CommonTree string_literal299_tree=null;
        CommonTree string_literal300_tree=null;
        CommonTree string_literal302_tree=null;
        CommonTree char_literal303_tree=null;
        CommonTree char_literal305_tree=null;
        CommonTree char_literal306_tree=null;
        CommonTree string_literal307_tree=null;
        CommonTree string_literal308_tree=null;
        CommonTree string_literal310_tree=null;
        CommonTree char_literal311_tree=null;
        CommonTree char_literal313_tree=null;
        CommonTree char_literal314_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleSubtreeStream stream_condition_statement=new RewriteRuleSubtreeStream(adaptor,"rule condition_statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

         
        	long ID=-1; 
        	long lineNo = input.LT(1).getLine();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1112:2: ( 'strong' 'abort' condition_statement 'when' '(' expression ')' ';' -> ^( ABORT_TOK ^( 'strong' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement ) | 'weak' 'abort' condition_statement 'when' '(' expression ')' ';' -> ^( ABORT_TOK ^( 'weak' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement ) )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==113) ) {
                alt84=1;
            }
            else if ( (LA84_0==116) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1112:4: 'strong' 'abort' condition_statement 'when' '(' expression ')' ';'
                    {
                    string_literal299=(Token)match(input,113,FOLLOW_113_in_preemption_statment3101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_113.add(string_literal299);

                    string_literal300=(Token)match(input,114,FOLLOW_114_in_preemption_statment3103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(string_literal300);

                    if ( state.backtracking==0 ) {

                      			
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.type="strongAbort";				

                      		
                    }
                    pushFollow(FOLLOW_condition_statement_in_preemption_statment3110);
                    condition_statement301=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement301.getTree());
                    string_literal302=(Token)match(input,115,FOLLOW_115_in_preemption_statment3112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_115.add(string_literal302);

                    char_literal303=(Token)match(input,47,FOLLOW_47_in_preemption_statment3114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal303);

                    pushFollow(FOLLOW_expression_in_preemption_statment3116);
                    expression304=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression304.getTree());
                    char_literal305=(Token)match(input,49,FOLLOW_49_in_preemption_statment3118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal305);

                    char_literal306=(Token)match(input,40,FOLLOW_40_in_preemption_statment3120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal306);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "strong abort{...} when("+(expression304!=null?input.toString(expression304.start,expression304.stop):null)+");" ;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = (expression304!=null?input.toString(expression304.start,expression304.stop):null);
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 114, 113, condition_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1132:3: -> ^( ABORT_TOK ^( 'strong' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1132:7: ^( ABORT_TOK ^( 'strong' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ABORT_TOK, "ABORT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1132:19: ^( 'strong' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_113.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_114.nextNode());
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1133:4: 'weak' 'abort' condition_statement 'when' '(' expression ')' ';'
                    {
                    string_literal307=(Token)match(input,116,FOLLOW_116_in_preemption_statment3153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_116.add(string_literal307);

                    string_literal308=(Token)match(input,114,FOLLOW_114_in_preemption_statment3155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_114.add(string_literal308);

                    if ( state.backtracking==0 ) {

                      			
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			
                      			
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.type="weakAbort";	

                      		
                    }
                    pushFollow(FOLLOW_condition_statement_in_preemption_statment3162);
                    condition_statement309=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement309.getTree());
                    string_literal310=(Token)match(input,115,FOLLOW_115_in_preemption_statment3164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_115.add(string_literal310);

                    char_literal311=(Token)match(input,47,FOLLOW_47_in_preemption_statment3166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal311);

                    pushFollow(FOLLOW_expression_in_preemption_statment3168);
                    expression312=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression312.getTree());
                    char_literal313=(Token)match(input,49,FOLLOW_49_in_preemption_statment3170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal313);

                    char_literal314=(Token)match(input,40,FOLLOW_40_in_preemption_statment3172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal314);

                    if ( state.backtracking==0 ) {
                      	
                      			sourceTemp = "weak abort{...} when("+(expression312!=null?input.toString(expression312.start,expression312.stop):null)+");" ;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = (expression312!=null?input.toString(expression312.start,expression312.stop):null);
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: 114, 116, condition_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1154:3: -> ^( ABORT_TOK ^( 'weak' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1154:7: ^( ABORT_TOK ^( 'weak' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ABORT_TOK, "ABORT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1154:19: ^( 'weak' 'abort' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_116.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_114.nextNode());
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, preemption_statment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preemption_statment"

    public static class parallel_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parallel_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1157:1: parallel_statement : 'PAR' '(' ( (i1= IDENTIFIER ) | ( 'void' ) ) ( ( ( ',' i2= IDENTIFIER )+ ) | ( ',' 'void' ) ) ')' ';' -> ^( 'PAR' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) ;
    public final PretCParser.parallel_statement_return parallel_statement() throws RecognitionException {
        PretCParser.parallel_statement_return retval = new PretCParser.parallel_statement_return();
        retval.start = input.LT(1);
        int parallel_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token string_literal315=null;
        Token char_literal316=null;
        Token string_literal317=null;
        Token char_literal318=null;
        Token char_literal319=null;
        Token string_literal320=null;
        Token char_literal321=null;
        Token char_literal322=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree string_literal315_tree=null;
        CommonTree char_literal316_tree=null;
        CommonTree string_literal317_tree=null;
        CommonTree char_literal318_tree=null;
        CommonTree char_literal319_tree=null;
        CommonTree string_literal320_tree=null;
        CommonTree char_literal321_tree=null;
        CommonTree char_literal322_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");


        	sourceTemp = "PAR("; 
        	long ID=-1;
        	long lineNo = input.LT(1).getLine();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1163:2: ( 'PAR' '(' ( (i1= IDENTIFIER ) | ( 'void' ) ) ( ( ( ',' i2= IDENTIFIER )+ ) | ( ',' 'void' ) ) ')' ';' -> ^( 'PAR' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) )
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1163:4: 'PAR' '(' ( (i1= IDENTIFIER ) | ( 'void' ) ) ( ( ( ',' i2= IDENTIFIER )+ ) | ( ',' 'void' ) ) ')' ';'
            {
            string_literal315=(Token)match(input,117,FOLLOW_117_in_parallel_statement3218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal315);

            char_literal316=(Token)match(input,47,FOLLOW_47_in_parallel_statement3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(char_literal316);

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1163:14: ( (i1= IDENTIFIER ) | ( 'void' ) )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==IDENTIFIER) ) {
                alt85=1;
            }
            else if ( (LA85_0==48) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1164:5: (i1= IDENTIFIER )
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1164:5: (i1= IDENTIFIER )
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1164:6: i1= IDENTIFIER
                    {
                    i1=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_parallel_statement3231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(i1);

                    if ( state.backtracking==0 ) {
                      sourceTemp+=(i1!=null?i1.getText():null);((nodes_scope)nodes_stack.peek()).node.name.add((i1!=null?i1.getText():null));((nodes_scope)nodes_stack.peek()).node.thdInsID.add(uniqueThdInstantID++);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1166:5: ( 'void' )
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1166:5: ( 'void' )
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1166:6: 'void'
                    {
                    string_literal317=(Token)match(input,48,FOLLOW_48_in_parallel_statement3247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_48.add(string_literal317);

                    if ( state.backtracking==0 ) {
                      sourceTemp+="void";
                    }

                    }


                    }
                    break;

            }

            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1169:5: ( ( ( ',' i2= IDENTIFIER )+ ) | ( ',' 'void' ) )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==43) ) {
                int LA87_1 = input.LA(2);

                if ( (LA87_1==IDENTIFIER) ) {
                    alt87=1;
                }
                else if ( (LA87_1==48) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1171:5: ( ( ',' i2= IDENTIFIER )+ )
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1171:5: ( ( ',' i2= IDENTIFIER )+ )
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1172:5: ( ',' i2= IDENTIFIER )+
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1172:5: ( ',' i2= IDENTIFIER )+
                    int cnt86=0;
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==43) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1172:6: ',' i2= IDENTIFIER
                    	    {
                    	    char_literal318=(Token)match(input,43,FOLLOW_43_in_parallel_statement3285); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_43.add(char_literal318);

                    	    i2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_parallel_statement3289); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(i2);

                    	    if ( state.backtracking==0 ) {
                    	      sourceTemp+=','+(i2!=null?i2.getText():null);((nodes_scope)nodes_stack.peek()).node.name.add((i2!=null?i2.getText():null));((nodes_scope)nodes_stack.peek()).node.thdInsID.add(uniqueThdInstantID++);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt86 >= 1 ) break loop86;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(86, input);
                                throw eee;
                        }
                        cnt86++;
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1175:5: ( ',' 'void' )
                    {
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1175:5: ( ',' 'void' )
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1175:6: ',' 'void'
                    {
                    char_literal319=(Token)match(input,43,FOLLOW_43_in_parallel_statement3312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_43.add(char_literal319);

                    string_literal320=(Token)match(input,48,FOLLOW_48_in_parallel_statement3314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_48.add(string_literal320);

                    if ( state.backtracking==0 ) {
                      sourceTemp+=",void";
                    }

                    }


                    }
                    break;

            }

            char_literal321=(Token)match(input,49,FOLLOW_49_in_parallel_statement3329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(char_literal321);

            char_literal322=(Token)match(input,40,FOLLOW_40_in_parallel_statement3331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(char_literal322);

            if ( state.backtracking==0 ) {

              			

              				
              			sourceTemp += ");";
              			ID = idCount++;
              			((nodes_scope)nodes_stack.peek()).node.ID=ID;
              			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
              			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
              			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
              			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
              			((nodes_scope)nodes_stack.peek()).node.type="PAR";	
              			//((nodes_scope)nodes_stack.peek()).node.constantStatement.add(";");
              			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
              			if (debug > 0) {
              				System.out.println(nodesTable.get(ID));
              			}
              			
              		
              		
            }


            // AST REWRITE
            // elements: 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1198:3: -> ^( 'PAR' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
            {
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1198:6: ^( 'PAR' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, sourceTemp));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, parallel_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parallel_statement"

    public static class expression_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1201:1: expression_statement : ( ';' -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] ) | expression ';' -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] ) );
    public final PretCParser.expression_statement_return expression_statement() throws RecognitionException {
        nodes_stack.push(new nodes_scope());

        PretCParser.expression_statement_return retval = new PretCParser.expression_statement_return();
        retval.start = input.LT(1);
        int expression_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal323=null;
        Token char_literal325=null;
        PretCParser.expression_return expression324 = null;


        CommonTree char_literal323_tree=null;
        CommonTree char_literal325_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

          ((nodes_scope)nodes_stack.peek()).node = new StatementNode();
          long ID=-1;
          long lineNo = input.LT(1).getLine();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1208:2: ( ';' -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] ) | expression ';' -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==40) ) {
                alt88=1;
            }
            else if ( ((LA88_0>=DECIMAL_LITERAL && LA88_0<=IDENTIFIER)||(LA88_0>=HEX_LITERAL && LA88_0<=FLOATING_POINT_LITERAL)||LA88_0==47||LA88_0==73||(LA88_0>=75 && LA88_0<=76)||(LA88_0>=79 && LA88_0<=81)||(LA88_0>=84 && LA88_0<=86)) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1208:4: ';'
                    {
                    char_literal323=(Token)match(input,40,FOLLOW_40_in_expression_statement3372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal323);

                    if ( state.backtracking==0 ) {

                      		sourceTemp = "";
                      		ID = idCount++;
                      		((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      		((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      		((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      		((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      		((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      		((nodes_scope)nodes_stack.peek()).node.type="expression";	
                      		((nodes_scope)nodes_stack.peek()).node.constantStatement.get(((nodes_scope)nodes_stack.peek()).node.constantStatement.size()-1).add(";");
                      		nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      		if (debug > 0) {
                      			System.out.println(nodesTable.get(ID));
                      		}
                      	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1223:4: -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1223:7: ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSION_STATMENT_TOK, "EXPRESSION_STATMENT_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, input.toString(retval.start,input.LT(-1))));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1225:3: expression ';'
                    {
                    pushFollow(FOLLOW_expression_in_expression_statement3396);
                    expression324=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression324.getTree());
                    char_literal325=(Token)match(input,40,FOLLOW_40_in_expression_statement3398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal325);

                    if ( state.backtracking==0 ) {

                      		sourceTemp = (expression324!=null?input.toString(expression324.start,expression324.stop):null)+";";
                      		ID = idCount++;
                      		((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      		((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      		((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      		((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      		((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      		((nodes_scope)nodes_stack.peek()).node.type="expression";
                      		nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      		if (debug > 0) {
                      			System.out.println(nodesTable.get(ID));
                      		}
                      	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1239:4: -> ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1239:7: ^( EXPRESSION_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$expression_statement.text] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSION_STATMENT_TOK, "EXPRESSION_STATMENT_TOK"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(SOURCE_TOK, input.toString(retval.start,input.LT(-1))));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, expression_statement_StartIndex); }
            nodes_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "expression_statement"

    public static class selection_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1242:1: selection_statement : ( 'if' '(' expression ')' s1= condition_statement ( options {k=1; backtrack=false; } : 'else' s2= condition_statement )? -> ^( SELECTION_STATMENT_TOK ^( 'if' ID_TOK[\"\"+(ifID)] SOURCE_TOK[\"if(\"+$expression.text+\")\"] ) $s1 ( ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] ) $s2)? ) | 'switch' '(' expression ')' condition_statement -> ^( SELECTION_STATMENT_TOK ^( 'switch' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"switch(\"+$expression.text+\")\"] ) condition_statement ) );
    public final PretCParser.selection_statement_return selection_statement() throws RecognitionException {
        PretCParser.selection_statement_return retval = new PretCParser.selection_statement_return();
        retval.start = input.LT(1);
        int selection_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal326=null;
        Token char_literal327=null;
        Token char_literal329=null;
        Token string_literal330=null;
        Token string_literal331=null;
        Token char_literal332=null;
        Token char_literal334=null;
        PretCParser.condition_statement_return s1 = null;

        PretCParser.condition_statement_return s2 = null;

        PretCParser.expression_return expression328 = null;

        PretCParser.expression_return expression333 = null;

        PretCParser.condition_statement_return condition_statement335 = null;


        CommonTree string_literal326_tree=null;
        CommonTree char_literal327_tree=null;
        CommonTree char_literal329_tree=null;
        CommonTree string_literal330_tree=null;
        CommonTree string_literal331_tree=null;
        CommonTree char_literal332_tree=null;
        CommonTree char_literal334_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_condition_statement=new RewriteRuleSubtreeStream(adaptor,"rule condition_statement");

        	long ID=-1;
        	long lineNo = input.LT(1).getLine();
        	long ifID = 0;
        	long elseID = 0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1252:2: ( 'if' '(' expression ')' s1= condition_statement ( options {k=1; backtrack=false; } : 'else' s2= condition_statement )? -> ^( SELECTION_STATMENT_TOK ^( 'if' ID_TOK[\"\"+(ifID)] SOURCE_TOK[\"if(\"+$expression.text+\")\"] ) $s1 ( ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] ) $s2)? ) | 'switch' '(' expression ')' condition_statement -> ^( SELECTION_STATMENT_TOK ^( 'switch' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"switch(\"+$expression.text+\")\"] ) condition_statement ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==118) ) {
                alt90=1;
            }
            else if ( (LA90_0==120) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1252:4: 'if' '(' expression ')' s1= condition_statement ( options {k=1; backtrack=false; } : 'else' s2= condition_statement )?
                    {
                    string_literal326=(Token)match(input,118,FOLLOW_118_in_selection_statement3434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(string_literal326);

                    char_literal327=(Token)match(input,47,FOLLOW_47_in_selection_statement3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal327);

                    pushFollow(FOLLOW_expression_in_selection_statement3438);
                    expression328=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());
                    char_literal329=(Token)match(input,49,FOLLOW_49_in_selection_statement3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal329);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "if("+(expression328!=null?input.toString(expression328.start,expression328.stop):null)+")" ;
                      			ID = idCount++;
                      			ifID = ID;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="if";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      			//reset node for else
                      			((nodes_scope)nodes_stack.peek()).node = new StatementNode();
                      			ID=-1;
                      			lineNo = input.LT(1).getLine();
                      			
                      		
                    }
                    pushFollow(FOLLOW_condition_statement_in_selection_statement3459);
                    s1=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(s1.getTree());
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1277:5: ( options {k=1; backtrack=false; } : 'else' s2= condition_statement )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==119) ) {
                        int LA89_2 = input.LA(2);

                        if ( (true) ) {
                            alt89=1;
                        }
                    }
                    switch (alt89) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1277:38: 'else' s2= condition_statement
                            {
                            string_literal330=(Token)match(input,119,FOLLOW_119_in_selection_statement3481); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_119.add(string_literal330);

                            if ( state.backtracking==0 ) {

                              			sourceTemp = "else" ;
                              			ID = idCount++;
                              			elseID = ID;
                              			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                              			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                              			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                              			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                              			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                              			((nodes_scope)nodes_stack.peek()).node.type="else";	
                              			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                              			if (debug > 0) {
                              				System.out.println(nodesTable.get(ID));
                              			}
                              		
                            }
                            pushFollow(FOLLOW_condition_statement_in_selection_statement3505);
                            s2=condition_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_condition_statement.add(s2.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 119, s2, s1, 118
                    // token labels: 
                    // rule labels: retval, s2, s1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1297:5: -> ^( SELECTION_STATMENT_TOK ^( 'if' ID_TOK[\"\"+(ifID)] SOURCE_TOK[\"if(\"+$expression.text+\")\"] ) $s1 ( ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] ) $s2)? )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1297:9: ^( SELECTION_STATMENT_TOK ^( 'if' ID_TOK[\"\"+(ifID)] SOURCE_TOK[\"if(\"+$expression.text+\")\"] ) $s1 ( ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] ) $s2)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STATMENT_TOK, "SELECTION_STATMENT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1297:34: ^( 'if' ID_TOK[\"\"+(ifID)] SOURCE_TOK[\"if(\"+$expression.text+\")\"] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_118.nextNode(), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ifID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, "if("+(expression328!=null?input.toString(expression328.start,expression328.stop):null)+")"));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_s1.nextTree());
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1297:103: ( ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] ) $s2)?
                        if ( stream_119.hasNext()||stream_s2.hasNext() ) {
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1297:104: ^( 'else' ID_TOK[\"\"+(elseID)] SOURCE_TOK[\"else\"] )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot(stream_119.nextNode(), root_2);

                            adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(elseID)));
                            adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, "else"));

                            adaptor.addChild(root_1, root_2);
                            }
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_119.reset();
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1301:4: 'switch' '(' expression ')' condition_statement
                    {
                    string_literal331=(Token)match(input,120,FOLLOW_120_in_selection_statement3574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(string_literal331);

                    char_literal332=(Token)match(input,47,FOLLOW_47_in_selection_statement3576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal332);

                    pushFollow(FOLLOW_expression_in_selection_statement3578);
                    expression333=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression333.getTree());
                    char_literal334=(Token)match(input,49,FOLLOW_49_in_selection_statement3580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal334);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "switch("+(expression333!=null?input.toString(expression333.start,expression333.stop):null)+")" ;
                      			ID = idCount++;
                      			elseID = ID;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="switch";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }
                    pushFollow(FOLLOW_condition_statement_in_selection_statement3599);
                    condition_statement335=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement335.getTree());


                    // AST REWRITE
                    // elements: condition_statement, 120
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1320:6: -> ^( SELECTION_STATMENT_TOK ^( 'switch' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"switch(\"+$expression.text+\")\"] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1320:9: ^( SELECTION_STATMENT_TOK ^( 'switch' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"switch(\"+$expression.text+\")\"] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STATMENT_TOK, "SELECTION_STATMENT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1320:34: ^( 'switch' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"switch(\"+$expression.text+\")\"] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_120.nextNode(), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, "switch("+(expression333!=null?input.toString(expression333.start,expression333.stop):null)+")"));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	

            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, selection_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class iteration_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iteration_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1323:1: iteration_statement : ( 'while' '(' expression ')' ( ':' DECIMAL_LITERAL )? condition_statement -> ^( ITERATION_STATEMENT_TOK ^( 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"while(\"+$expression.text+\")\"] ) condition_statement ) | 'do' ( ':' DECIMAL_LITERAL )? condition_statement 'while' '(' expression ')' ';' -> ^( ITERATION_STATEMENT_TOK ^( 'do' 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[ \"while(\"+$expression.text+\")\"] ) condition_statement ) | 'for' '(' (s1= expression )? ';' (s2= expression )? ';' (s3= expression )? ')' ( ':' DECIMAL_LITERAL )? condition_statement -> ^( ITERATION_STATEMENT_TOK ^( 'for' ID_TOK[\"\"+(ID)] SOURCE_TOK[localSourceTemp] ) condition_statement ) );
    public final PretCParser.iteration_statement_return iteration_statement() throws RecognitionException {
        PretCParser.iteration_statement_return retval = new PretCParser.iteration_statement_return();
        retval.start = input.LT(1);
        int iteration_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal336=null;
        Token char_literal337=null;
        Token char_literal339=null;
        Token char_literal340=null;
        Token DECIMAL_LITERAL341=null;
        Token string_literal343=null;
        Token char_literal344=null;
        Token DECIMAL_LITERAL345=null;
        Token string_literal347=null;
        Token char_literal348=null;
        Token char_literal350=null;
        Token char_literal351=null;
        Token string_literal352=null;
        Token char_literal353=null;
        Token char_literal354=null;
        Token char_literal355=null;
        Token char_literal356=null;
        Token char_literal357=null;
        Token DECIMAL_LITERAL358=null;
        PretCParser.expression_return s1 = null;

        PretCParser.expression_return s2 = null;

        PretCParser.expression_return s3 = null;

        PretCParser.expression_return expression338 = null;

        PretCParser.condition_statement_return condition_statement342 = null;

        PretCParser.condition_statement_return condition_statement346 = null;

        PretCParser.expression_return expression349 = null;

        PretCParser.condition_statement_return condition_statement359 = null;


        CommonTree string_literal336_tree=null;
        CommonTree char_literal337_tree=null;
        CommonTree char_literal339_tree=null;
        CommonTree char_literal340_tree=null;
        CommonTree DECIMAL_LITERAL341_tree=null;
        CommonTree string_literal343_tree=null;
        CommonTree char_literal344_tree=null;
        CommonTree DECIMAL_LITERAL345_tree=null;
        CommonTree string_literal347_tree=null;
        CommonTree char_literal348_tree=null;
        CommonTree char_literal350_tree=null;
        CommonTree char_literal351_tree=null;
        CommonTree string_literal352_tree=null;
        CommonTree char_literal353_tree=null;
        CommonTree char_literal354_tree=null;
        CommonTree char_literal355_tree=null;
        CommonTree char_literal356_tree=null;
        CommonTree char_literal357_tree=null;
        CommonTree DECIMAL_LITERAL358_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_DECIMAL_LITERAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL_LITERAL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_condition_statement=new RewriteRuleSubtreeStream(adaptor,"rule condition_statement");

        	long ID=-1;
        	long lineNo = input.LT(1).getLine();
        	String localSourceTemp = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1331:2: ( 'while' '(' expression ')' ( ':' DECIMAL_LITERAL )? condition_statement -> ^( ITERATION_STATEMENT_TOK ^( 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"while(\"+$expression.text+\")\"] ) condition_statement ) | 'do' ( ':' DECIMAL_LITERAL )? condition_statement 'while' '(' expression ')' ';' -> ^( ITERATION_STATEMENT_TOK ^( 'do' 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[ \"while(\"+$expression.text+\")\"] ) condition_statement ) | 'for' '(' (s1= expression )? ';' (s2= expression )? ';' (s3= expression )? ')' ( ':' DECIMAL_LITERAL )? condition_statement -> ^( ITERATION_STATEMENT_TOK ^( 'for' ID_TOK[\"\"+(ID)] SOURCE_TOK[localSourceTemp] ) condition_statement ) )
            int alt97=3;
            switch ( input.LA(1) ) {
            case 121:
                {
                alt97=1;
                }
                break;
            case 122:
                {
                alt97=2;
                }
                break;
            case 123:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1331:4: 'while' '(' expression ')' ( ':' DECIMAL_LITERAL )? condition_statement
                    {
                    string_literal336=(Token)match(input,121,FOLLOW_121_in_iteration_statement3643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(string_literal336);

                    char_literal337=(Token)match(input,47,FOLLOW_47_in_iteration_statement3645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal337);

                    pushFollow(FOLLOW_expression_in_iteration_statement3647);
                    expression338=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression338.getTree());
                    char_literal339=(Token)match(input,49,FOLLOW_49_in_iteration_statement3649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal339);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "while("+(expression338!=null?input.toString(expression338.start,expression338.stop):null)+")" ;
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="while";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1346:3: ( ':' DECIMAL_LITERAL )?
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1346:4: ':' DECIMAL_LITERAL
                            {
                            char_literal340=(Token)match(input,67,FOLLOW_67_in_iteration_statement3658); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_67.add(char_literal340);

                            DECIMAL_LITERAL341=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_iteration_statement3660); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DECIMAL_LITERAL.add(DECIMAL_LITERAL341);

                            if ( state.backtracking==0 ) {
                              ((nodes_scope)nodes_stack.peek()).node.loopBound=(DECIMAL_LITERAL341!=null?DECIMAL_LITERAL341.getText():null);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_condition_statement_in_iteration_statement3672);
                    condition_statement342=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement342.getTree());


                    // AST REWRITE
                    // elements: 121, condition_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1349:3: -> ^( ITERATION_STATEMENT_TOK ^( 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"while(\"+$expression.text+\")\"] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1349:6: ^( ITERATION_STATEMENT_TOK ^( 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"while(\"+$expression.text+\")\"] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ITERATION_STATEMENT_TOK, "ITERATION_STATEMENT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1349:32: ^( 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[\"while(\"+$expression.text+\")\"] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_121.nextNode(), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, "while("+(expression338!=null?input.toString(expression338.start,expression338.stop):null)+")"));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1351:4: 'do' ( ':' DECIMAL_LITERAL )? condition_statement 'while' '(' expression ')' ';'
                    {
                    string_literal343=(Token)match(input,122,FOLLOW_122_in_iteration_statement3702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(string_literal343);

                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1351:9: ( ':' DECIMAL_LITERAL )?
                    int alt92=2;
                    alt92 = dfa92.predict(input);
                    switch (alt92) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1351:10: ':' DECIMAL_LITERAL
                            {
                            char_literal344=(Token)match(input,67,FOLLOW_67_in_iteration_statement3705); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_67.add(char_literal344);

                            DECIMAL_LITERAL345=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_iteration_statement3707); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DECIMAL_LITERAL.add(DECIMAL_LITERAL345);

                            if ( state.backtracking==0 ) {
                              ((nodes_scope)nodes_stack.peek()).node.loopBound=(DECIMAL_LITERAL345!=null?DECIMAL_LITERAL345.getText():null);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_condition_statement_in_iteration_statement3719);
                    condition_statement346=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement346.getTree());
                    string_literal347=(Token)match(input,121,FOLLOW_121_in_iteration_statement3721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(string_literal347);

                    char_literal348=(Token)match(input,47,FOLLOW_47_in_iteration_statement3723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal348);

                    pushFollow(FOLLOW_expression_in_iteration_statement3725);
                    expression349=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression349.getTree());
                    char_literal350=(Token)match(input,49,FOLLOW_49_in_iteration_statement3727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal350);

                    char_literal351=(Token)match(input,40,FOLLOW_40_in_iteration_statement3729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal351);

                    if ( state.backtracking==0 ) {

                      			sourceTemp = "while("+(expression349!=null?input.toString(expression349.start,expression349.stop):null)+");" ;
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="dowhile";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			}
                      		
                    }


                    // AST REWRITE
                    // elements: condition_statement, 122, 121
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1368:3: -> ^( ITERATION_STATEMENT_TOK ^( 'do' 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[ \"while(\"+$expression.text+\")\"] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1368:7: ^( ITERATION_STATEMENT_TOK ^( 'do' 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[ \"while(\"+$expression.text+\")\"] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ITERATION_STATEMENT_TOK, "ITERATION_STATEMENT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1368:33: ^( 'do' 'while' ID_TOK[\"\"+(ID)] SOURCE_TOK[ \"while(\"+$expression.text+\")\"] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_122.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_121.nextNode());
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, "while("+(expression349!=null?input.toString(expression349.start,expression349.stop):null)+")"));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1369:3: 'for' '(' (s1= expression )? ';' (s2= expression )? ';' (s3= expression )? ')' ( ':' DECIMAL_LITERAL )? condition_statement
                    {
                    string_literal352=(Token)match(input,123,FOLLOW_123_in_iteration_statement3762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal352);

                    char_literal353=(Token)match(input,47,FOLLOW_47_in_iteration_statement3764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_47.add(char_literal353);

                    if ( state.backtracking==0 ) {
                      localSourceTemp="for(";
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1369:39: (s1= expression )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( ((LA93_0>=DECIMAL_LITERAL && LA93_0<=IDENTIFIER)||(LA93_0>=HEX_LITERAL && LA93_0<=FLOATING_POINT_LITERAL)||LA93_0==47||LA93_0==73||(LA93_0>=75 && LA93_0<=76)||(LA93_0>=79 && LA93_0<=81)||(LA93_0>=84 && LA93_0<=86)) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1369:40: s1= expression
                            {
                            pushFollow(FOLLOW_expression_in_iteration_statement3771);
                            s1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(s1.getTree());
                            if ( state.backtracking==0 ) {
                              localSourceTemp+=(s1!=null?input.toString(s1.start,s1.stop):null);
                            }

                            }
                            break;

                    }

                    char_literal354=(Token)match(input,40,FOLLOW_40_in_iteration_statement3780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal354);

                    if ( state.backtracking==0 ) {
                      localSourceTemp+=";";
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1370:32: (s2= expression )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( ((LA94_0>=DECIMAL_LITERAL && LA94_0<=IDENTIFIER)||(LA94_0>=HEX_LITERAL && LA94_0<=FLOATING_POINT_LITERAL)||LA94_0==47||LA94_0==73||(LA94_0>=75 && LA94_0<=76)||(LA94_0>=79 && LA94_0<=81)||(LA94_0>=84 && LA94_0<=86)) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1371:12: s2= expression
                            {
                            if ( state.backtracking==0 ) {

                              												if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==0) {
                              													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                              												}
                              											
                            }
                            pushFollow(FOLLOW_expression_in_iteration_statement3800);
                            s2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(s2.getTree());
                            if ( state.backtracking==0 ) {
                              localSourceTemp+=(s2!=null?input.toString(s2.start,s2.stop):null);
                            }

                            }
                            break;

                    }

                    char_literal355=(Token)match(input,40,FOLLOW_40_in_iteration_statement3810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_40.add(char_literal355);

                    if ( state.backtracking==0 ) {
                      localSourceTemp+=";";
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1376:32: (s3= expression )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=DECIMAL_LITERAL && LA95_0<=IDENTIFIER)||(LA95_0>=HEX_LITERAL && LA95_0<=FLOATING_POINT_LITERAL)||LA95_0==47||LA95_0==73||(LA95_0>=75 && LA95_0<=76)||(LA95_0>=79 && LA95_0<=81)||(LA95_0>=84 && LA95_0<=86)) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1377:12: s3= expression
                            {
                            if ( state.backtracking==0 ) {

                              												if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==0) {
                              													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                              													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                              												}else if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==1) {
                              													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                              												}
                              											
                            }
                            pushFollow(FOLLOW_expression_in_iteration_statement3842);
                            s3=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(s3.getTree());
                            if ( state.backtracking==0 ) {
                              localSourceTemp+=(s3!=null?input.toString(s3.start,s3.stop):null);
                            }

                            }
                            break;

                    }

                    char_literal356=(Token)match(input,49,FOLLOW_49_in_iteration_statement3851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_49.add(char_literal356);

                    if ( state.backtracking==0 ) {

                      				localSourceTemp+=")";
                      												if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==0) {
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      												}else if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==1) {
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      												}else if (((nodes_scope)nodes_stack.peek()).node.assignmentExpression.size()==2) {
                      													((nodes_scope)nodes_stack.peek()).node.assignmentExpression.add("");
                      												}
                      			
                      			
                      			
                    }
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1403:4: ( ':' DECIMAL_LITERAL )?
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1403:5: ':' DECIMAL_LITERAL
                            {
                            char_literal357=(Token)match(input,67,FOLLOW_67_in_iteration_statement3868); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_67.add(char_literal357);

                            DECIMAL_LITERAL358=(Token)match(input,DECIMAL_LITERAL,FOLLOW_DECIMAL_LITERAL_in_iteration_statement3870); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DECIMAL_LITERAL.add(DECIMAL_LITERAL358);

                            if ( state.backtracking==0 ) {
                              ((nodes_scope)nodes_stack.peek()).node.loopBound=(DECIMAL_LITERAL358!=null?DECIMAL_LITERAL358.getText():null);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      			sourceTemp = localSourceTemp;
                      			ID = idCount++;
                      			((nodes_scope)nodes_stack.peek()).node.ID=ID;
                      			((nodes_scope)nodes_stack.peek()).node.line= lineNo;
                      			((nodes_scope)nodes_stack.peek()).node.funcScopeID=scopeFuncCount;
                      			((nodes_scope)nodes_stack.peek()).node.scopeID=currentScope;
                      			((nodes_scope)nodes_stack.peek()).node.sourceCode = sourceTemp;
                      			((nodes_scope)nodes_stack.peek()).node.type="for";	
                      			nodesTable.put(ID,((nodes_scope)nodes_stack.peek()).node);
                      			if (debug > 0) {
                      				System.out.println(nodesTable.get(ID));
                      			} 
                      		
                    }
                    pushFollow(FOLLOW_condition_statement_in_iteration_statement3886);
                    condition_statement359=condition_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_statement.add(condition_statement359.getTree());


                    // AST REWRITE
                    // elements: condition_statement, 123
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1421:24: -> ^( ITERATION_STATEMENT_TOK ^( 'for' ID_TOK[\"\"+(ID)] SOURCE_TOK[localSourceTemp] ) condition_statement )
                    {
                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1421:27: ^( ITERATION_STATEMENT_TOK ^( 'for' ID_TOK[\"\"+(ID)] SOURCE_TOK[localSourceTemp] ) condition_statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ITERATION_STATEMENT_TOK, "ITERATION_STATEMENT_TOK"), root_1);

                        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1421:53: ^( 'for' ID_TOK[\"\"+(ID)] SOURCE_TOK[localSourceTemp] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_123.nextNode(), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(ID_TOK, ""+(ID)));
                        adaptor.addChild(root_2, (CommonTree)adaptor.create(SOURCE_TOK, localSourceTemp));

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_condition_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {


            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, iteration_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"

    public static class jump_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jump_statement"
    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1424:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
    public final PretCParser.jump_statement_return jump_statement() throws RecognitionException {
        PretCParser.jump_statement_return retval = new PretCParser.jump_statement_return();
        retval.start = input.LT(1);
        int jump_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal360=null;
        Token IDENTIFIER361=null;
        Token char_literal362=null;
        Token string_literal363=null;
        Token char_literal364=null;
        Token string_literal365=null;
        Token char_literal366=null;
        Token string_literal367=null;
        Token char_literal368=null;
        Token string_literal369=null;
        Token char_literal371=null;
        PretCParser.expression_return expression370 = null;


        CommonTree string_literal360_tree=null;
        CommonTree IDENTIFIER361_tree=null;
        CommonTree char_literal362_tree=null;
        CommonTree string_literal363_tree=null;
        CommonTree char_literal364_tree=null;
        CommonTree string_literal365_tree=null;
        CommonTree char_literal366_tree=null;
        CommonTree string_literal367_tree=null;
        CommonTree char_literal368_tree=null;
        CommonTree string_literal369_tree=null;
        CommonTree char_literal371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1425:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
            int alt98=5;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1425:4: 'goto' IDENTIFIER ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal360=(Token)match(input,124,FOLLOW_124_in_jump_statement3916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal360_tree = (CommonTree)adaptor.create(string_literal360);
                    adaptor.addChild(root_0, string_literal360_tree);
                    }
                    IDENTIFIER361=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_jump_statement3918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER361_tree = (CommonTree)adaptor.create(IDENTIFIER361);
                    adaptor.addChild(root_0, IDENTIFIER361_tree);
                    }
                    char_literal362=(Token)match(input,40,FOLLOW_40_in_jump_statement3920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal362_tree = (CommonTree)adaptor.create(char_literal362);
                    adaptor.addChild(root_0, char_literal362_tree);
                    }
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.name.add((IDENTIFIER361!=null?IDENTIFIER361.getText():null));
                      			((nodes_scope)nodes_stack.peek()).node.type="goto";	
                      		
                    }

                    }
                    break;
                case 2 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1430:4: 'continue' ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal363=(Token)match(input,125,FOLLOW_125_in_jump_statement3930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal363_tree = (CommonTree)adaptor.create(string_literal363);
                    adaptor.addChild(root_0, string_literal363_tree);
                    }
                    char_literal364=(Token)match(input,40,FOLLOW_40_in_jump_statement3932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal364_tree = (CommonTree)adaptor.create(char_literal364);
                    adaptor.addChild(root_0, char_literal364_tree);
                    }
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.type="continue";	
                      		
                    }

                    }
                    break;
                case 3 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1434:4: 'break' ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal365=(Token)match(input,126,FOLLOW_126_in_jump_statement3941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal365_tree = (CommonTree)adaptor.create(string_literal365);
                    adaptor.addChild(root_0, string_literal365_tree);
                    }
                    char_literal366=(Token)match(input,40,FOLLOW_40_in_jump_statement3943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal366_tree = (CommonTree)adaptor.create(char_literal366);
                    adaptor.addChild(root_0, char_literal366_tree);
                    }
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.type="break";	
                      		
                    }

                    }
                    break;
                case 4 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1438:4: 'return' ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal367=(Token)match(input,127,FOLLOW_127_in_jump_statement3952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal367_tree = (CommonTree)adaptor.create(string_literal367);
                    adaptor.addChild(root_0, string_literal367_tree);
                    }
                    char_literal368=(Token)match(input,40,FOLLOW_40_in_jump_statement3954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal368_tree = (CommonTree)adaptor.create(char_literal368);
                    adaptor.addChild(root_0, char_literal368_tree);
                    }
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.type="return";	
                      		
                    }

                    }
                    break;
                case 5 :
                    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1442:4: 'return' expression ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal369=(Token)match(input,127,FOLLOW_127_in_jump_statement3963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal369_tree = (CommonTree)adaptor.create(string_literal369);
                    adaptor.addChild(root_0, string_literal369_tree);
                    }
                    pushFollow(FOLLOW_expression_in_jump_statement3965);
                    expression370=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression370.getTree());
                    char_literal371=(Token)match(input,40,FOLLOW_40_in_jump_statement3967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal371_tree = (CommonTree)adaptor.create(char_literal371);
                    adaptor.addChild(root_0, char_literal371_tree);
                    }
                    if ( state.backtracking==0 ) {

                      			((nodes_scope)nodes_stack.peek()).node.constantStatement.get(((nodes_scope)nodes_stack.peek()).node.constantStatement.size()-1).add((expression370!=null?input.toString(expression370.start,expression370.stop):null));
                      			((nodes_scope)nodes_stack.peek()).node.type="return2";	
                      		
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e) {
        	    if (errorReported == false) {
        			System.out.println("Error on \""+input.LT(1).getText()+"\"");
        			System.out.println("Line: "+input.LT(1).getLine());
        			errorReported = true;
        		}
        	    throw e;
        	}  
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, jump_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jump_statement"

    // $ANTLR start synpred2_PretC
    public final void synpred2_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:6: ( declaration_specifiers )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:6: declaration_specifiers
        {
        pushFollow(FOLLOW_declaration_specifiers_in_synpred2_PretC288);
        declaration_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_PretC

    // $ANTLR start synpred4_PretC
    public final void synpred4_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:6: ( declaration_specifiers )? declarator ( declaration )* '{'
        {
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:6: ( declaration_specifiers )?
        int alt99=2;
        alt99 = dfa99.predict(input);
        switch (alt99) {
            case 1 :
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declaration_specifiers
                {
                pushFollow(FOLLOW_declaration_specifiers_in_synpred4_PretC288);
                declaration_specifiers();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_declarator_in_synpred4_PretC291);
        declarator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:236:41: ( declaration )*
        loop100:
        do {
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
        	case 1 :
        	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: declaration
        	    {
        	    pushFollow(FOLLOW_declaration_in_synpred4_PretC293);
        	    declaration();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop100;
            }
        } while (true);

        match(input,63,FOLLOW_63_in_synpred4_PretC296); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_PretC

    // $ANTLR start synpred5_PretC
    public final void synpred5_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:237:4: ( declaration )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:237:4: declaration
        {
        pushFollow(FOLLOW_declaration_in_synpred5_PretC308);
        declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_PretC

    // $ANTLR start synpred13_PretC
    public final void synpred13_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:356:4: ( declaration_specifiers )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:356:4: declaration_specifiers
        {
        pushFollow(FOLLOW_declaration_specifiers_in_synpred13_PretC539);
        declaration_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_PretC

    // $ANTLR start synpred16_PretC
    public final void synpred16_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:406:45: ( declaration_specifiers )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:406:45: declaration_specifiers
        {
        pushFollow(FOLLOW_declaration_specifiers_in_synpred16_PretC645);
        declaration_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_PretC

    // $ANTLR start synpred51_PretC
    public final void synpred51_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:59: ( type_specifier )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:649:59: type_specifier
        {
        pushFollow(FOLLOW_type_specifier_in_synpred51_PretC1279);
        type_specifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_PretC

    // $ANTLR start synpred62_PretC
    public final void synpred62_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:4: ( ( pointer )? direct_declarator )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:4: ( pointer )? direct_declarator
        {
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:695:4: ( pointer )?
        int alt113=2;
        int LA113_0 = input.LA(1);

        if ( (LA113_0==73) ) {
            alt113=1;
        }
        switch (alt113) {
            case 1 :
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: pointer
                {
                pushFollow(FOLLOW_pointer_in_synpred62_PretC1453);
                pointer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_direct_declarator_in_synpred62_PretC1456);
        direct_declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_PretC

    // $ANTLR start synpred63_PretC
    public final void synpred63_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:708:4: ( declarator_suffix )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:708:4: declarator_suffix
        {
        pushFollow(FOLLOW_declarator_suffix_in_synpred63_PretC1486);
        declarator_suffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_PretC

    // $ANTLR start synpred65_PretC
    public final void synpred65_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:711:22: ( declarator_suffix )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:711:22: declarator_suffix
        {
        pushFollow(FOLLOW_declarator_suffix_in_synpred65_PretC1511);
        declarator_suffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_PretC

    // $ANTLR start synpred68_PretC
    public final void synpred68_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:717:9: ( '(' parameter_type_list ')' )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:717:9: '(' parameter_type_list ')'
        {
        match(input,47,FOLLOW_47_in_synpred68_PretC1562); if (state.failed) return ;
        pushFollow(FOLLOW_parameter_type_list_in_synpred68_PretC1564);
        parameter_type_list();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred68_PretC1566); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_PretC

    // $ANTLR start synpred69_PretC
    public final void synpred69_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:718:9: ( '(' identifier_list ')' )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:718:9: '(' identifier_list ')'
        {
        match(input,47,FOLLOW_47_in_synpred69_PretC1576); if (state.failed) return ;
        pushFollow(FOLLOW_identifier_list_in_synpred69_PretC1578);
        identifier_list();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred69_PretC1580); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_PretC

    // $ANTLR start synpred70_PretC
    public final void synpred70_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:8: ( type_qualifier )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:8: type_qualifier
        {
        pushFollow(FOLLOW_type_qualifier_in_synpred70_PretC1605);
        type_qualifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_PretC

    // $ANTLR start synpred71_PretC
    public final void synpred71_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:24: ( pointer )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:24: pointer
        {
        pushFollow(FOLLOW_pointer_in_synpred71_PretC1608);
        pointer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_PretC

    // $ANTLR start synpred72_PretC
    public final void synpred72_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:4: ( '*' ( type_qualifier )+ ( pointer )? )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:4: '*' ( type_qualifier )+ ( pointer )?
        {
        match(input,73,FOLLOW_73_in_synpred72_PretC1603); if (state.failed) return ;
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:8: ( type_qualifier )+
        int cnt115=0;
        loop115:
        do {
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=69 && LA115_0<=70)) ) {
                alt115=1;
            }


            switch (alt115) {
        	case 1 :
        	    // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: type_qualifier
        	    {
        	    pushFollow(FOLLOW_type_qualifier_in_synpred72_PretC1605);
        	    type_qualifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt115 >= 1 ) break loop115;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(115, input);
                    throw eee;
            }
            cnt115++;
        } while (true);

        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:723:24: ( pointer )?
        int alt116=2;
        int LA116_0 = input.LA(1);

        if ( (LA116_0==73) ) {
            alt116=1;
        }
        switch (alt116) {
            case 1 :
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: pointer
                {
                pushFollow(FOLLOW_pointer_in_synpred72_PretC1608);
                pointer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred72_PretC

    // $ANTLR start synpred73_PretC
    public final void synpred73_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:724:4: ( '*' pointer )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:724:4: '*' pointer
        {
        match(input,73,FOLLOW_73_in_synpred73_PretC1614); if (state.failed) return ;
        pushFollow(FOLLOW_pointer_in_synpred73_PretC1616);
        pointer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_PretC

    // $ANTLR start synpred76_PretC
    public final void synpred76_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:760:6: ( declarator )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:760:6: declarator
        {
        pushFollow(FOLLOW_declarator_in_synpred76_PretC1719);
        declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_PretC

    // $ANTLR start synpred77_PretC
    public final void synpred77_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:770:6: ( abstract_declarator )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:770:6: abstract_declarator
        {
        pushFollow(FOLLOW_abstract_declarator_in_synpred77_PretC1729);
        abstract_declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_PretC

    // $ANTLR start synpred81_PretC
    public final void synpred81_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:796:12: ( direct_abstract_declarator )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:796:12: direct_abstract_declarator
        {
        pushFollow(FOLLOW_direct_abstract_declarator_in_synpred81_PretC1829);
        direct_abstract_declarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_PretC

    // $ANTLR start synpred84_PretC
    public final void synpred84_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:65: ( abstract_declarator_suffix )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:801:65: abstract_declarator_suffix
        {
        pushFollow(FOLLOW_abstract_declarator_suffix_in_synpred84_PretC1860);
        abstract_declarator_suffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_PretC

    // $ANTLR start synpred97_PretC
    public final void synpred97_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:835:4: ( '(' type_name ')' cast_expression )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:835:4: '(' type_name ')' cast_expression
        {
        match(input,47,FOLLOW_47_in_synpred97_PretC2032); if (state.failed) return ;
        pushFollow(FOLLOW_type_name_in_synpred97_PretC2034);
        type_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred97_PretC2036); if (state.failed) return ;
        pushFollow(FOLLOW_cast_expression_in_synpred97_PretC2038);
        cast_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_PretC

    // $ANTLR start synpred102_PretC
    public final void synpred102_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:850:4: ( 'sizeof' unary_expression )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:850:4: 'sizeof' unary_expression
        {
        match(input,81,FOLLOW_81_in_synpred102_PretC2088); if (state.failed) return ;
        pushFollow(FOLLOW_unary_expression_in_synpred102_PretC2090);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_PretC

    // $ANTLR start synpred123_PretC
    public final void synpred123_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:901:4: ( lvalue assignment_operator assignment_expression )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:901:4: lvalue assignment_operator assignment_expression
        {
        pushFollow(FOLLOW_lvalue_in_synpred123_PretC2430);
        lvalue();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignment_operator_in_synpred123_PretC2432);
        assignment_operator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignment_expression_in_synpred123_PretC2434);
        assignment_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_PretC

    // $ANTLR start synpred158_PretC
    public final void synpred158_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1067:4: ( '{' '}' )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1067:4: '{' '}'
        {
        match(input,63,FOLLOW_63_in_synpred158_PretC2928); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred158_PretC2938); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_PretC

    // $ANTLR start synpred159_PretC
    public final void synpred159_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:9: ( compound_statement )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:9: compound_statement
        {
        pushFollow(FOLLOW_compound_statement_in_synpred159_PretC3004);
        compound_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_PretC

    // $ANTLR start synpred160_PretC
    public final void synpred160_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:4: ( '{' ( compound_statement )? '}' )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:5: '{' ( compound_statement )? '}'
        {
        match(input,63,FOLLOW_63_in_synpred160_PretC3002); if (state.failed) return ;
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1089:9: ( compound_statement )?
        int alt118=2;
        alt118 = dfa118.predict(input);
        switch (alt118) {
            case 1 :
                // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:0:0: compound_statement
                {
                pushFollow(FOLLOW_compound_statement_in_synpred160_PretC3004);
                compound_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,64,FOLLOW_64_in_synpred160_PretC3007); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_PretC

    // $ANTLR start synpred161_PretC
    public final void synpred161_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:127: ( declaration )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1090:127: declaration
        {
        pushFollow(FOLLOW_declaration_in_synpred161_PretC3018);
        declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_PretC

    // $ANTLR start synpred162_PretC
    public final void synpred162_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:5: ( declaration )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:5: declaration
        {
        pushFollow(FOLLOW_declaration_in_synpred162_PretC3066);
        declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_PretC

    // $ANTLR start synpred163_PretC
    public final void synpred163_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:17: ( statement_list )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1098:17: statement_list
        {
        pushFollow(FOLLOW_statement_list_in_synpred163_PretC3068);
        statement_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_PretC

    // $ANTLR start synpred164_PretC
    public final void synpred164_PretC_fragment() throws RecognitionException {   
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1102:4: ( statement )
        // C:\\Users\\Canto\\Desktop\\My Dropbox\\my projects\\PRET-C\\PRET C Compilier\\PretC.g:1102:4: statement
        {
        pushFollow(FOLLOW_statement_in_synpred164_PretC3083);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_PretC

    // Delegated rules

    public final boolean synpred62_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_PretC() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_PretC_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA118 dfa118 = new DFA118(this);
    static final String DFA1_eotS =
        "\30\uffff";
    static final String DFA1_eofS =
        "\1\1\27\uffff";
    static final String DFA1_minS =
        "\1\25\27\uffff";
    static final String DFA1_maxS =
        "\1\111\27\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\2\1\1\25\uffff";
    static final String DFA1_specialS =
        "\30\uffff}>";
    static final String[] DFA1_transitionS = {
            "\2\2\20\uffff\1\2\1\uffff\1\2\4\uffff\3\2\1\uffff\15\2\2\uffff"+
            "\2\2\1\uffff\3\2\2\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "()+ loopback of 208:4: ( external_declaration )+";
        }
    }
    static final String DFA2_eotS =
        "\27\uffff";
    static final String DFA2_eofS =
        "\27\uffff";
    static final String DFA2_minS =
        "\1\25\17\0\7\uffff";
    static final String DFA2_maxS =
        "\1\111\17\0\7\uffff";
    static final String DFA2_acceptS =
        "\20\uffff\2\1\1\2\1\uffff\1\3\1\4\1\5";
    static final String DFA2_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
        "\1\16\1\17\7\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\17\1\22\20\uffff\1\24\1\uffff\1\25\4\uffff\1\26\1\21\1\3"+
            "\1\uffff\1\22\4\1\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff"+
            "\1\14\1\15\1\uffff\1\16\2\2\2\uffff\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "211:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration -> ^( GLOBAL_DECLARATION_TOK declaration ) | 'ReactiveInput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveInput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | 'ReactiveOutput' declaration_specifiers reactive_declarator ';' -> ^( 'ReactiveOutput' ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | thread_definition );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA2_0>=51 && LA2_0<=54)) ) {s = 1;}

                        else if ( ((LA2_0>=69 && LA2_0<=70)) ) {s = 2;}

                        else if ( (LA2_0==48) ) {s = 3;}

                        else if ( (LA2_0==55) ) {s = 4;}

                        else if ( (LA2_0==56) ) {s = 5;}

                        else if ( (LA2_0==57) ) {s = 6;}

                        else if ( (LA2_0==58) ) {s = 7;}

                        else if ( (LA2_0==59) ) {s = 8;}

                        else if ( (LA2_0==60) ) {s = 9;}

                        else if ( (LA2_0==61) ) {s = 10;}

                        else if ( (LA2_0==62) ) {s = 11;}

                        else if ( (LA2_0==65) ) {s = 12;}

                        else if ( (LA2_0==66) ) {s = 13;}

                        else if ( (LA2_0==68) ) {s = 14;}

                        else if ( (LA2_0==IDENTIFIER) ) {s = 15;}

                        else if ( (LA2_0==73) && (synpred4_PretC())) {s = 16;}

                        else if ( (LA2_0==47) && (synpred4_PretC())) {s = 17;}

                        else if ( (LA2_0==LINE_COMMAND||LA2_0==50) ) {s = 18;}

                        else if ( (LA2_0==39) ) {s = 20;}

                        else if ( (LA2_0==41) ) {s = 21;}

                        else if ( (LA2_0==46) ) {s = 22;}

                         
                        input.seek(index2_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_PretC()) ) {s = 17;}

                        else if ( (synpred5_PretC()) ) {s = 18;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_PretC()||(synpred4_PretC()&&(isTypeName(input.LT(1).getText()))))) ) {s = 17;}

                        else if ( ((synpred5_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 18;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\47\uffff";
    static final String DFA8_eofS =
        "\47\uffff";
    static final String DFA8_minS =
        "\1\25\16\uffff\1\25\3\uffff\1\0\17\uffff\1\0\3\uffff";
    static final String DFA8_maxS =
        "\1\111\16\uffff\1\111\3\uffff\1\0\17\uffff\1\0\3\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\1\16\uffff\1\2\26\uffff";
    static final String DFA8_specialS =
        "\23\uffff\1\0\17\uffff\1\1\3\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\17\31\uffff\1\20\1\1\2\uffff\14\1\2\uffff\2\1\1\uffff\3"+
            "\1\2\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43\1\20\30\uffff\1\23\1\20\1\uffff\16\20\1\uffff\2\20\1"+
            "\uffff\4\20\1\uffff\1\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "356:4: ( declaration_specifiers )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred13_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_35 = input.LA(1);

                         
                        int index8_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred13_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index8_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\23\uffff";
    static final String DFA10_eofS =
        "\23\uffff";
    static final String DFA10_minS =
        "\1\25\22\uffff";
    static final String DFA10_maxS =
        "\1\106\22\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA10_specialS =
        "\23\uffff}>";
    static final String[] DFA10_transitionS = {
            "\2\1\31\uffff\1\1\1\uffff\15\1\1\22\1\uffff\2\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "364:3: ( ( declaration )+ scope_statement | scope_statement )";
        }
    }
    static final String DFA9_eotS =
        "\23\uffff";
    static final String DFA9_eofS =
        "\23\uffff";
    static final String DFA9_minS =
        "\1\25\22\uffff";
    static final String DFA9_maxS =
        "\1\106\22\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\1\1\20\uffff";
    static final String DFA9_specialS =
        "\23\uffff}>";
    static final String[] DFA9_transitionS = {
            "\2\2\31\uffff\1\2\1\uffff\15\2\1\1\1\uffff\2\2\1\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()+ loopback of 364:5: ( declaration )+";
        }
    }
    static final String DFA13_eotS =
        "\22\uffff";
    static final String DFA13_eofS =
        "\22\uffff";
    static final String DFA13_minS =
        "\1\25\21\uffff";
    static final String DFA13_maxS =
        "\1\106\21\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\1\1\2\16\uffff\1\3";
    static final String DFA13_specialS =
        "\22\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\2\1\21\31\uffff\1\2\1\uffff\1\1\14\2\2\uffff\2\2\1\uffff"+
            "\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "393:1: declaration : ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' -> ^( TYPE_DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | declaration_specifiers ( init_declarator_list )? ';' -> ^( DECLARATION_TOK ID_TOK[\"\"+ID] SOURCE_TOK[sourceTemp] ) | LINE_COMMAND -> PREPROC_TOK[$LINE_COMMAND.text] );";
        }
    }
    static final String DFA11_eotS =
        "\32\uffff";
    static final String DFA11_eofS =
        "\32\uffff";
    static final String DFA11_minS =
        "\1\25\16\uffff\1\25\4\uffff\1\0\5\uffff";
    static final String DFA11_maxS =
        "\1\111\16\uffff\1\111\4\uffff\1\0\5\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\1\16\uffff\1\2\11\uffff";
    static final String DFA11_specialS =
        "\24\uffff\1\0\5\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\17\31\uffff\1\20\1\1\2\uffff\14\1\2\uffff\2\1\1\uffff\3"+
            "\1\2\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\22\uffff\1\20\1\uffff\3\20\2\uffff\1\24\27\uffff\1\20"+
            "\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "406:45: ( declaration_specifiers )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_20 = input.LA(1);

                         
                        int index11_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred16_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index11_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\20\uffff";
    static final String DFA14_eofS =
        "\20\uffff";
    static final String DFA14_minS =
        "\1\25\17\uffff";
    static final String DFA14_maxS =
        "\1\106\17\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA14_specialS =
        "\20\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\1\32\uffff\1\1\2\uffff\4\16\10\1\2\uffff\2\1\1\uffff\1\1"+
            "\2\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 472:6: ( storage_class_specifier | type_qualifier )*";
        }
    }
    static final String DFA22_eotS =
        "\26\uffff";
    static final String DFA22_eofS =
        "\26\uffff";
    static final String DFA22_minS =
        "\1\25\1\uffff\2\71\22\uffff";
    static final String DFA22_maxS =
        "\1\104\1\uffff\2\74\22\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11"+
        "\1\12\10\uffff";
    static final String DFA22_specialS =
        "\26\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\15\32\uffff\1\1\6\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
            "\2\uffff\2\12\1\uffff\1\14",
            "",
            "\1\4\1\5\1\6\1\7",
            "\1\4\1\5\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "515:1: type_specifier : ( 'void' | ( 'unsigned' | 'signed' )? 'char' | ( 'unsigned' | 'signed' )? 'short' | ( 'unsigned' | 'signed' )? 'int' | ( 'unsigned' | 'signed' )? 'long' | 'float' | 'double' | struct_or_union_specifier | enum_specifier | type_id );";
        }
    }
    static final String DFA24_eotS =
        "\67\uffff";
    static final String DFA24_eofS =
        "\3\uffff\1\10\1\uffff\1\10\61\uffff";
    static final String DFA24_minS =
        "\1\101\3\25\1\uffff\1\25\61\uffff";
    static final String DFA24_maxS =
        "\1\102\2\77\1\111\1\uffff\1\111\61\uffff";
    static final String DFA24_acceptS =
        "\4\uffff\1\1\3\uffff\1\2\56\uffff";
    static final String DFA24_specialS =
        "\67\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\1\1\2",
            "\1\3\51\uffff\1\4",
            "\1\5\51\uffff\1\4",
            "\1\10\22\uffff\1\10\2\uffff\2\10\2\uffff\3\10\5\uffff\10\10"+
            "\1\4\1\uffff\7\10\1\uffff\1\10",
            "",
            "\1\10\22\uffff\1\10\2\uffff\2\10\2\uffff\3\10\5\uffff\10\10"+
            "\1\4\1\uffff\7\10\1\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "578:1: struct_or_union_specifier returns [String typeTemp, StatementNode n, String structTypeName] options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );";
        }
    }
    static final String DFA26_eotS =
        "\20\uffff";
    static final String DFA26_eofS =
        "\20\uffff";
    static final String DFA26_minS =
        "\1\25\17\uffff";
    static final String DFA26_maxS =
        "\1\106\17\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\1\1\15\uffff";
    static final String DFA26_specialS =
        "\20\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\2\32\uffff\1\2\6\uffff\10\2\1\uffff\1\1\2\2\1\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 627:25: ( struct_declaration )*";
        }
    }
    static final String DFA28_eotS =
        "\53\uffff";
    static final String DFA28_eofS =
        "\53\uffff";
    static final String DFA28_minS =
        "\1\25\1\uffff\1\0\50\uffff";
    static final String DFA28_maxS =
        "\1\111\1\uffff\1\0\50\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\3\6\uffff\1\1\1\2\41\uffff";
    static final String DFA28_specialS =
        "\2\uffff\1\0\50\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\2\22\uffff\1\1\6\uffff\1\1\1\11\1\1\5\uffff\10\11\2\uffff"+
            "\2\11\1\1\1\11\2\10\1\1\1\uffff\1\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "()+ loopback of 649:4: ( type_qualifier | type_specifier )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred51_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\34\uffff";
    static final String DFA33_eofS =
        "\3\uffff\1\5\30\uffff";
    static final String DFA33_minS =
        "\1\104\1\25\1\uffff\1\25\30\uffff";
    static final String DFA33_maxS =
        "\1\104\1\77\1\uffff\1\111\30\uffff";
    static final String DFA33_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\3\26\uffff";
    static final String DFA33_specialS =
        "\34\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\1",
            "\1\3\51\uffff\1\2",
            "",
            "\1\5\22\uffff\1\5\2\uffff\2\5\2\uffff\3\5\5\uffff\10\5\1\4"+
            "\1\uffff\7\5\1\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "674:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );";
        }
    }
    static final String DFA37_eotS =
        "\41\uffff";
    static final String DFA37_eofS =
        "\41\uffff";
    static final String DFA37_minS =
        "\1\25\1\0\37\uffff";
    static final String DFA37_maxS =
        "\1\111\1\0\37\uffff";
    static final String DFA37_acceptS =
        "\2\uffff\1\1\35\uffff\1\2";
    static final String DFA37_specialS =
        "\1\uffff\1\0\37\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\2\31\uffff\1\2\31\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "694:1: declarator : ( ( pointer )? direct_declarator | pointer );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_PretC()) ) {s = 2;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\71\uffff";
    static final String DFA38_eofS =
        "\1\1\70\uffff";
    static final String DFA38_minS =
        "\1\25\32\uffff\1\25\1\24\2\0\3\uffff\26\0\1\uffff";
    static final String DFA38_maxS =
        "\1\111\32\uffff\1\111\1\126\2\0\3\uffff\26\0\1\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\2\66\uffff\1\1";
    static final String DFA38_specialS =
        "\35\uffff\1\0\1\1\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\uffff}>";
    static final String[] DFA38_transitionS = {
            "\2\1\21\uffff\1\1\1\uffff\3\1\2\uffff\1\33\20\1\1\uffff\6\1"+
            "\1\34\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36\31\uffff\1\1\1\44\1\35\1\uffff\4\42\1\45\1\46\1\47\1"+
            "\50\1\51\1\52\1\53\1\54\2\uffff\1\55\1\56\1\uffff\1\57\2\43"+
            "\1\1\1\uffff\1\1",
            "\1\63\1\62\1\uffff\5\63\23\uffff\1\61\30\uffff\1\60\1\66\1"+
            "\uffff\2\66\2\uffff\1\64\1\65\1\67\2\uffff\3\66",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 708:4: ( declarator_suffix )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_29 = input.LA(1);

                         
                        int index38_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_30 = input.LA(1);

                         
                        int index38_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_30);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_34 = input.LA(1);

                         
                        int index38_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_34);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA38_35 = input.LA(1);

                         
                        int index38_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_35);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA38_36 = input.LA(1);

                         
                        int index38_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_36);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA38_37 = input.LA(1);

                         
                        int index38_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_37);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA38_38 = input.LA(1);

                         
                        int index38_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA38_39 = input.LA(1);

                         
                        int index38_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA38_40 = input.LA(1);

                         
                        int index38_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_40);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA38_41 = input.LA(1);

                         
                        int index38_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA38_42 = input.LA(1);

                         
                        int index38_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA38_43 = input.LA(1);

                         
                        int index38_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA38_44 = input.LA(1);

                         
                        int index38_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA38_45 = input.LA(1);

                         
                        int index38_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA38_46 = input.LA(1);

                         
                        int index38_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_46);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA38_47 = input.LA(1);

                         
                        int index38_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_47);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA38_48 = input.LA(1);

                         
                        int index38_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_48);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA38_49 = input.LA(1);

                         
                        int index38_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_49);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA38_50 = input.LA(1);

                         
                        int index38_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_50);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA38_51 = input.LA(1);

                         
                        int index38_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_51);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA38_52 = input.LA(1);

                         
                        int index38_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_52);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA38_53 = input.LA(1);

                         
                        int index38_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_53);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA38_54 = input.LA(1);

                         
                        int index38_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_54);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA38_55 = input.LA(1);

                         
                        int index38_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_55);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\71\uffff";
    static final String DFA39_eofS =
        "\1\1\70\uffff";
    static final String DFA39_minS =
        "\1\25\32\uffff\1\25\1\24\2\0\3\uffff\26\0\1\uffff";
    static final String DFA39_maxS =
        "\1\111\32\uffff\1\111\1\126\2\0\3\uffff\26\0\1\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\66\uffff\1\1";
    static final String DFA39_specialS =
        "\35\uffff\1\0\1\1\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\uffff}>";
    static final String[] DFA39_transitionS = {
            "\2\1\21\uffff\1\1\1\uffff\3\1\2\uffff\1\33\20\1\1\uffff\6\1"+
            "\1\34\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36\31\uffff\1\1\1\44\1\35\1\uffff\4\42\1\45\1\46\1\47\1"+
            "\50\1\51\1\52\1\53\1\54\2\uffff\1\55\1\56\1\uffff\1\57\2\43"+
            "\1\1\1\uffff\1\1",
            "\1\63\1\62\1\uffff\5\63\23\uffff\1\61\30\uffff\1\60\1\66\1"+
            "\uffff\2\66\2\uffff\1\64\1\65\1\67\2\uffff\3\66",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()* loopback of 711:22: ( declarator_suffix )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_36 = input.LA(1);

                         
                        int index39_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_36);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_37 = input.LA(1);

                         
                        int index39_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_37);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_39 = input.LA(1);

                         
                        int index39_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_41 = input.LA(1);

                         
                        int index39_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_42 = input.LA(1);

                         
                        int index39_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_43 = input.LA(1);

                         
                        int index39_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_44 = input.LA(1);

                         
                        int index39_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_45 = input.LA(1);

                         
                        int index39_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_46 = input.LA(1);

                         
                        int index39_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_46);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_47 = input.LA(1);

                         
                        int index39_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_47);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_48 = input.LA(1);

                         
                        int index39_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_48);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_49 = input.LA(1);

                         
                        int index39_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_49);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_50 = input.LA(1);

                         
                        int index39_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_50);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_51 = input.LA(1);

                         
                        int index39_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_51);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_52 = input.LA(1);

                         
                        int index39_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_52);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_53 = input.LA(1);

                         
                        int index39_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_53);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_54 = input.LA(1);

                         
                        int index39_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_54);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_55 = input.LA(1);

                         
                        int index39_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_PretC()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_55);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\34\uffff";
    static final String DFA41_eofS =
        "\34\uffff";
    static final String DFA41_minS =
        "\1\57\1\24\1\25\27\uffff\1\0\1\uffff";
    static final String DFA41_maxS =
        "\1\107\1\126\1\106\27\uffff\1\0\1\uffff";
    static final String DFA41_acceptS =
        "\3\uffff\1\2\1\1\6\uffff\1\5\1\3\16\uffff\1\4";
    static final String DFA41_specialS =
        "\32\uffff\1\0\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\2\27\uffff\1\1",
            "\2\4\1\uffff\5\4\23\uffff\1\4\30\uffff\1\3\1\4\1\uffff\2\4"+
            "\2\uffff\3\4\2\uffff\3\4",
            "\1\32\32\uffff\1\14\1\13\1\uffff\14\14\2\uffff\2\14\1\uffff"+
            "\3\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "714:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_26 = input.LA(1);

                         
                        int index41_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_PretC()) ) {s = 12;}

                        else if ( (synpred69_PretC()) ) {s = 27;}

                         
                        input.seek(index41_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\40\uffff";
    static final String DFA44_eofS =
        "\1\uffff\1\2\36\uffff";
    static final String DFA44_minS =
        "\1\111\1\25\10\uffff\1\0\21\uffff\1\0\3\uffff";
    static final String DFA44_maxS =
        "\2\111\10\uffff\1\0\21\uffff\1\0\3\uffff";
    static final String DFA44_acceptS =
        "\2\uffff\1\3\33\uffff\1\1\1\2";
    static final String DFA44_specialS =
        "\12\uffff\1\0\21\uffff\1\1\3\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\1",
            "\2\2\21\uffff\1\2\1\uffff\3\2\2\uffff\21\2\1\uffff\4\2\2\12"+
            "\1\2\1\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "722:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_PretC()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_PretC()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\72\uffff";
    static final String DFA42_eofS =
        "\1\1\71\uffff";
    static final String DFA42_minS =
        "\1\25\11\uffff\1\0\57\uffff";
    static final String DFA42_maxS =
        "\1\111\11\uffff\1\0\57\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\67\uffff\1\1";
    static final String DFA42_specialS =
        "\12\uffff\1\0\57\uffff}>";
    static final String[] DFA42_transitionS = {
            "\2\1\21\uffff\1\1\1\uffff\3\1\2\uffff\21\1\1\uffff\4\1\2\12"+
            "\1\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()+ loopback of 723:8: ( type_qualifier )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_PretC()) ) {s = 57;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\72\uffff";
    static final String DFA43_eofS =
        "\1\2\71\uffff";
    static final String DFA43_minS =
        "\1\25\1\0\70\uffff";
    static final String DFA43_maxS =
        "\1\111\1\0\70\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\2\66\uffff\1\1";
    static final String DFA43_specialS =
        "\1\uffff\1\0\70\uffff}>";
    static final String[] DFA43_transitionS = {
            "\2\2\21\uffff\1\2\1\uffff\3\2\2\uffff\21\2\1\uffff\7\2\1\uffff"+
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "723:24: ( pointer )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_PretC()) ) {s = 57;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index43_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\23\uffff";
    static final String DFA46_eofS =
        "\23\uffff";
    static final String DFA46_minS =
        "\1\53\1\25\21\uffff";
    static final String DFA46_maxS =
        "\1\61\1\112\21\uffff";
    static final String DFA46_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\16\uffff";
    static final String DFA46_specialS =
        "\23\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\5\uffff\1\2",
            "\1\4\32\uffff\1\4\2\uffff\14\4\2\uffff\2\4\1\uffff\3\4\3\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "()* loopback of 737:3: ( ',' p2= parameter_declaration )*";
        }
    }
    static final String DFA47_eotS =
        "\45\uffff";
    static final String DFA47_eofS =
        "\1\1\44\uffff";
    static final String DFA47_minS =
        "\1\25\4\uffff\1\0\1\uffff\1\25\13\uffff\2\0\17\uffff\1\0";
    static final String DFA47_maxS =
        "\1\111\4\uffff\1\0\1\uffff\1\111\13\uffff\2\0\17\uffff\1\0";
    static final String DFA47_acceptS =
        "\1\uffff\1\3\4\uffff\1\1\1\uffff\1\2\34\uffff";
    static final String DFA47_specialS =
        "\5\uffff\1\0\15\uffff\1\1\1\2\17\uffff\1\3}>";
    static final String[] DFA47_transitionS = {
            "\1\6\25\uffff\2\1\2\uffff\1\7\1\uffff\1\1\25\uffff\1\10\1\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\44\31\uffff\1\24\2\10\1\uffff\14\10\2\uffff\2\10\1\uffff"+
            "\4\10\1\uffff\1\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "()* loopback of 760:5: ( declarator | abstract_declarator )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_5 = input.LA(1);

                         
                        int index47_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_PretC()) ) {s = 6;}

                        else if ( (synpred77_PretC()) ) {s = 8;}

                         
                        input.seek(index47_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_PretC()) ) {s = 6;}

                        else if ( (synpred77_PretC()) ) {s = 8;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_PretC()) ) {s = 6;}

                        else if ( (synpred77_PretC()) ) {s = 8;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_36 = input.LA(1);

                         
                        int index47_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_PretC()) ) {s = 6;}

                        else if ( (synpred77_PretC()) ) {s = 8;}

                         
                        input.seek(index47_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA51_eotS =
        "\45\uffff";
    static final String DFA51_eofS =
        "\1\3\44\uffff";
    static final String DFA51_minS =
        "\2\25\1\24\6\uffff\33\0\1\uffff";
    static final String DFA51_maxS =
        "\2\111\1\126\6\uffff\33\0\1\uffff";
    static final String DFA51_acceptS =
        "\3\uffff\1\2\40\uffff\1\1";
    static final String DFA51_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\3\25\uffff\2\3\2\uffff\1\1\1\uffff\1\3\25\uffff\1\2\1\uffff"+
            "\1\3",
            "\1\30\31\uffff\1\32\1\14\1\11\1\uffff\4\12\1\15\1\16\1\17"+
            "\1\20\1\21\1\22\1\23\1\24\2\uffff\1\25\1\26\1\uffff\1\27\2\13"+
            "\1\33\1\uffff\1\31",
            "\1\37\1\36\1\uffff\5\37\23\uffff\1\35\30\uffff\1\34\1\42\1"+
            "\uffff\2\42\2\uffff\1\40\1\41\1\43\2\uffff\3\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "796:12: ( direct_abstract_declarator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_9 = input.LA(1);

                         
                        int index51_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_10 = input.LA(1);

                         
                        int index51_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA51_15 = input.LA(1);

                         
                        int index51_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA51_20 = input.LA(1);

                         
                        int index51_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA51_21 = input.LA(1);

                         
                        int index51_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA51_22 = input.LA(1);

                         
                        int index51_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_22);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA51_23 = input.LA(1);

                         
                        int index51_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA51_24 = input.LA(1);

                         
                        int index51_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA51_25 = input.LA(1);

                         
                        int index51_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_25);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA51_26 = input.LA(1);

                         
                        int index51_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_26);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA51_27 = input.LA(1);

                         
                        int index51_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA51_28 = input.LA(1);

                         
                        int index51_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_28);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA51_29 = input.LA(1);

                         
                        int index51_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA51_30 = input.LA(1);

                         
                        int index51_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_30);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA51_31 = input.LA(1);

                         
                        int index51_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA51_32 = input.LA(1);

                         
                        int index51_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_32);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA51_33 = input.LA(1);

                         
                        int index51_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_33);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA51_34 = input.LA(1);

                         
                        int index51_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_34);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA51_35 = input.LA(1);

                         
                        int index51_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA53_eotS =
        "\26\uffff";
    static final String DFA53_eofS =
        "\26\uffff";
    static final String DFA53_minS =
        "\1\57\1\25\24\uffff";
    static final String DFA53_maxS =
        "\1\107\1\111\24\uffff";
    static final String DFA53_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\2\uffff";
    static final String DFA53_specialS =
        "\26\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\1\27\uffff\1\2",
            "\1\2\31\uffff\1\23\2\2\1\uffff\14\2\2\uffff\2\2\1\uffff\3"+
            "\2\1\23\1\uffff\1\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "801:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix )";
        }
    }
    static final String DFA54_eotS =
        "\45\uffff";
    static final String DFA54_eofS =
        "\1\1\44\uffff";
    static final String DFA54_minS =
        "\1\25\6\uffff\1\25\1\24\20\0\3\uffff\10\0\1\uffff";
    static final String DFA54_maxS =
        "\1\111\6\uffff\1\111\1\126\20\0\3\uffff\10\0\1\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\2\42\uffff\1\1";
    static final String DFA54_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\3\uffff\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1"+
        "\27\1\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\1\25\uffff\2\1\2\uffff\1\7\1\uffff\1\1\25\uffff\1\10\1\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\30\31\uffff\1\1\1\14\1\11\1\uffff\4\12\1\15\1\16\1\17\1"+
            "\20\1\21\1\22\1\23\1\24\2\uffff\1\25\1\26\1\uffff\1\27\2\13"+
            "\1\1\1\uffff\1\1",
            "\1\37\1\36\1\uffff\5\37\23\uffff\1\35\30\uffff\1\34\1\42\1"+
            "\uffff\2\42\2\uffff\1\40\1\41\1\43\2\uffff\3\42",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "()* loopback of 801:65: ( abstract_declarator_suffix )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA54_15 = input.LA(1);

                         
                        int index54_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA54_23 = input.LA(1);

                         
                        int index54_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA54_24 = input.LA(1);

                         
                        int index54_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA54_28 = input.LA(1);

                         
                        int index54_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA54_29 = input.LA(1);

                         
                        int index54_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_29);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA54_30 = input.LA(1);

                         
                        int index54_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_30);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA54_31 = input.LA(1);

                         
                        int index54_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA54_32 = input.LA(1);

                         
                        int index54_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_32);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA54_33 = input.LA(1);

                         
                        int index54_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_33);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA54_34 = input.LA(1);

                         
                        int index54_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA54_35 = input.LA(1);

                         
                        int index54_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_PretC()) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index54_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA55_eotS =
        "\33\uffff";
    static final String DFA55_eofS =
        "\33\uffff";
    static final String DFA55_minS =
        "\1\57\1\24\1\25\30\uffff";
    static final String DFA55_maxS =
        "\1\107\1\126\1\106\30\uffff";
    static final String DFA55_acceptS =
        "\3\uffff\1\1\1\2\6\uffff\1\3\1\4\16\uffff";
    static final String DFA55_specialS =
        "\33\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\2\27\uffff\1\1",
            "\2\4\1\uffff\5\4\23\uffff\1\4\30\uffff\1\3\1\4\1\uffff\2\4"+
            "\2\uffff\3\4\2\uffff\3\4",
            "\1\14\32\uffff\1\14\1\13\1\uffff\14\14\2\uffff\2\14\1\uffff"+
            "\3\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "804:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );";
        }
    }
    static final String DFA58_eotS =
        "\14\uffff";
    static final String DFA58_eofS =
        "\14\uffff";
    static final String DFA58_minS =
        "\1\53\1\24\12\uffff";
    static final String DFA58_maxS =
        "\1\100\1\126\12\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\2\1\1\10\uffff";
    static final String DFA58_specialS =
        "\14\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1\24\uffff\1\2",
            "\2\3\1\uffff\5\3\23\uffff\1\3\17\uffff\1\3\1\2\10\uffff\1"+
            "\3\1\uffff\2\3\2\uffff\3\3\2\uffff\3\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 817:16: ( ',' initializer )*";
        }
    }
    static final String DFA60_eotS =
        "\24\uffff";
    static final String DFA60_eofS =
        "\1\1\23\uffff";
    static final String DFA60_minS =
        "\1\50\23\uffff";
    static final String DFA60_maxS =
        "\1\155\23\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\3\20\uffff\1\1\1\2";
    static final String DFA60_specialS =
        "\24\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\22\1\23\7\uffff\1\1\14\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 827:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*";
        }
    }
    static final String DFA61_eotS =
        "\27\uffff";
    static final String DFA61_eofS =
        "\1\1\26\uffff";
    static final String DFA61_minS =
        "\1\50\26\uffff";
    static final String DFA61_maxS =
        "\1\155\26\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\4\22\uffff\1\1\1\2\1\3";
    static final String DFA61_specialS =
        "\27\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\1\24\1\uffff\2\1\1\25\1\26\5\uffff\1\1\14\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()* loopback of 831:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*";
        }
    }
    static final String DFA62_eotS =
        "\34\uffff";
    static final String DFA62_eofS =
        "\34\uffff";
    static final String DFA62_minS =
        "\2\24\23\uffff\1\0\6\uffff";
    static final String DFA62_maxS =
        "\2\126\23\uffff\1\0\6\uffff";
    static final String DFA62_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\23\uffff";
    static final String DFA62_specialS =
        "\25\uffff\1\0\6\uffff}>";
    static final String[] DFA62_transitionS = {
            "\2\2\1\uffff\5\2\23\uffff\1\1\31\uffff\1\2\1\uffff\2\2\2\uffff"+
            "\3\2\2\uffff\3\2",
            "\1\2\1\25\1\uffff\5\2\23\uffff\1\2\1\10\6\uffff\10\10\2\uffff"+
            "\2\10\1\uffff\3\10\2\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff"+
            "\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "834:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_21 = input.LA(1);

                         
                        int index62_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_PretC()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA63_eotS =
        "\20\uffff";
    static final String DFA63_eofS =
        "\20\uffff";
    static final String DFA63_minS =
        "\1\24\6\uffff\1\24\1\0\7\uffff";
    static final String DFA63_maxS =
        "\1\126\6\uffff\1\126\1\0\7\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\2\uffff\1\5\5\uffff\1\6";
    static final String DFA63_specialS =
        "\10\uffff\1\0\7\uffff}>";
    static final String[] DFA63_transitionS = {
            "\2\1\1\uffff\5\1\23\uffff\1\1\31\uffff\1\6\1\uffff\2\6\2\uffff"+
            "\1\4\1\5\1\7\2\uffff\3\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\11\1\uffff\5\11\23\uffff\1\10\31\uffff\1\11\1\uffff\2\11"+
            "\2\uffff\3\11\2\uffff\3\11",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "839:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_8 = input.LA(1);

                         
                        int index63_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_PretC()) ) {s = 9;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index63_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\46\uffff";
    static final String DFA64_eofS =
        "\1\1\45\uffff";
    static final String DFA64_minS =
        "\1\50\30\uffff\1\24\14\uffff";
    static final String DFA64_maxS =
        "\1\155\30\uffff\1\126\14\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\10\26\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\2\1\3\6\uffff";
    static final String DFA64_specialS =
        "\46\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\1\uffff\3\1\2\uffff\1\31\1\uffff\1\1\16\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\1\30\2\1\1\uffff\4\1\1\34\1\35\1\uffff\1\32\1\33"+
            "\1\1\2\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\37\1\uffff\5\37\23\uffff\1\37\1\uffff\1\36\27\uffff\1\37"+
            "\1\uffff\2\37\2\uffff\3\37\2\uffff\3\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 856:9: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' i1= IDENTIFIER | '->' i2= IDENTIFIER | '++' | '--' )*";
        }
    }
    static final String DFA67_eotS =
        "\162\uffff";
    static final String DFA67_eofS =
        "\1\uffff\2\17\157\uffff";
    static final String DFA67_minS =
        "\1\24\2\50\5\24\6\0\27\uffff\6\0\44\uffff\43\0";
    static final String DFA67_maxS =
        "\1\126\2\155\5\126\6\0\27\uffff\6\0\44\uffff\43\0";
    static final String DFA67_acceptS =
        "\16\uffff\1\1\1\2\142\uffff";
    static final String DFA67_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\27\uffff\1\6\1\7\1\10\1\11\1"+
        "\12\1\13\44\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1"+
        "\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56}>";
    static final String[] DFA67_transitionS = {
            "\1\2\1\1\1\uffff\5\2\23\uffff\1\3\31\uffff\1\6\1\uffff\2\6"+
            "\2\uffff\1\4\1\5\1\7\2\uffff\3\6",
            "\1\17\1\uffff\1\16\2\17\2\uffff\1\11\1\uffff\1\17\16\uffff"+
            "\1\17\2\uffff\1\17\3\uffff\1\10\2\17\1\uffff\4\17\1\14\1\15"+
            "\1\uffff\1\12\1\13\1\17\2\uffff\12\16\15\17",
            "\1\17\1\uffff\1\16\2\17\2\uffff\1\46\1\uffff\1\17\16\uffff"+
            "\1\17\2\uffff\1\17\3\uffff\1\45\2\17\1\uffff\4\17\1\51\1\52"+
            "\1\uffff\1\47\1\50\1\17\2\uffff\12\16\15\17",
            "\1\120\1\117\1\uffff\5\120\23\uffff\1\121\1\17\6\uffff\10"+
            "\17\2\uffff\2\17\1\uffff\3\17\2\uffff\1\124\1\uffff\2\124\2"+
            "\uffff\1\122\1\123\1\125\2\uffff\3\124",
            "\1\127\1\126\1\uffff\5\127\23\uffff\1\130\31\uffff\1\133\1"+
            "\uffff\2\133\2\uffff\1\131\1\132\1\134\2\uffff\3\133",
            "\1\136\1\135\1\uffff\5\136\23\uffff\1\137\31\uffff\1\142\1"+
            "\uffff\2\142\2\uffff\1\140\1\141\1\143\2\uffff\3\142",
            "\1\146\1\145\1\uffff\5\146\23\uffff\1\144\31\uffff\1\151\1"+
            "\uffff\2\151\2\uffff\1\147\1\150\1\152\2\uffff\3\151",
            "\1\155\1\154\1\uffff\5\155\23\uffff\1\153\31\uffff\1\160\1"+
            "\uffff\2\160\2\uffff\1\156\1\157\1\161\2\uffff\3\160",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "900:1: assignment_expression : ( lvalue assignment_operator assignment_expression | constant_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_8 = input.LA(1);

                         
                        int index67_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA67_9 = input.LA(1);

                         
                        int index67_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA67_10 = input.LA(1);

                         
                        int index67_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA67_11 = input.LA(1);

                         
                        int index67_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA67_12 = input.LA(1);

                         
                        int index67_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA67_13 = input.LA(1);

                         
                        int index67_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA67_37 = input.LA(1);

                         
                        int index67_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA67_38 = input.LA(1);

                         
                        int index67_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA67_39 = input.LA(1);

                         
                        int index67_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA67_40 = input.LA(1);

                         
                        int index67_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_40);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA67_41 = input.LA(1);

                         
                        int index67_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_41);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA67_42 = input.LA(1);

                         
                        int index67_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA67_79 = input.LA(1);

                         
                        int index67_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_79);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA67_80 = input.LA(1);

                         
                        int index67_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_80);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA67_81 = input.LA(1);

                         
                        int index67_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_81);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA67_82 = input.LA(1);

                         
                        int index67_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_82);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA67_83 = input.LA(1);

                         
                        int index67_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_83);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA67_84 = input.LA(1);

                         
                        int index67_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_84);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA67_85 = input.LA(1);

                         
                        int index67_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_85);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA67_86 = input.LA(1);

                         
                        int index67_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_86);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA67_87 = input.LA(1);

                         
                        int index67_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_87);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA67_88 = input.LA(1);

                         
                        int index67_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_88);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA67_89 = input.LA(1);

                         
                        int index67_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_89);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA67_90 = input.LA(1);

                         
                        int index67_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_90);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA67_91 = input.LA(1);

                         
                        int index67_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_91);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA67_92 = input.LA(1);

                         
                        int index67_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_92);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA67_93 = input.LA(1);

                         
                        int index67_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_93);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA67_94 = input.LA(1);

                         
                        int index67_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_94);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA67_95 = input.LA(1);

                         
                        int index67_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_95);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA67_96 = input.LA(1);

                         
                        int index67_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_96);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA67_97 = input.LA(1);

                         
                        int index67_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_97);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA67_98 = input.LA(1);

                         
                        int index67_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_98);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA67_99 = input.LA(1);

                         
                        int index67_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_99);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA67_100 = input.LA(1);

                         
                        int index67_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_100);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA67_101 = input.LA(1);

                         
                        int index67_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_101);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA67_102 = input.LA(1);

                         
                        int index67_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_102);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA67_103 = input.LA(1);

                         
                        int index67_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_103);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA67_104 = input.LA(1);

                         
                        int index67_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_104);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA67_105 = input.LA(1);

                         
                        int index67_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_105);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA67_106 = input.LA(1);

                         
                        int index67_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_106);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA67_107 = input.LA(1);

                         
                        int index67_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_107);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA67_108 = input.LA(1);

                         
                        int index67_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_108);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA67_109 = input.LA(1);

                         
                        int index67_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_109);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA67_110 = input.LA(1);

                         
                        int index67_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_110);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA67_111 = input.LA(1);

                         
                        int index67_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_111);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA67_112 = input.LA(1);

                         
                        int index67_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_112);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA67_113 = input.LA(1);

                         
                        int index67_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_PretC()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index67_113);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\12\uffff";
    static final String DFA68_eofS =
        "\1\2\11\uffff";
    static final String DFA68_minS =
        "\1\50\11\uffff";
    static final String DFA68_maxS =
        "\1\141\11\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA68_specialS =
        "\12\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\2\2\uffff\2\2\4\uffff\1\2\16\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\2\30\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "931:26: ( '?' expression ':' conditional_expression )?";
        }
    }
    static final String DFA69_eotS =
        "\13\uffff";
    static final String DFA69_eofS =
        "\1\1\12\uffff";
    static final String DFA69_minS =
        "\1\50\12\uffff";
    static final String DFA69_maxS =
        "\1\142\12\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA69_specialS =
        "\13\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\30\uffff\1\1\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()* loopback of 935:27: ( '||' logical_and_expression )*";
        }
    }
    static final String DFA70_eotS =
        "\14\uffff";
    static final String DFA70_eofS =
        "\1\1\13\uffff";
    static final String DFA70_minS =
        "\1\50\13\uffff";
    static final String DFA70_maxS =
        "\1\143\13\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\11\uffff\1\1";
    static final String DFA70_specialS =
        "\14\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\30\uffff\2\1\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 939:28: ( '&&' inclusive_or_expression )*";
        }
    }
    static final String DFA71_eotS =
        "\15\uffff";
    static final String DFA71_eofS =
        "\1\1\14\uffff";
    static final String DFA71_minS =
        "\1\50\14\uffff";
    static final String DFA71_maxS =
        "\1\144\14\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA71_specialS =
        "\15\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\30\uffff\3\1\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "()* loopback of 943:28: ( '|' exclusive_or_expression )*";
        }
    }
    static final String DFA72_eotS =
        "\16\uffff";
    static final String DFA72_eofS =
        "\1\1\15\uffff";
    static final String DFA72_minS =
        "\1\50\15\uffff";
    static final String DFA72_maxS =
        "\1\145\15\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA72_specialS =
        "\16\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\30\uffff\4\1\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()* loopback of 947:19: ( '^' and_expression )*";
        }
    }
    static final String DFA73_eotS =
        "\17\uffff";
    static final String DFA73_eofS =
        "\1\1\16\uffff";
    static final String DFA73_minS =
        "\1\50\16\uffff";
    static final String DFA73_maxS =
        "\1\145\16\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA73_specialS =
        "\17\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\13\uffff\1\16\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "()* loopback of 951:24: ( '&' equality_expression )*";
        }
    }
    static final String DFA74_eotS =
        "\20\uffff";
    static final String DFA74_eofS =
        "\1\1\17\uffff";
    static final String DFA74_minS =
        "\1\50\17\uffff";
    static final String DFA74_maxS =
        "\1\147\17\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\2\15\uffff\1\1";
    static final String DFA74_specialS =
        "\20\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\13\uffff\1\1\14\uffff\5\1\2\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()* loopback of 954:26: ( ( '==' | '!=' ) relational_expression )*";
        }
    }
    static final String DFA75_eotS =
        "\21\uffff";
    static final String DFA75_eofS =
        "\1\1\20\uffff";
    static final String DFA75_minS =
        "\1\50\20\uffff";
    static final String DFA75_maxS =
        "\1\153\20\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\16\uffff\1\1";
    static final String DFA75_specialS =
        "\21\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\13\uffff\1\1\14\uffff\7\1\4\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 958:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*";
        }
    }
    static final String DFA76_eotS =
        "\22\uffff";
    static final String DFA76_eofS =
        "\1\1\21\uffff";
    static final String DFA76_minS =
        "\1\50\21\uffff";
    static final String DFA76_maxS =
        "\1\155\21\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA76_specialS =
        "\22\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\2\uffff\2\1\4\uffff\1\1\16\uffff\1\1\2\uffff\1\1\4\uffff"+
            "\1\1\13\uffff\1\1\14\uffff\13\1\2\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()* loopback of 962:24: ( ( '<<' | '>>' ) additive_expression )*";
        }
    }
    static final String DFA77_eotS =
        "\61\uffff";
    static final String DFA77_eofS =
        "\61\uffff";
    static final String DFA77_minS =
        "\1\24\1\50\57\uffff";
    static final String DFA77_maxS =
        "\1\177\1\155\57\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\6\uffff\1\3\1\uffff\1\4\2\uffff\1\5\3"+
        "\uffff\1\6\1\7\1\10\1\uffff\1\11\30\uffff";
    static final String DFA77_specialS =
        "\61\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\4\1\1\1\uffff\5\4\14\uffff\1\4\6\uffff\1\4\17\uffff\1\30"+
            "\11\uffff\1\4\1\uffff\2\4\2\uffff\3\4\2\uffff\3\4\27\uffff\1"+
            "\25\2\2\1\26\2\uffff\1\26\1\24\1\13\1\uffff\1\13\3\15\4\20",
            "\1\4\1\uffff\2\4\3\uffff\1\4\23\uffff\1\2\3\uffff\1\4\1\uffff"+
            "\1\4\1\uffff\6\4\1\uffff\3\4\2\uffff\27\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "967:1: statement : ( labeled_statement -> ^( LABELED_STATMENT_TOK ID_TOK[\"\"+(ID)] labeled_statement ) | expression_statement | selection_statement | iteration_statement | jump_statement -> ^( JUMP_STATMENT_TOK ID_TOK[\"\"+(ID)] SOURCE_TOK[$jump_statement.text] ) | parallel_statement | 'EOT' ';' -> ^( 'EOT' ID_TOK[\"\"+(ID)] SOURCE_TOK[sourceTemp] ) | preemption_statment | scope_statement );";
        }
    }
    static final String DFA79_eotS =
        "\54\uffff";
    static final String DFA79_eofS =
        "\54\uffff";
    static final String DFA79_minS =
        "\1\77\1\24\1\0\51\uffff";
    static final String DFA79_maxS =
        "\1\77\1\177\1\0\51\uffff";
    static final String DFA79_acceptS =
        "\3\uffff\1\2\47\uffff\1\1";
    static final String DFA79_specialS =
        "\2\uffff\1\0\51\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1",
            "\10\3\14\uffff\1\3\6\uffff\2\3\1\uffff\16\3\1\2\2\3\1\uffff"+
            "\3\3\2\uffff\1\3\1\uffff\2\3\2\uffff\3\3\2\uffff\3\3\27\uffff"+
            "\4\3\2\uffff\3\3\1\uffff\10\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "1053:1: scope_statement : ( '{' '}' -> ^( SCOPE_TOK EMPTY_TOK END_TOK ) | '{' compound_statement '}' -> ^( SCOPE_TOK compound_statement END_TOK ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_2 = input.LA(1);

                         
                        int index79_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_PretC()) ) {s = 43;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index79_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\123\uffff";
    static final String DFA81_eofS =
        "\123\uffff";
    static final String DFA81_minS =
        "\2\24\47\uffff\51\0\1\uffff";
    static final String DFA81_maxS =
        "\2\177\47\uffff\51\0\1\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\2\117\uffff\1\1";
    static final String DFA81_specialS =
        "\51\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\10\2\14\uffff\1\2\6\uffff\2\2\1\uffff\15\2\1\1\1\uffff\2\2"+
            "\1\uffff\3\2\2\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2"+
            "\27\uffff\4\2\2\uffff\3\2\1\uffff\10\2",
            "\1\76\1\71\1\72\5\76\14\uffff\1\75\6\uffff\1\77\1\55\1\uffff"+
            "\1\52\4\53\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\121\1\51"+
            "\1\66\1\67\1\uffff\1\70\2\54\2\uffff\1\102\1\uffff\2\102\2\uffff"+
            "\1\100\1\101\1\103\2\uffff\3\102\27\uffff\1\116\1\73\1\74\1"+
            "\117\2\uffff\1\120\1\115\1\104\1\uffff\1\105\1\106\1\107\1\110"+
            "\1\111\1\112\1\113\1\114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "1084:1: condition_statement : ( ( '{' ( compound_statement )? '}' )=> scope_statement | ( declaration | statement ) -> ^( SCOPE_TOK ( declaration )? ( statement )? END_TOK ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_41 = input.LA(1);

                         
                        int index81_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_41);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA81_42 = input.LA(1);

                         
                        int index81_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_42);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA81_43 = input.LA(1);

                         
                        int index81_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA81_44 = input.LA(1);

                         
                        int index81_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA81_45 = input.LA(1);

                         
                        int index81_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA81_46 = input.LA(1);

                         
                        int index81_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA81_47 = input.LA(1);

                         
                        int index81_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA81_48 = input.LA(1);

                         
                        int index81_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA81_49 = input.LA(1);

                         
                        int index81_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA81_50 = input.LA(1);

                         
                        int index81_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA81_51 = input.LA(1);

                         
                        int index81_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA81_52 = input.LA(1);

                         
                        int index81_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA81_53 = input.LA(1);

                         
                        int index81_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_53);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA81_54 = input.LA(1);

                         
                        int index81_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA81_55 = input.LA(1);

                         
                        int index81_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA81_56 = input.LA(1);

                         
                        int index81_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA81_57 = input.LA(1);

                         
                        int index81_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_57);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA81_58 = input.LA(1);

                         
                        int index81_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_58);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA81_59 = input.LA(1);

                         
                        int index81_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_59);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA81_60 = input.LA(1);

                         
                        int index81_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_60);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA81_61 = input.LA(1);

                         
                        int index81_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_61);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA81_62 = input.LA(1);

                         
                        int index81_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_62);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA81_63 = input.LA(1);

                         
                        int index81_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_63);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA81_64 = input.LA(1);

                         
                        int index81_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_64);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA81_65 = input.LA(1);

                         
                        int index81_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_65);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA81_66 = input.LA(1);

                         
                        int index81_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_66);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA81_67 = input.LA(1);

                         
                        int index81_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_67);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA81_68 = input.LA(1);

                         
                        int index81_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_68);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA81_69 = input.LA(1);

                         
                        int index81_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_69);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA81_70 = input.LA(1);

                         
                        int index81_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_70);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA81_71 = input.LA(1);

                         
                        int index81_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_71);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA81_72 = input.LA(1);

                         
                        int index81_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_72);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA81_73 = input.LA(1);

                         
                        int index81_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_73);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA81_74 = input.LA(1);

                         
                        int index81_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_74);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA81_75 = input.LA(1);

                         
                        int index81_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_75);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA81_76 = input.LA(1);

                         
                        int index81_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_76);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA81_77 = input.LA(1);

                         
                        int index81_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_77);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA81_78 = input.LA(1);

                         
                        int index81_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_78);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA81_79 = input.LA(1);

                         
                        int index81_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_79);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA81_80 = input.LA(1);

                         
                        int index81_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_80);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA81_81 = input.LA(1);

                         
                        int index81_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_PretC()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_81);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\102\uffff";
    static final String DFA80_eofS =
        "\102\uffff";
    static final String DFA80_minS =
        "\1\24\17\uffff\1\25\31\uffff\1\0\1\uffff\2\0\24\uffff";
    static final String DFA80_maxS =
        "\1\177\17\uffff\1\155\31\uffff\1\0\1\uffff\2\0\24\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\20\uffff\1\2\57\uffff";
    static final String DFA80_specialS =
        "\52\uffff\1\0\1\uffff\1\1\1\2\24\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\22\1\20\1\1\5\22\14\uffff\1\22\6\uffff\1\22\1\1\1\uffff"+
            "\15\1\1\22\1\uffff\2\1\1\uffff\3\1\2\uffff\1\22\1\uffff\2\22"+
            "\2\uffff\3\22\2\uffff\3\22\27\uffff\4\22\2\uffff\3\22\1\uffff"+
            "\10\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\22\uffff\1\55\1\uffff\2\22\3\uffff\1\54\23\uffff\1\22"+
            "\3\uffff\1\22\1\uffff\1\52\1\uffff\6\22\1\uffff\3\22\2\uffff"+
            "\27\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "1090:126: ( declaration | statement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_42 = input.LA(1);

                         
                        int index80_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred161_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index80_42);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA80_44 = input.LA(1);

                         
                        int index80_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred161_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index80_44);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA80_45 = input.LA(1);

                         
                        int index80_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred161_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index80_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\104\uffff";
    static final String DFA82_eofS =
        "\1\1\103\uffff";
    static final String DFA82_minS =
        "\1\24\21\uffff\1\25\31\uffff\1\0\1\uffff\2\0\24\uffff";
    static final String DFA82_maxS =
        "\1\177\21\uffff\1\155\31\uffff\1\0\1\uffff\2\0\24\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\3\1\uffff\1\1\20\uffff\1\2\57\uffff";
    static final String DFA82_specialS =
        "\54\uffff\1\0\1\uffff\1\1\1\2\24\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\24\1\22\1\3\5\24\14\uffff\1\24\6\uffff\1\24\1\3\1\uffff"+
            "\15\3\1\24\1\1\2\3\1\uffff\3\3\2\uffff\1\24\1\uffff\2\24\2\uffff"+
            "\3\24\2\uffff\3\24\27\uffff\4\24\2\uffff\3\24\1\uffff\10\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\22\uffff\1\57\1\uffff\2\24\3\uffff\1\56\23\uffff\1\24"+
            "\3\uffff\1\24\1\uffff\1\54\1\uffff\6\24\1\uffff\3\24\2\uffff"+
            "\27\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 1098:4: ( declaration | statement_list )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_44 = input.LA(1);

                         
                        int index82_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred162_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 3;}

                        else if ( (synpred163_PretC()) ) {s = 20;}

                         
                        input.seek(index82_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_46 = input.LA(1);

                         
                        int index82_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred162_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 3;}

                        else if ( (synpred163_PretC()) ) {s = 20;}

                         
                        input.seek(index82_46);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_47 = input.LA(1);

                         
                        int index82_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred162_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 3;}

                        else if ( (synpred163_PretC()) ) {s = 20;}

                         
                        input.seek(index82_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\u0123\uffff";
    static final String DFA83_eofS =
        "\1\1\u0122\uffff";
    static final String DFA83_minS =
        "\1\24\21\uffff\1\0\1\uffff\27\0\u00f8\uffff";
    static final String DFA83_maxS =
        "\1\177\21\uffff\1\0\1\uffff\27\0\u00f8\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\2\102\uffff\1\1\u00de\uffff";
    static final String DFA83_specialS =
        "\22\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\u00f8\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\27\1\22\1\1\5\27\14\uffff\1\26\6\uffff\1\30\1\1\1\uffff"+
            "\15\1\1\52\3\1\1\uffff\3\1\2\uffff\1\33\1\uffff\2\33\2\uffff"+
            "\1\31\1\32\1\34\2\uffff\3\33\27\uffff\1\47\1\24\1\25\1\50\2"+
            "\uffff\1\51\1\46\1\35\1\uffff\1\36\1\37\1\40\1\41\1\42\1\43"+
            "\1\44\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1102:4: ( statement )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_18 = input.LA(1);

                         
                        int index83_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_20 = input.LA(1);

                         
                        int index83_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_21 = input.LA(1);

                         
                        int index83_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_22 = input.LA(1);

                         
                        int index83_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_23 = input.LA(1);

                         
                        int index83_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_24 = input.LA(1);

                         
                        int index83_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_24);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_25 = input.LA(1);

                         
                        int index83_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_26 = input.LA(1);

                         
                        int index83_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_26);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_27 = input.LA(1);

                         
                        int index83_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_28 = input.LA(1);

                         
                        int index83_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_29 = input.LA(1);

                         
                        int index83_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_30 = input.LA(1);

                         
                        int index83_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_30);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_31 = input.LA(1);

                         
                        int index83_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_31);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_32 = input.LA(1);

                         
                        int index83_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_32);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_33 = input.LA(1);

                         
                        int index83_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_33);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_34 = input.LA(1);

                         
                        int index83_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_34);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_35 = input.LA(1);

                         
                        int index83_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_35);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_36 = input.LA(1);

                         
                        int index83_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_36);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA83_37 = input.LA(1);

                         
                        int index83_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_37);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA83_38 = input.LA(1);

                         
                        int index83_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_38);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA83_39 = input.LA(1);

                         
                        int index83_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA83_40 = input.LA(1);

                         
                        int index83_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_40);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA83_41 = input.LA(1);

                         
                        int index83_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_41);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA83_42 = input.LA(1);

                         
                        int index83_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_PretC()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index83_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\52\uffff";
    static final String DFA91_eofS =
        "\52\uffff";
    static final String DFA91_minS =
        "\1\24\51\uffff";
    static final String DFA91_maxS =
        "\1\177\51\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\1\1\2\47\uffff";
    static final String DFA91_specialS =
        "\52\uffff}>";
    static final String[] DFA91_transitionS = {
            "\10\2\14\uffff\1\2\6\uffff\2\2\1\uffff\16\2\1\uffff\2\2\1\1"+
            "\3\2\2\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2\27\uffff"+
            "\4\2\2\uffff\3\2\1\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "1346:3: ( ':' DECIMAL_LITERAL )?";
        }
    }
    static final String DFA92_eotS =
        "\52\uffff";
    static final String DFA92_eofS =
        "\52\uffff";
    static final String DFA92_minS =
        "\1\24\51\uffff";
    static final String DFA92_maxS =
        "\1\177\51\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\1\1\2\47\uffff";
    static final String DFA92_specialS =
        "\52\uffff}>";
    static final String[] DFA92_transitionS = {
            "\10\2\14\uffff\1\2\6\uffff\2\2\1\uffff\16\2\1\uffff\2\2\1\1"+
            "\3\2\2\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2\27\uffff"+
            "\4\2\2\uffff\3\2\1\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "1351:9: ( ':' DECIMAL_LITERAL )?";
        }
    }
    static final String DFA96_eotS =
        "\52\uffff";
    static final String DFA96_eofS =
        "\52\uffff";
    static final String DFA96_minS =
        "\1\24\51\uffff";
    static final String DFA96_maxS =
        "\1\177\51\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\1\2\47\uffff";
    static final String DFA96_specialS =
        "\52\uffff}>";
    static final String[] DFA96_transitionS = {
            "\10\2\14\uffff\1\2\6\uffff\2\2\1\uffff\16\2\1\uffff\2\2\1\1"+
            "\3\2\2\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\3\2\27\uffff"+
            "\4\2\2\uffff\3\2\1\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "1403:4: ( ':' DECIMAL_LITERAL )?";
        }
    }
    static final String DFA98_eotS =
        "\15\uffff";
    static final String DFA98_eofS =
        "\15\uffff";
    static final String DFA98_minS =
        "\1\174\3\uffff\1\24\10\uffff";
    static final String DFA98_maxS =
        "\1\177\3\uffff\1\126\10\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\6\uffff";
    static final String DFA98_specialS =
        "\15\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\1\2\1\3\1\4",
            "",
            "",
            "",
            "\2\6\1\uffff\5\6\14\uffff\1\5\6\uffff\1\6\31\uffff\1\6\1\uffff"+
            "\2\6\2\uffff\3\6\2\uffff\3\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "1424:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );";
        }
    }
    static final String DFA99_eotS =
        "\47\uffff";
    static final String DFA99_eofS =
        "\47\uffff";
    static final String DFA99_minS =
        "\1\25\16\uffff\1\25\3\uffff\1\0\17\uffff\1\0\3\uffff";
    static final String DFA99_maxS =
        "\1\111\16\uffff\1\111\3\uffff\1\0\17\uffff\1\0\3\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\1\16\uffff\1\2\26\uffff";
    static final String DFA99_specialS =
        "\23\uffff\1\0\17\uffff\1\1\3\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\17\31\uffff\1\20\1\1\2\uffff\14\1\2\uffff\2\1\1\uffff\3"+
            "\1\2\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43\1\20\30\uffff\1\23\1\20\1\uffff\16\20\1\uffff\2\20\1"+
            "\uffff\4\20\1\uffff\1\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "236:6: ( declaration_specifiers )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_19 = input.LA(1);

                         
                        int index99_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index99_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_35 = input.LA(1);

                         
                        int index99_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_PretC()&&(isTypeName(input.LT(1).getText())))) ) {s = 1;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index99_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA100_eotS =
        "\23\uffff";
    static final String DFA100_eofS =
        "\23\uffff";
    static final String DFA100_minS =
        "\1\25\22\uffff";
    static final String DFA100_maxS =
        "\1\106\22\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\2\1\1\20\uffff";
    static final String DFA100_specialS =
        "\23\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\2\31\uffff\1\2\1\uffff\15\2\1\1\1\uffff\2\2\1\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 236:41: ( declaration )*";
        }
    }
    static final String DFA118_eotS =
        "\54\uffff";
    static final String DFA118_eofS =
        "\54\uffff";
    static final String DFA118_minS =
        "\1\24\50\uffff\1\0\2\uffff";
    static final String DFA118_maxS =
        "\1\177\50\uffff\1\0\2\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\51\uffff\1\2";
    static final String DFA118_specialS =
        "\51\uffff\1\0\2\uffff}>";
    static final String[] DFA118_transitionS = {
            "\10\1\14\uffff\1\1\6\uffff\2\1\1\uffff\16\1\1\51\2\1\1\uffff"+
            "\3\1\2\uffff\1\1\1\uffff\2\1\2\uffff\3\1\2\uffff\3\1\27\uffff"+
            "\4\1\2\uffff\3\1\1\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "1089:9: ( compound_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_41 = input.LA(1);

                         
                        int index118_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred159_PretC()) ) {s = 1;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index118_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_external_declaration_in_translation_unit247 = new BitSet(new long[]{0x7FFDC28000600002L,0x0000000000000276L});
    public static final BitSet FOLLOW_function_definition_in_external_declaration301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_external_declaration308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_external_declaration325 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_declaration_specifiers_in_external_declaration327 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_reactive_declarator_in_external_declaration329 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_external_declaration331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_external_declaration351 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_declaration_specifiers_in_external_declaration353 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_reactive_declarator_in_external_declaration355 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_external_declaration357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_thread_definition_in_external_declaration376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_reactive_declarator391 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_42_in_reactive_declarator396 = new BitSet(new long[]{0x800080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_initializer_in_reactive_declarator398 = new BitSet(new long[]{0x0000180000000002L});
    public static final BitSet FOLLOW_range_declarator_in_reactive_declarator402 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_reactive_declarator407 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_declarator_in_reactive_declarator413 = new BitSet(new long[]{0x00001C0000000002L});
    public static final BitSet FOLLOW_42_in_reactive_declarator418 = new BitSet(new long[]{0x800080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_initializer_in_reactive_declarator420 = new BitSet(new long[]{0x0000180000000002L});
    public static final BitSet FOLLOW_range_declarator_in_reactive_declarator424 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_44_in_range_declarator438 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_range_declarator442 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_range_declarator444 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_range_declarator448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_thread_definition473 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_thread_definition475 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_thread_definition477 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_thread_definition479 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_thread_definition481 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_scope_statement_in_thread_definition483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_function_definition539 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_declarator_in_function_definition551 = new BitSet(new long[]{0xFFFD000000600000L,0x0000000000000076L});
    public static final BitSet FOLLOW_declaration_in_function_definition560 = new BitSet(new long[]{0xFFFD000000600000L,0x0000000000000076L});
    public static final BitSet FOLLOW_scope_statement_in_function_definition563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scope_statement_in_function_definition573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_declaration641 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_declaration_specifiers_in_declaration645 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_init_declarator_list_in_declaration653 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_declaration655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_declaration687 = new BitSet(new long[]{0x7FF9810000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_init_declarator_list_in_declaration690 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_declaration696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LINE_COMMAND_in_declaration719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_storage_class_specifier_in_declaration_specifiers749 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_qualifier_in_declaration_specifiers766 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_specifier_in_declaration_specifiers799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list847 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_init_declarator_list850 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list853 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_declarator_in_init_declarator870 = new BitSet(new long[]{0x0000140000000002L});
    public static final BitSet FOLLOW_42_in_init_declarator873 = new BitSet(new long[]{0x800080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_initializer_in_init_declarator875 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_range_declarator_in_init_declarator880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_storage_class_specifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_type_specifier932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_type_specifier949 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_56_in_type_specifier953 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_type_specifier958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_type_specifier966 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_56_in_type_specifier970 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_type_specifier975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_type_specifier983 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_56_in_type_specifier987 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_type_specifier992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_type_specifier1001 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_56_in_type_specifier1005 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_type_specifier1010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_type_specifier1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_type_specifier1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_specifier_in_type_specifier1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_specifier_in_type_specifier1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_type_specifier1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_type_id1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_in_struct_or_union_specifier1136 = new BitSet(new long[]{0x8000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_or_union_specifier1141 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_struct_or_union_specifier1146 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_struct_declaration_list_in_struct_or_union_specifier1148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_struct_or_union_specifier1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_or_union_in_struct_or_union_specifier1155 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_or_union_specifier1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_struct_or_union1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_struct_or_union1187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_declaration_list1218 = new BitSet(new long[]{0x7FF9000000200002L,0x0000000000000076L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_declaration_list1223 = new BitSet(new long[]{0x7FF9000000200002L,0x0000000000000076L});
    public static final BitSet FOLLOW_specifier_qualifier_list_in_struct_declaration1245 = new BitSet(new long[]{0x7FF9810000200000L,0x000000000000027EL});
    public static final BitSet FOLLOW_struct_declarator_list_in_struct_declaration1248 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_struct_declaration1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_qualifier_in_specifier_qualifier_list1273 = new BitSet(new long[]{0x7FF9000000200002L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_specifier_in_specifier_qualifier_list1279 = new BitSet(new long[]{0x7FF9000000200002L,0x0000000000000076L});
    public static final BitSet FOLLOW_struct_declarator_in_struct_declarator_list1298 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_struct_declarator_list1301 = new BitSet(new long[]{0x7FF9800000200000L,0x000000000000027EL});
    public static final BitSet FOLLOW_struct_declarator_in_struct_declarator_list1306 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_declarator_in_struct_declarator1321 = new BitSet(new long[]{0x0000100000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_struct_declarator1324 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_struct_declarator1326 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_range_declarator_in_struct_declarator1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_struct_declarator1342 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_struct_declarator1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_enum_specifier1363 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_enum_specifier1365 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_enumerator_list_in_enum_specifier1367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_enum_specifier1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_enum_specifier1375 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_specifier1377 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_enum_specifier1379 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_enumerator_list_in_enum_specifier1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_enum_specifier1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_enum_specifier1388 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_specifier1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_list1401 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_enumerator_list1404 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_list1406 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumerator1419 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_enumerator1422 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_enumerator1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_type_qualifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_declarator1453 = new BitSet(new long[]{0x0000800000200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_direct_declarator_in_declarator1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_declarator1461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_direct_declarator1475 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_declarator_suffix_in_direct_declarator1486 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_47_in_direct_declarator1505 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_declarator_in_direct_declarator1507 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_direct_declarator1509 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_declarator_suffix_in_direct_declarator1511 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_declarator_suffix1536 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_declarator_suffix1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_declarator_suffix1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_declarator_suffix1550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_declarator_suffix1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_declarator_suffix1562 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_parameter_type_list_in_declarator_suffix1564 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_declarator_suffix1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_declarator_suffix1576 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifier_list_in_declarator_suffix1578 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_declarator_suffix1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_declarator_suffix1590 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_declarator_suffix1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_pointer1603 = new BitSet(new long[]{0x0078000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_type_qualifier_in_pointer1605 = new BitSet(new long[]{0x0078000000000002L,0x0000000000000260L});
    public static final BitSet FOLLOW_pointer_in_pointer1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_pointer1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pointer_in_pointer1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_pointer1621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_list_in_parameter_type_list1632 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_parameter_type_list1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_parameter_type_list1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_list1653 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_parameter_list1663 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_list1667 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_parameter_declaration1708 = new BitSet(new long[]{0x7FF9900000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_declarator_in_parameter_declaration1719 = new BitSet(new long[]{0x7FF9900000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_abstract_declarator_in_parameter_declaration1729 = new BitSet(new long[]{0x7FF9900000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_range_declarator_in_parameter_declaration1750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier_list1795 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_identifier_list1798 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifier_list1800 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_specifier_qualifier_list_in_type_name1813 = new BitSet(new long[]{0x7FF9800000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_abstract_declarator_in_type_name1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_abstract_declarator1827 = new BitSet(new long[]{0x7FF9800000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_abstract_declarator1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_abstract_declarator1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_direct_abstract_declarator1848 = new BitSet(new long[]{0x7FF9800000200000L,0x00000000000002F6L});
    public static final BitSet FOLLOW_abstract_declarator_in_direct_abstract_declarator1850 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_direct_abstract_declarator1852 = new BitSet(new long[]{0x7FF9800000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1856 = new BitSet(new long[]{0x7FF9800000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_direct_abstract_declarator1860 = new BitSet(new long[]{0x7FF9800000200002L,0x00000000000002F6L});
    public static final BitSet FOLLOW_71_in_abstract_declarator_suffix1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_abstract_declarator_suffix1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_abstract_declarator_suffix1879 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_abstract_declarator_suffix1881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_abstract_declarator_suffix1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_abstract_declarator_suffix1888 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_abstract_declarator_suffix1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_abstract_declarator_suffix1895 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_parameter_type_list_in_abstract_declarator_suffix1897 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_abstract_declarator_suffix1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_initializer1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_initializer1916 = new BitSet(new long[]{0x800080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_initializer_list_in_initializer1918 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_43_in_initializer1920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_initializer1923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list1934 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_initializer_list1937 = new BitSet(new long[]{0x800080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_initializer_in_initializer_list1939 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_argument_expression_list1956 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_argument_expression_list1959 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_assignment_expression_in_argument_expression_list1961 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression1975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_75_in_additive_expression1979 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression1981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_76_in_additive_expression1985 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression1987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006200L});
    public static final BitSet FOLLOW_73_in_multiplicative_expression2005 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006200L});
    public static final BitSet FOLLOW_77_in_multiplicative_expression2011 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006200L});
    public static final BitSet FOLLOW_78_in_multiplicative_expression2017 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_multiplicative_expression2019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006200L});
    public static final BitSet FOLLOW_47_in_cast_expression2032 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_name_in_cast_expression2034 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_cast_expression2036 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_cast_expression2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression2043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_expression_in_unary_expression2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_unary_expression2059 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_unary_expression2070 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_unary_expression2081 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_unary_expression2088 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_unary_expression2095 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_unary_expression2097 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_name_in_unary_expression2099 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_unary_expression2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_postfix_expression2114 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_71_in_postfix_expression2128 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_postfix_expression2130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_postfix_expression2132 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_47_in_postfix_expression2146 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_postfix_expression2148 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_47_in_postfix_expression2162 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_argument_expression_list_in_postfix_expression2164 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_postfix_expression2166 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_82_in_postfix_expression2180 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_postfix_expression2184 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_83_in_postfix_expression2200 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_postfix_expression2204 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_79_in_postfix_expression2220 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_80_in_postfix_expression2237 = new BitSet(new long[]{0x0000800000000002L,0x00000000000D8080L});
    public static final BitSet FOLLOW_set_in_unary_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary_expression2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_primary_expression2305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_primary_expression2310 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_primary_expression2312 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_primary_expression2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_constant0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_expression2393 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_expression2398 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_assignment_expression_in_expression2403 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_constant_expression2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_expression2430 = new BitSet(new long[]{0x0000040000000000L,0x00000001FF800000L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment_expression2432 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_assignment_expression_in_assignment_expression2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_expression_in_assignment_expression2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_lvalue2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_assignment_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_or_expression_in_conditional_expression2531 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_conditional_expression2534 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_conditional_expression2536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_conditional_expression2538 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_conditional_expression_in_conditional_expression2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression2553 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_logical_or_expression2556 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression2558 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression2571 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_logical_and_expression2574 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression2576 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression2589 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_inclusive_or_expression2592 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression2594 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression2607 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_exclusive_or_expression2610 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression2612 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression2625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_and_expression2628 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression2630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression2642 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_set_in_equality_expression2645 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression2651 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression2664 = new BitSet(new long[]{0x0000000000000002L,0x00000F0000000000L});
    public static final BitSet FOLLOW_set_in_relational_expression2667 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression2677 = new BitSet(new long[]{0x0000000000000002L,0x00000F0000000000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression2693 = new BitSet(new long[]{0x0000000000000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_set_in_shift_expression2696 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression2702 = new BitSet(new long[]{0x0000000000000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_labeled_statement_in_statement2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_statement2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_statement2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_statement2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_statement2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parallel_statement_in_statement2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_statement2797 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_statement2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preemption_statment_in_statement2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scope_statement_in_statement2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_labeled_statement2837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_labeled_statement2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_labeled_statement2859 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_constant_expression_in_labeled_statement2861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_labeled_statement2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_labeled_statement2884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_labeled_statement2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_scope_statement2928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_scope_statement2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_scope_statement2954 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A77L});
    public static final BitSet FOLLOW_compound_statement_in_scope_statement2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_scope_statement2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scope_statement_in_condition_statement3011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_condition_statement3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_condition_statement3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_compound_statement3066 = new BitSet(new long[]{0xFFFD81000FF00002L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_statement_list_in_compound_statement3068 = new BitSet(new long[]{0xFFFD81000FF00002L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_statement_in_statement_list3083 = new BitSet(new long[]{0xFFFD81000FF00002L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_113_in_preemption_statment3101 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_preemption_statment3103 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_preemption_statment3110 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_preemption_statment3112 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_preemption_statment3114 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_preemption_statment3116 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_preemption_statment3118 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_preemption_statment3120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_preemption_statment3153 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_preemption_statment3155 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_preemption_statment3162 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_preemption_statment3164 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_preemption_statment3166 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_preemption_statment3168 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_preemption_statment3170 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_preemption_statment3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_parallel_statement3218 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_parallel_statement3220 = new BitSet(new long[]{0x0001000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_parallel_statement3231 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_48_in_parallel_statement3247 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_parallel_statement3285 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_parallel_statement3289 = new BitSet(new long[]{0x0002080000000000L});
    public static final BitSet FOLLOW_43_in_parallel_statement3312 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_parallel_statement3314 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_parallel_statement3329 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_parallel_statement3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_expression_statement3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_statement3396 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_expression_statement3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_selection_statement3434 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_selection_statement3436 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_selection_statement3438 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_selection_statement3440 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_selection_statement3459 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_selection_statement3481 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_selection_statement3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_selection_statement3574 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_selection_statement3576 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_selection_statement3578 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_selection_statement3580 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_selection_statement3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_iteration_statement3643 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_iteration_statement3645 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_iteration_statement3647 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_iteration_statement3649 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A7EL});
    public static final BitSet FOLLOW_67_in_iteration_statement3658 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_iteration_statement3660 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_iteration_statement3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_iteration_statement3702 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A7EL});
    public static final BitSet FOLLOW_67_in_iteration_statement3705 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_iteration_statement3707 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_iteration_statement3719 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_iteration_statement3721 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_iteration_statement3723 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_iteration_statement3725 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_iteration_statement3727 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_iteration_statement3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_iteration_statement3762 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_iteration_statement3764 = new BitSet(new long[]{0x000081000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_iteration_statement3771 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_iteration_statement3780 = new BitSet(new long[]{0x000081000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_iteration_statement3800 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_iteration_statement3810 = new BitSet(new long[]{0x000280000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_iteration_statement3842 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_iteration_statement3851 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A7EL});
    public static final BitSet FOLLOW_67_in_iteration_statement3868 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DECIMAL_LITERAL_in_iteration_statement3870 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A76L});
    public static final BitSet FOLLOW_condition_statement_in_iteration_statement3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_jump_statement3916 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_jump_statement3918 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_jump_statement3920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_jump_statement3930 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_jump_statement3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_jump_statement3941 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_jump_statement3943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_jump_statement3952 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_jump_statement3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_jump_statement3963 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_expression_in_jump_statement3965 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_jump_statement3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred2_PretC288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred4_PretC288 = new BitSet(new long[]{0x7FF9800000200000L,0x0000000000000276L});
    public static final BitSet FOLLOW_declarator_in_synpred4_PretC291 = new BitSet(new long[]{0xFFFD000000600000L,0x0000000000000076L});
    public static final BitSet FOLLOW_declaration_in_synpred4_PretC293 = new BitSet(new long[]{0xFFFD000000600000L,0x0000000000000076L});
    public static final BitSet FOLLOW_63_in_synpred4_PretC296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_synpred5_PretC308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred13_PretC539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_specifiers_in_synpred16_PretC645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_in_synpred51_PretC1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_synpred62_PretC1453 = new BitSet(new long[]{0x0000800000200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_direct_declarator_in_synpred62_PretC1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_suffix_in_synpred63_PretC1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_suffix_in_synpred65_PretC1511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_synpred68_PretC1562 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_parameter_type_list_in_synpred68_PretC1564 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred68_PretC1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_synpred69_PretC1576 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifier_list_in_synpred69_PretC1578 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred69_PretC1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_qualifier_in_synpred70_PretC1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_in_synpred71_PretC1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred72_PretC1603 = new BitSet(new long[]{0x0078000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_type_qualifier_in_synpred72_PretC1605 = new BitSet(new long[]{0x0078000000000002L,0x0000000000000260L});
    public static final BitSet FOLLOW_pointer_in_synpred72_PretC1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred73_PretC1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pointer_in_synpred73_PretC1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_synpred76_PretC1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred77_PretC1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_abstract_declarator_in_synpred81_PretC1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_suffix_in_synpred84_PretC1860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_synpred97_PretC2032 = new BitSet(new long[]{0x7FF9000000200000L,0x0000000000000076L});
    public static final BitSet FOLLOW_type_name_in_synpred97_PretC2034 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred97_PretC2036 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_cast_expression_in_synpred97_PretC2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_synpred102_PretC2088 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_unary_expression_in_synpred102_PretC2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_synpred123_PretC2430 = new BitSet(new long[]{0x0000040000000000L,0x00000001FF800000L});
    public static final BitSet FOLLOW_assignment_operator_in_synpred123_PretC2432 = new BitSet(new long[]{0x000080000FB00000L,0x0000000000739A00L});
    public static final BitSet FOLLOW_assignment_expression_in_synpred123_PretC2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_synpred158_PretC2928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred158_PretC2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_statement_in_synpred159_PretC3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_synpred160_PretC3002 = new BitSet(new long[]{0xFFFD81000FF00000L,0xFF73C00000739A77L});
    public static final BitSet FOLLOW_compound_statement_in_synpred160_PretC3004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred160_PretC3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_synpred161_PretC3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_synpred162_PretC3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_list_in_synpred163_PretC3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred164_PretC3083 = new BitSet(new long[]{0x0000000000000002L});

}