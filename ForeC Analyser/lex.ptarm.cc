
#line 3 "lex.ptarm.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ptarmFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *ptarmalloc (yy_size_t  );
void *ptarmrealloc (void *,yy_size_t  );
void ptarmfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ScannerPtarm::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[771] =
    {   0,
        0,    0,   65,   63,   62,   62,   23,   22,   29,   30,
       20,   63,   63,   21,   16,   16,   18,   19,   25,   26,
       16,   35,   27,   28,   24,   16,    3,   16,   16,   16,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       31,   32,   62,   63,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    0,   17,   17,   17,   16,   35,   35,
       16,   16,   16,    0,    0,    0,   16,   16,   35,   16,
       35,   35,   16,   16,   16,   35,   35,   35,    3,   35,
       35,   35,   35,   16,   35,   35,   35,   35,   13,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   12,   35,   35,   35,   35,   35,   13,
       35,   35,   35,   35,   35,    0,    0,    1,    1,    1,
        0,    0,    0,   33,    1,    1,    1,    1,    0,    1,
        1,    1,    1,    1,    1,    1,   17,    0,   17,   35,
       16,    0,    2,    2,    2,    0,   35,   35,   35,   35,
        6,    7,    6,    4,    4,   35,   35,    4,   35,    8,
        7,   35,   14,    9,   35,    9,    7,   10,    6,   10,
       10,   10,   10,   10,    9,   35,    7,   35,    6,    6,
       35,   11,   35,   11,    5,   10,    1,    0,    1,    0,
        1,   35,    1,    1,   35,    2,    0,    2,   35,    0,

       35,   16,   16,   16,   35,   35,   35,   35,   35,   35,
        6,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,    7,   35,    0,    0,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,    8,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,    9,   35,   35,   35,
       35,   35,    9,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,    9,   35,   35,   35,    9,   35,   35,   35,   35,
        9,    9,   35,    7,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,    6,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   10,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   10,   35,
       11,   11,   35,   35,   35,   35,   35,   11,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   11,   35,   35,   35,
       11,   35,   35,   35,   35,   11,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   10,   35,

       35,   35,   35,   35,   35,   35,   35,   35,    0,    1,
        1,    1,   34,    6,    6,    7,    0,   15,   15,   15,
        6,    7,   35,    9,    9,    9,    9,    6,   10,   10,
       10,   10,   35,   11,   11,   11,   11,    5,   10,    0,
        1,   15,    0,   15,   35,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   60,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   61,    0,   44,    0,    0,
        0,    0,    0,    0,   39,    0,    0,   36,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   43,    0,    0,    0,    0,    0,    0,    0,   38,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   40,    0,    0,   58,    0,
        0,    0,    0,    0,    0,    0,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,   57,
        0,    0,    0,    0,   55,    0,    0,    0,    0,    0,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       52,    0,    0,    0,    0,    0,   50,    0,    0,    0,
       51,    0,    0,    0,   49,   48,    0,    0,   47,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    1,    1,    1,    7,
        8,    1,    9,   10,   11,   12,   13,   14,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   17,   18,   19,
        1,   20,    1,    1,   21,   21,   21,   21,   22,   21,
       23,   24,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   25,   26,   23,   23,   23,   23,   23,   23,   23,
       27,    1,   28,   29,   23,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   23,   23,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       23,   23,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    1,
        4,    1,    1,    5,    5,    5,    6,    1,    1,    1,
        7,    7,    8,    8,    8,    8,    1,    1,    1,    7,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[803] =
    {   0,
        0,   50, 1883, 1884, 1884, 1884, 1884,   59, 1884, 1884,
     1884,   41, 1832, 1884,   53,   62, 1884, 1877, 1884, 1884,
      105, 1871, 1884, 1884, 1884,  132,  149,   46,   55,   57,
       51,   84,  190,   90,   86,  101,  160,  194,  125,  102,
     1884, 1884,  141,  103,  193,  196,  199,  242,   82,  248,
      183, 1837, 1835,  203,  251, 1826,   98,  238, 1867,  109,
     1824,    0,  146, 1823,  279,  285,  265,  271, 1864,  277,
      135,  113,  274,  289,  292,  212,  222,   93,  330,  163,
      211,  141,  294,  286,  240,  184,  328,  182, 1863,  342,
      336,  195,  239,  175,  315,  234,  161,  305,  319,  262,

      339,  322,  224,  307,  341,  283,  359,  348,  349,  332,
      374,  354,  380,  350,  345,  389,  393,  391, 1820,  406,
      409, 1857, 1866, 1884,  412, 1817,    0,  382, 1816, 1815,
        0,   30, 1826,  384, 1820, 1820,  420, 1851,  387,  412,
      410,  425,  432, 1810,  418,  435,  444, 1809,  442,  430,
      466,  507,  555, 1850,  421,  436,  455,  422,  443,  596,
      637,  428,  465,  671,  691,  711,  516,  745,  765,  785,
      805,  825,  845, 1849, 1848,  456,  466,  521, 1817, 1816,
      469,  879,  899,  919,  939,  959,  517, 1840, 1802, 1848,
      470, 1837,  979,    0,  477,  520, 1839,  477,  551, 1838,

      531,  530,  540,  567,  504,  561,  568,  473,  483,  540,
     1839,  551,  545,  571,  485,  559,  581,  607,  488,  600,
      579, 1838,  592,  619,  636,  620,  611,  531,  647,  622,
      649,  646,  631,  633,  653, 1837,  654,  670,  673,  666,
      652,  858,  680,  688,  697,  724,  700,  737,  728,  729,
      794,  992,  706,  740,  726,  746,  750,  757,  781,  789,
      753,  814,  995,  755,  782,  771,  841,  844,  861,  867,
      897,  869,  809,  908,  894,  998,  798,  829,  862,  880,
      871,  657,  935,  803,  936, 1005, 1012,  811,  887,  938,
     1018, 1836,  978,    0,  955, 1021,  899, 1014, 1022, 1038,

      820,  952,  994, 1041,  996, 1047,  948, 1035, 1053, 1054,
     1055, 1057, 1067, 1061,  914,  963, 1062, 1835, 1066, 1079,
     1074, 1080, 1081, 1085, 1087, 1088, 1093, 1100, 1105, 1101,
     1110, 1102, 1107, 1121, 1116, 1123, 1113, 1126, 1134, 1129,
     1139, 1108, 1135, 1140, 1155, 1136, 1161, 1144, 1834, 1164,
     1833, 1148, 1151, 1166, 1163, 1170, 1146, 1172, 1167, 1179,
     1182, 1184, 1185, 1190,  954, 1199, 1211, 1191, 1202, 1219,
     1200, 1214, 1217, 1194, 1222, 1206, 1218, 1226, 1230, 1228,
     1244, 1247, 1248, 1250, 1252,  655, 1251, 1257, 1255, 1254,
     1258, 1261, 1268, 1262, 1269, 1267, 1276, 1270, 1832, 1279,

     1260, 1286, 1303, 1304, 1307, 1308, 1309, 1312, 1805, 1800,
      721, 1794, 1828, 1310, 1290, 1315, 1312, 1348, 1785,  541,
     1826, 1825, 1334, 1824, 1823, 1343, 1323, 1331, 1320, 1822,
     1821, 1325, 1348, 1820, 1819, 1356, 1818, 1817,  639, 1783,
     1778, 1380, 1812, 1362, 1375, 1376, 1777, 1787, 1788, 1802,
     1354, 1771, 1365, 1780, 1782, 1778, 1784, 1768, 1767, 1777,
     1763, 1775, 1778, 1774, 1772, 1775, 1757, 1755, 1762, 1768,
     1762, 1760, 1764, 1780, 1754, 1761, 1753,    0, 1752, 1747,
     1744, 1773, 1772, 1771, 1770, 1769, 1301,    0, 1384, 1348,
     1744, 1737, 1766, 1751, 1739, 1738, 1732, 1748, 1743, 1739,

     1744, 1744, 1740, 1742, 1754, 1739, 1727, 1726, 1719, 1732,
     1720, 1734, 1718, 1720,  723, 1884, 1716, 1718, 1714, 1711,
     1716, 1711, 1731, 1722, 1719, 1707, 1734, 1704, 1702, 1700,
     1700, 1729, 1698, 1714, 1713, 1695, 1711, 1693,    0, 1705,
     1884, 1697, 1713, 1364, 1702, 1688, 1693, 1695, 1699, 1714,
     1713, 1712, 1695, 1697, 1685, 1678, 1679, 1685, 1689, 1679,
     1695,    0, 1702, 1373,    0, 1701, 1676, 1683, 1685, 1697,
     1671, 1673, 1670, 1676, 1692, 1667, 1660, 1689, 1409, 1672,
     1884, 1659, 1384, 1662, 1668,  482, 1661, 1683, 1386, 1666,
     1668, 1680, 1387, 1420, 1657, 1648, 1653, 1646, 1670, 1646,

     1649, 1642, 1646, 1646, 1370, 1884, 1641, 1644, 1637, 1424,
     1649, 1884, 1649, 1651, 1639, 1662, 1645, 1647, 1627, 1642,
     1632, 1643, 1625, 1638, 1640, 1427, 1624, 1884, 1623, 1634,
        0, 1649, 1620, 1630, 1884, 1620, 1617, 1884, 1884, 1616,
     1643, 1612, 1641, 1640,    0, 1609, 1638, 1620, 1606, 1605,
        0, 1884,    0, 1634,  215, 1633, 1632,    0, 1631, 1884,
     1884, 1630, 1629, 1615, 1605, 1626,  966,    0, 1625, 1607,
     1623, 1430, 1622, 1413, 1592, 1607, 1606, 1596, 1617, 1616,
     1414, 1591, 1435, 1590, 1494, 1490, 1484, 1483, 1497, 1498,
     1415, 1471, 1460, 1472, 1419, 1469, 1470, 1460, 1456, 1442,

     1439, 1451, 1441, 1421, 1398, 1884, 1385, 1364, 1884, 1359,
     1343, 1362, 1326, 1321, 1307, 1309, 1884, 1292, 1297, 1250,
     1226, 1442, 1132, 1119, 1031, 1008,  970, 1884,  929, 1884,
     1452, 1448,  931,  880, 1884,  843, 1436, 1457,  827,  852,
     1884,  810,  783, 1441, 1462,  776,  743,  678,  641, 1469,
     1884,  599,  545,  544, 1445,  378, 1884,  354,  315,  261,
     1884,  147,  144,  131, 1884, 1884,   63,   11, 1884, 1884,
     1488, 1489, 1494, 1501, 1509, 1516, 1521, 1527, 1531, 1535,
     1536, 1541, 1544, 1549, 1552, 1557, 1560, 1563, 1568, 1573,
     1576, 1581, 1584, 1587, 1590, 1595, 1598, 1603, 1608, 1611,

     1616, 1621
    } ;

static yyconst flex_int16_t yy_def[803] =
    {   0,
      770,    1,  770,  770,  770,  770,  770,  771,  770,  770,
      770,  770,  772,  770,  773,  773,  770,  770,  770,  770,
      774,  774,  770,  770,  770,  774,   26,   26,   26,   26,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      770,  770,  775,  770,  776,  777,  777,  774,   48,   48,
       48,   48,   48,  770,  771,   55,  771,  770,  774,  774,
       16,   16,  773,  773,  778,  779,   26,   26,  774,   26,
      774,  774,   26,   26,   26,  774,  774,  774,  774,  774,
      774,  774,  774,   26,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,   37,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  775,  770,  116,  118,  775,
      770,  770,  776,  770,  776,   47,   47,  777,  777,   48,
       48,   48,   48,   48,   48,   48,  770,  771,  771,  774,
      773,  770,  778,  143,  778,  770,  779,  147,  779,   26,
       26,  774,  774,  774,   26,  774,  774,  774,  774,  774,
      774,  774,  774,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  774,  774,  774,  161,  774,  169,  169,
      774,  161,  161,  161,  161,  161,  770,  120,  120,  770,
      777,   48,   48,   48,  774,  770,  778,  778,  770,  779,

      779,   26,   26,   26,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  770,  780,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  161,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  169,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  770,   48,
       48,   48,  774,  774,   26,  774,  770,  780,  418,  780,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  770,
       48,  770,  780,  780,  774,  774,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  781,  770,  770,
      770,  782,  770,  770,  770,  782,  770,  783,  770,  770,
      770,  770,  784,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  784,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  785,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      786,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  787,  786,  770,  788,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  789,  770,  770,  790,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  789,  770,  770,
      770,  790,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      791,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  792,  793,  770,  770,  770,  770,  770,
      794,  770,  795,  792,  770,  796,  770,  797,  770,  770,
      770,  798,  799,  770,  770,  796,  770,  800,  801,  770,
      798,  770,  799,  770,  770,  770,  770,  770,  802,  801,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  802,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,    0,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770
    } ;

static yyconst flex_int16_t yy_nxt[1938] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,   11,
       12,   13,   14,   15,   16,   16,   17,   18,   19,   20,
       21,   21,   22,   22,   22,   22,   23,   24,   25,   26,
       27,   28,   21,   29,   30,   22,   22,   31,   32,   33,
       34,   35,   36,   22,   37,   38,   39,   40,   22,   22,
       22,   41,   42,   43,   58,   58,   58,  769,   44,   66,
       45,  193,  193,   46,   47,   47,   61,   62,   62,   54,
       48,   48,   55,   56,   56,   61,   62,   62,   84,   49,
       50,   51,   48,   52,   53,   85,   69,   68,   86,   68,
       87,   69,   66,   89,   66,   69,   88,   69,   66,   89,

       69,   66,   69,   64,  121,  121,  121,  768,  770,   66,
       66,  139,  770,   66,  132,  122,   90,   66,   67,   68,
       68,   66,   71,   99,  152,   68,   68,   72,   89,   91,
      101,  100,   89,   66,   68,   68,   68,   68,   68,   68,
       66,  109,  102,   66,  116,   67,   68,   68,  103,   66,
      140,  117,   68,   68,  118,  119,  119,  153,  114,  141,
      767,   68,   68,   68,   70,   68,   68,  152,   66,   66,
      115,   66,   71,  104,  104,  104,  766,   72,   73,  154,
       74,   68,   75,   66,   76,   77,   78,   79,   80,   81,
       66,   82,   66,  765,   69,  124,  770,   83,   66,  169,

      154,  105,   66,   66,  106,  107,  125,  125,  125,  126,
      127,  127,  126,  127,  127,  136,  137,  137,  137,   66,
       66,   92,   85,  170,  108,   86,  152,   87,   93,  162,
       66,   94,   66,  109,   95,   96,  110,   97,   98,  168,
      111,  112,   66,  113,  154,  154,  129,   66,   66,  770,
       66,   58,   58,   58,  664,  130,  131,  131,  154,  154,
      665,  770,  131,  131,   55,   56,   56,  154,  169,  176,
       66,  131,  131,  131,  131,  131,  131,  133,  172,  134,
      161,  135,  161,   76,   77,   78,   79,   80,   81,  142,
       82,   66,  143,  144,  144,  146,   83,   68,  147,  148,

      148,  138,   66,   68,  174,   69,   68,  764,  151,  151,
       69,   69,  154,   66,   69,  150,   69,   69,   68,   69,
      155,   68,   69,   66,   68,  154,   69,   66,  160,   69,
       66,   69,   69,  178,  154,  154,   66,   69,   66,  154,
       66,  163,  163,  163,   66,  173,  171,   66,   69,   66,
       66,   69,   69,   66,  161,  763,   66,   66,   66,  156,
      171,  157,   66,  158,  175,   76,   77,   66,  159,   80,
       81,  154,   82,  164,  167,  154,  154,  181,   83,  180,
      167,  165,   66,  152,  180,  177,  166,   93,   66,  179,
      179,  161,  116,  161,  770,  191,   97,  770,  762,  117,

      139,  770,  118,  119,  119,  182,  187,  187,  187,  770,
      121,  121,  121,  183,  124,  194,  770,  185,  184,  189,
       66,  122,  186,  141,  761,  125,  125,  125,  770,  154,
       66,  198,  770,  137,  137,  137,   66,  138,  196,  196,
      196,  188,  770,   68,   66,  143,  144,  144,  199,  199,
      199,   66,  770,   68,  770,  201,  195,  147,  148,  148,
       64,   69,   68,   66,   66,  154,   69,  224,  224,  224,
       69,  225,   89,   66,  154,   69,  154,   66,  163,  163,
      163,   66,  197,  191,  154,   66,  154,  770,  154,  154,
      198,   66,  351,   66,  200,  202,   66,  203,   68,  204,

      154,  205,  206,  601,  207,  208,  209,  602,  210,  413,
      414,  211,   66,   89,  212,   66,  414,  224,  224,  224,
      129,  225,  224,  224,  224,  416,  225,  197,  416,   66,
      187,  187,  187,  196,  196,  196,  213,  414,  214,   66,
      215,  770,  216,  217,  201,  218,  219,  220,   66,  221,
      414,  770,  222,   66,  444,  223,  224,  224,  224,   66,
      225,  294,   68,   66,  199,  199,  199,   66,  414,   66,
       69,  415,   68,  758,  421,   69,   66,  757,  414,   66,
       69,  200,  414,  416,  226,  414,  227,   66,  228,   66,
      229,  230,  416,  231,  232,  233,  414,  234,  414,   68,

       66,  414,  416,  235,   66,  416,  414,   69,   66,  414,
      414,  236,   69,  414,  414,   66,  416,  416,  416,   66,
      224,  224,  224,  416,  225,  237,  416,  238,   66,  239,
       66,  240,  241,  416,  242,  243,  244,  416,  245,   66,
      416,   66,  421,  756,  246,   66,  417,   66,  416,  418,
      419,  419,  416,  416,   66,   66,  421,   66,  421,  421,
       66,   66,   66,   66,  421,   66,  247,  421,  248,  399,
      249,  421,  250,  251,   66,  252,  253,  254,   66,  255,
      421,   66,  421,  421,  421,  256,  257,  754,   66,  236,
      421,  437,  236,  421,  421,  421,   66,  236,  421,  236,

      258,  236,  259,  292,  260,   66,  261,  262,   66,  263,
      264,  265,  236,  266,   66,  236,  236,  236,  753,  267,
      268,  236,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,   66,  279,   66,  236,   66,   66,  422,  280,
      281,  282,  283,  422,  284,   66,  285,  286,   66,  287,
      288,  289,  441,  290,   66,  236,  291,  292,   66,  293,
      174,   66,  422,   66,  422,   66,  414,  527,  422,  236,
      528,  422,  752,  422,  295,  422,  296,  422,  297,   66,
      298,  299,  422,  300,  301,  302,  257,  303,  175,   66,
       66,  422,  257,  304,  305,  257,  306,   66,  307,  257,

      205,  206,   66,  308,  208,  209,   66,  210,  751,  257,
      211,   66,  257,  212,  309,  257,  310,   66,  311,   66,
      312,  313,   66,  314,  315,  316,  257,  317,   66,  747,
      318,  422,  257,  319,  320,  423,  321,   66,  322,  422,
      323,  324,  423,  325,  326,  327,  426,  328,  426,   66,
      746,  257,   66,  329,  330,  423,  331,  174,  332,  257,
      333,  334,  423,  335,  336,  337,   66,  338,  745,   66,
       66,  740,  257,  339,  340,   66,  341,   66,  342,   66,
      343,  344,  423,  345,  346,  347,  257,  348,   66,  741,
      349,  236,  423,  350,  352,   66,  424,  424,  425,  236,

      423,  425,   66,  236,  236,   66,  423,   66,  353,  426,
      354,  423,  355,  740,  356,  357,   66,  358,  359,  360,
      426,  361,   66,  424,  424,  423,  425,  362,  363,  425,
      364,  365,  366,  367,  368,  369,  370,  371,  372,  373,
      423,  374,  174,   66,   66,  423,   66,  375,  376,  377,
      378,  429,  379,  423,  380,  381,   66,  382,  383,  384,
       66,  385,   66,   66,  739,  386,  426,  387,  388,  426,
      389,   66,  390,  736,  391,  392,  426,  393,  394,  395,
      426,  396,  426,  434,  434,  174,   66,  397,  398,  399,
      400,  414,  401,  174,  402,  403,  429,  404,  405,  406,

       66,  407,   66,   66,   66,  677,   66,  408,  410,  426,
      411,  678,  412,   66,  205,  206,  735,  207,  208,  209,
       66,  210,   66,  426,  211,  422,   66,  212,  257,   66,
       66,  423,  174,  422,  414,  282,  257,  422,  422,  423,
      257,  257,  426,  423,  423,  426,   66,  174,  282,   66,
      426,  292,  174,  426,  427,   66,  734,  426,  426,  174,
      174,   66,   66,   66,  292,   66,  174,  174,  428,   66,
       66,  174,  174,  207,   66,   66,  414,  733,  414,  174,
      414,  414,   66,  174,  174,  429,  174,   66,   66,   66,
      429,  429,  414,   66,  429,   66,   66,  429,  429,  429,

      429,   66,  429,  429,  429,  430,  429,  429,   66,   66,
       66,  429,  429,   66,  430,   66,   66,  430,   66,  430,
      430,   66,  430,  430,   66,  430,  430,  430,  430,   66,
      430,   66,  430,  430,   66,  732,  430,   66,  430,  431,
      431,  431,   66,   66,   66,  431,  431,   66,   66,  431,
      430,  432,   66,  431,   66,  431,   66,  431,  431,   66,
      431,  431,  431,   66,  431,  431,  431,  432,  432,   66,
      432,   66,   66,  432,   66,   66,  724,  432,   66,  431,
       66,  432,  432,  352,  432,  432,  351,   66,  432,  352,
       66,  352,   66,   66,  432,  432,  432,  352,   66,   66,

      432,  432,   66,  352,  352,  352,  352,   66,   66,  432,
       66,  352,  352,  352,   66,  352,  352,  352,  352,   66,
      352,  433,   66,  433,  433,   66,   66,   66,  435,  352,
       66,  435,  433,  433,   66,  433,   66,  433,   66,  433,
      435,  433,  433,  435,  436,  433,  433,  433,  434,  434,
      433,  433,   66,  433,  437,   66,   66,  436,   66,   66,
       66,  436,   66,   66,  386,   66,   66,  433,   66,   66,
       66,  436,  730,  436,  436,   66,   66,   66,   66,  729,
      436,  436,  436,  436,   66,  436,  438,   66,  436,  436,
      436,  438,  436,  436,   66,  438,  436,  438,  438,  438,

      438,  438,  438,  439,  438,  438,  438,  438,  439,  438,
      439,   66,   66,  438,  438,   66,   66,   66,   66,  439,
       66,  438,   68,   66,  439,  442,  442,  442,   66,  728,
       69,   66,  439,   66,  491,  211,  727,  439,  726,   66,
      439,  439,   66,  439,  439,  439,  492,  439,  439,  439,
      439,   66,  725,  282,  724,  211,   66,  439,  770,  723,
      222,  418,  419,  419,   66,  318,  270,  445,  272,  292,
      349,  275,  770,  282,  414,  444,  211,  501,  722,  427,
      365,  446,  367,   66,   66,  370,  377,  712,  291,  292,
      502,  452,  437,  442,  442,  442,  456,  555,  443,  453,

      454,  621,  386,  721,  425,  435,  576,  425,  435,  556,
      720,  457,  443,  494,  495,  496,  622,  597,  577,  604,
      608,  497,  594,  594,  594,  719,  498,  718,  499,  598,
      500,  605,  609,  594,  594,  594,  610,  626,  626,  626,
      626,  626,  626,  683,  683,  683,  684,  692,  683,  683,
      683,  695,  707,  717,  702,  731,  731,  731,  685,  693,
      703,  738,  738,  738,  708,  731,  731,  731,  737,  742,
      738,  738,  738,  744,  748,  750,  750,  750,  759,  716,
      715,  743,  750,  750,  750,  755,  749,  714,  713,  712,
      760,   57,   57,  711,   57,   59,   59,   59,   63,  710,

       63,  709,   63,   69,  706,   69,  705,   69,   69,   69,
      120,  704,  120,  120,  691,  120,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  128,  701,  128,  700,  128,
      145,  145,  699,  145,  149,  149,  698,  149,  420,  420,
      697,  420,  482,  482,  482,  486,  486,  486,  486,  486,
      493,  493,  493,  505,  505,  505,  505,  505,  551,  551,
      551,  563,  563,  563,  563,  563,  575,  575,  575,  578,
      578,  578,  588,  588,  588,  588,  588,  592,  592,  592,
      592,  592,  644,  644,  644,  654,  654,  654,  654,  654,
      656,  656,  656,  662,  662,  662,  663,  663,  663,  666,

      666,  666,  666,  666,  669,  669,  669,  671,  671,  671,
      671,  671,  673,  673,  673,  673,  673,  679,  679,  679,
      680,  680,  680,  680,  680,  690,  690,  690,  690,  690,
      696,  694,  681,  691,  689,  688,  687,  686,  674,  672,
      682,  681,  667,  676,  675,  674,  672,  670,  668,  667,
      655,  661,  660,  659,  658,  657,  655,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  625,  624,  623,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  593,  607,  606,  589,

      603,  600,  599,  596,  595,  593,  591,  590,  589,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  564,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      562,  561,  560,  559,  558,  557,  554,  553,  552,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      506,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  504,  503,  487,  490,  489,  488,  487,
      485,  484,  483,  481,  480,  479,  478,  477,  476,  475,

      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  455,  451,  450,
      449,  448,  770,  211,  447,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  770,   66,  414,  414,  440,
       66,   66,   66,   66,   66,   66,   66,   66,  770,  770,
      131,  409,  188,  120,  207,  207,   66,   66,   66,  770,
      770,  770,  160,  154,  154,  192,  770,  129,  124,  190,
      770,   66,   66,  770,   64,   66,  770,   89,   88,   66,
       65,   60,  770,    3,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770
    } ;

static yyconst flex_int16_t yy_chk[1938] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,   12,   12,   12,  768,    2,   31,
        2,  132,  132,    2,    2,    2,   15,   15,   15,    8,
        2,    2,    8,    8,    8,   16,   16,   16,   28,    2,
        2,    2,    2,    2,    2,   28,   28,   29,   28,   30,
       28,   28,   32,   31,   35,   29,   29,   30,   34,   30,

       29,   78,   30,   15,   44,   44,   44,  767,   57,   36,
       40,   57,   16,   21,   49,   44,   32,   60,   21,   21,
       21,   72,   49,   34,   78,   21,   21,   49,   32,   32,
       35,   34,   36,   39,   21,   21,   21,   21,   21,   21,
       26,   40,   36,   71,   43,   26,   26,   26,   36,   82,
       60,   43,   26,   26,   43,   43,   43,   72,   39,   63,
      764,   26,   26,   26,   26,   26,   26,   71,   37,   97,
       39,   80,   26,   37,   37,   37,  763,   26,   27,   82,
       27,   27,   27,   94,   27,   27,   27,   27,   27,   27,
       88,   27,   86,  762,   27,   45,   63,   27,   33,   97,

       80,   37,   38,   92,   37,   37,   45,   45,   45,   46,
       46,   46,   47,   47,   47,   51,   54,   54,   54,   81,
       76,   33,   51,   94,   38,   51,   88,   51,   33,   86,
       77,   33,  103,   38,   33,   33,   38,   33,   33,   92,
       38,   38,   96,   38,   81,   76,   46,   93,   85,   47,
       48,   58,   58,   58,  655,   48,   48,   48,   76,   77,
      655,   55,   48,   48,   55,   55,   55,   77,   93,  103,
      100,   48,   48,   48,   48,   48,   48,   50,   96,   50,
       85,   50,   85,   50,   50,   50,   50,   50,   50,   65,
       50,  106,   65,   65,   65,   66,   50,   67,   66,   66,

       66,   55,   83,   68,  100,   67,   73,  760,   70,   70,
       67,   68,   73,   98,   73,   67,   68,   70,   84,   73,
       74,   74,   70,   95,   75,   83,   84,   99,   84,   74,
      102,   84,   75,  106,   74,   75,   87,   75,   79,   83,
      110,   87,   87,   87,   91,   98,   95,  101,  104,  105,
       90,  104,  104,  115,   99,  759,  108,  109,  114,   79,
       95,   79,  112,   79,  102,   79,   79,  107,   79,   79,
       79,   79,   79,   90,   91,   79,   79,  110,   79,  108,
       91,   90,  111,  101,  112,  105,   90,  109,  113,  107,
      107,  115,  116,  114,  118,  128,  109,  139,  758,  116,

      139,  118,  116,  116,  116,  111,  117,  117,  117,  120,
      121,  121,  121,  111,  125,  134,  120,  113,  111,  120,
      140,  121,  113,  141,  756,  125,  125,  125,  145,  134,
      158,  145,  128,  137,  137,  137,  162,  139,  142,  142,
      142,  118,  143,  150,  156,  143,  143,  143,  146,  146,
      146,  159,  149,  155,  147,  149,  140,  147,  147,  147,
      141,  155,  150,  157,  176,  158,  155,  177,  177,  177,
      150,  177,  162,  163,  156,  150,  159,  181,  163,  163,
      163,  208,  143,  191,  159,  195,  157,  198,  159,  159,
      198,  209,  176,  215,  147,  151,  219,  151,  151,  151,

      157,  151,  151,  586,  151,  151,  151,  586,  151,  195,
      208,  151,  205,  181,  151,  152,  209,  167,  167,  167,
      191,  167,  178,  178,  178,  219,  178,  198,  215,  178,
      187,  187,  187,  196,  196,  196,  152,  205,  152,  228,
      152,  201,  152,  152,  201,  152,  152,  152,  210,  152,
      205,  420,  152,  213,  420,  152,  153,  153,  153,  212,
      153,  167,  202,  153,  199,  199,  199,  216,  202,  206,
      202,  203,  203,  754,  228,  202,  207,  753,  210,  214,
      203,  201,  212,  213,  153,  203,  153,  221,  153,  217,
      153,  153,  216,  153,  153,  153,  212,  153,  206,  204,

      223,  207,  214,  153,  160,  216,  206,  204,  220,  207,
      204,  160,  204,  207,  207,  218,  214,  221,  217,  227,
      224,  224,  224,  223,  224,  160,  217,  160,  226,  160,
      230,  160,  160,  220,  160,  160,  160,  223,  160,  233,
      218,  234,  227,  752,  160,  161,  225,  439,  218,  225,
      225,  225,  218,  218,  232,  229,  227,  231,  226,  230,
      241,  235,  237,  386,  233,  282,  161,  230,  161,  439,
      161,  234,  161,  161,  240,  161,  161,  161,  238,  161,
      229,  239,  231,  232,  235,  161,  164,  749,  243,  241,
      231,  386,  237,  229,  231,  231,  244,  241,  235,  240,

      164,  238,  164,  282,  164,  245,  164,  164,  247,  164,
      164,  164,  240,  164,  253,  238,  239,  243,  748,  164,
      165,  244,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  246,  165,  255,  245,  249,  250,  247,  165,
      166,  166,  166,  253,  166,  248,  166,  166,  254,  166,
      166,  166,  411,  166,  256,  246,  166,  166,  257,  166,
      168,  261,  250,  264,  255,  258,  411,  515,  248,  246,
      515,  249,  747,  254,  168,  250,  168,  256,  168,  266,
      168,  168,  248,  168,  168,  168,  261,  168,  257,  259,
      265,  256,  264,  168,  169,  258,  169,  260,  169,  261,

      169,  169,  251,  169,  169,  169,  277,  169,  746,  266,
      169,  284,  259,  169,  170,  265,  170,  273,  170,  288,
      170,  170,  262,  170,  170,  170,  259,  170,  301,  743,
      170,  251,  260,  170,  171,  277,  171,  278,  171,  251,
      171,  171,  273,  171,  171,  171,  284,  171,  288,  267,
      742,  262,  268,  171,  172,  273,  172,  301,  172,  262,
      172,  172,  278,  172,  172,  172,  242,  172,  740,  269,
      279,  739,  267,  172,  173,  270,  173,  272,  173,  281,
      173,  173,  268,  173,  173,  173,  267,  173,  280,  736,
      173,  242,  269,  173,  182,  289,  270,  270,  272,  242,

      279,  272,  275,  242,  242,  271,  269,  297,  182,  281,
      182,  280,  182,  734,  182,  182,  274,  182,  182,  182,
      289,  182,  315,  275,  275,  280,  271,  182,  183,  271,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      271,  183,  297,  283,  285,  274,  290,  183,  184,  184,
      184,  315,  184,  274,  184,  184,  307,  184,  184,  184,
      302,  184,  365,  295,  733,  184,  283,  184,  185,  285,
      185,  316,  185,  729,  185,  185,  290,  185,  185,  185,
      283,  185,  285,  365,  365,  302,  293,  185,  186,  186,
      186,  307,  186,  295,  186,  186,  316,  186,  186,  186,

      252,  186,  303,  263,  305,  667,  276,  186,  193,  293,
      193,  667,  193,  286,  193,  193,  727,  193,  193,  193,
      287,  193,  298,  293,  193,  252,  291,  193,  263,  296,
      299,  276,  303,  252,  305,  286,  263,  252,  252,  276,
      263,  263,  286,  276,  276,  287,  300,  298,  291,  304,
      286,  286,  296,  287,  291,  306,  726,  287,  287,  299,
      298,  309,  310,  311,  291,  312,  296,  299,  308,  314,
      317,  300,  304,  308,  319,  313,  308,  725,  306,  300,
      308,  308,  321,  300,  300,  310,  304,  320,  322,  323,
      312,  309,  306,  324,  314,  325,  326,  319,  311,  310,

      317,  327,  314,  312,  313,  321,  314,  314,  328,  330,
      332,  319,  313,  329,  323,  333,  342,  320,  331,  321,
      325,  337,  324,  322,  335,  326,  327,  323,  325,  334,
      324,  336,  325,  325,  338,  724,  329,  340,  328,  330,
      333,  331,  339,  343,  346,  332,  337,  341,  344,  335,
      329,  342,  348,  333,  357,  331,  352,  335,  334,  353,
      336,  335,  335,  345,  338,  339,  334,  340,  343,  347,
      341,  355,  350,  346,  354,  359,  723,  344,  356,  339,
      358,  343,  348,  357,  341,  344,  352,  360,  345,  353,
      361,  357,  362,  363,  347,  350,  345,  354,  364,  368,

      345,  345,  374,  356,  359,  358,  355,  366,  371,  350,
      369,  354,  360,  358,  376,  362,  356,  358,  358,  367,
      361,  364,  372,  363,  368,  373,  377,  370,  366,  362,
      375,  366,  374,  371,  378,  364,  380,  368,  379,  369,
      367,  371,  366,  367,  376,  371,  371,  369,  370,  370,
      373,  372,  381,  375,  377,  382,  383,  378,  384,  387,
      385,  380,  390,  389,  377,  388,  391,  375,  401,  392,
      394,  378,  721,  379,  380,  396,  393,  395,  398,  720,
      382,  381,  387,  384,  397,  383,  389,  400,  382,  381,
      385,  391,  382,  382,  402,  388,  387,  390,  392,  394,

      389,  393,  395,  401,  391,  396,  392,  397,  398,  393,
      400,  403,  404,  393,  393,  405,  406,  407,  414,  402,
      408,  397,  415,  416,  400,  417,  417,  417,  429,  719,
      415,  427,  402,  432,  487,  415,  718,  404,  716,  428,
      403,  406,  423,  408,  405,  404,  487,  407,  403,  404,
      404,  426,  715,  427,  714,  414,  433,  408,  418,  713,
      416,  418,  418,  418,  436,  429,  423,  423,  423,  427,
      432,  423,  444,  426,  428,  444,  428,  490,  712,  426,
      433,  433,  433,  445,  446,  433,  436,  711,  426,  426,
      490,  451,  436,  442,  442,  442,  453,  544,  418,  451,

      451,  605,  436,  710,  445,  446,  564,  445,  446,  544,
      708,  453,  444,  489,  489,  489,  605,  583,  564,  589,
      593,  489,  579,  579,  579,  707,  489,  705,  489,  583,
      489,  589,  593,  594,  594,  594,  594,  610,  610,  610,
      626,  626,  626,  672,  672,  672,  674,  681,  683,  683,
      683,  683,  695,  704,  691,  722,  722,  722,  674,  681,
      691,  732,  732,  732,  695,  731,  731,  731,  731,  737,
      738,  738,  738,  738,  744,  745,  745,  745,  755,  703,
      702,  737,  750,  750,  750,  750,  744,  701,  700,  699,
      755,  771,  771,  698,  771,  772,  772,  772,  773,  697,

      773,  696,  773,  774,  694,  774,  693,  774,  774,  774,
      775,  692,  775,  775,  690,  775,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  777,  689,  777,  688,  777,
      778,  778,  687,  778,  779,  779,  686,  779,  780,  780,
      685,  780,  781,  781,  781,  782,  782,  782,  782,  782,
      783,  783,  783,  784,  784,  784,  784,  784,  785,  785,
      785,  786,  786,  786,  786,  786,  787,  787,  787,  788,
      788,  788,  789,  789,  789,  789,  789,  790,  790,  790,
      790,  790,  791,  791,  791,  792,  792,  792,  792,  792,
      793,  793,  793,  794,  794,  794,  795,  795,  795,  796,

      796,  796,  796,  796,  797,  797,  797,  798,  798,  798,
      798,  798,  799,  799,  799,  799,  799,  800,  800,  800,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      684,  682,  680,  679,  678,  677,  676,  675,  673,  671,
      670,  669,  666,  665,  664,  663,  662,  659,  657,  656,
      654,  650,  649,  648,  647,  646,  644,  643,  642,  641,
      640,  637,  636,  634,  633,  632,  630,  629,  627,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  611,  609,  608,  607,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  592,  591,  590,  588,

      587,  585,  584,  582,  580,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  563,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  543,  542,  540,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  486,  485,  484,  483,  482,
      481,  480,  479,  477,  476,  475,  474,  473,  472,  471,

      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  452,  450,  449,
      448,  447,  443,  441,  440,  438,  437,  435,  434,  431,
      430,  425,  424,  422,  421,  419,  413,  412,  410,  409,
      399,  351,  349,  318,  292,  236,  222,  211,  200,  197,
      192,  190,  189,  188,  180,  179,  175,  174,  154,  148,
      144,  138,  136,  135,  133,  130,  129,  126,  123,  122,
      119,   89,   69,   64,   61,   59,   56,   53,   52,   22,
       18,   13,    3,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[65] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ScannerPtarm.l"
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 9 "ScannerPtarm.l"
	#include <cstdio>
	#include <iomanip>
	#include <sstream>
	#include "ScannerPtarm.hpp"
	
	void unmatched(const std::string yytext);
	void count(const std::string yytext, const int lineno);
/* White space */
/* Digit */
/* Letter */
/* Hexadecimal */
/* Identifier */
/* Constant */
/* Shifted Operand */
/* Label */
/* Program Counter */
/* Registers */
/* Symbolic instructions */
/* Source code */
/* Analysis annotations */
#line 1157 "lex.ptarm.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 104 "ScannerPtarm.l"



#line 1291 "lex.ptarm.cc"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 771 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1884 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* Program Counters */
case 1:
YY_RULE_SETUP
#line 108 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::PC); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 109 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::PC_1); }
	YY_BREAK
/* Assembly instructions */
case 3:
YY_RULE_SETUP
#line 113 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::BRANCH_UNCONDITIONAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 114 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::BRANCH_CONDITIONAL); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 115 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::BRANCH_UNCONDITIONAL); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 116 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::ARITHMETIC_INTEGER); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 117 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::LOGIC); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 118 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::COPROCESSOR); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 119 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::READ); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 120 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::MOVE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 121 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::STORE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::REGISTERS_GENERAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::REGISTERS_SPECIAL); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 125 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::COPROCESSOR_REGISTERS); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 126 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::SHIFTED_OPERAND); }
	YY_BREAK
/* Numbers */
case 16:
YY_RULE_SETUP
#line 130 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::CONSTANT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::CONSTANT); }
	YY_BREAK
/* Characters */
case 18:
YY_RULE_SETUP
#line 135 "ScannerPtarm.l"
{ count(yytext, yylineno); return(':'); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 136 "ScannerPtarm.l"
{ count(yytext, yylineno); return(';'); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "ScannerPtarm.l"
{ count(yytext, yylineno); return(','); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 138 "ScannerPtarm.l"
{ count(yytext, yylineno); return('/'); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "ScannerPtarm.l"
{ count(yytext, yylineno); return('#'); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "ScannerPtarm.l"
{ count(yytext, yylineno); return('!'); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "ScannerPtarm.l"
{ count(yytext, yylineno); return('^'); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 143 "ScannerPtarm.l"
{ count(yytext, yylineno); return('<'); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 144 "ScannerPtarm.l"
{ count(yytext, yylineno); return('>'); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 145 "ScannerPtarm.l"
{ count(yytext, yylineno); return('['); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 146 "ScannerPtarm.l"
{ count(yytext, yylineno); return(']'); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 147 "ScannerPtarm.l"
{ count(yytext, yylineno); return('('); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 148 "ScannerPtarm.l"
{ count(yytext, yylineno); return(')'); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "ScannerPtarm.l"
{ count(yytext, yylineno); return('{'); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 150 "ScannerPtarm.l"
{ count(yytext, yylineno); return('}'); }
	YY_BREAK
/* Source lines */
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 154 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); yylval->str->erase(yylval->str->begin()); return(forec::loader::ParserPtarm::token::C_SOURCE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::DATA); }
	YY_BREAK
/* Assembly label */
case 35:
YY_RULE_SETUP
#line 159 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::LABEL); }
	YY_BREAK
/* Analysis annotations */
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 163 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_PAR_START); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 164 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_PAR_END); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 165 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_ABORT_START); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 166 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_ABORT_END); }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 167 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_ABORT_SCOPE_END); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 168 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_PAUSE_START); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 169 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_STATEMENT_PAUSE_END); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 171 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_COUNTER_START); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 172 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_COUNTER_END); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 175 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_BOOT_START); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 176 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_BOOT_END); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 177 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_REACTION_START_START); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 178 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_REACTION_START_END); }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 179 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_REACTION_END_START); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 180 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_REACTION_END_END); }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 181 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_PAR_HANDLER_START); }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 182 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_PAR_HANDLER_END); }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 183 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_ABORT_HANDLER_START); }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 184 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_ABORT_HANDLER_END); }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 186 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_THREAD_REMOVE_START); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 187 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_THREAD_REMOVE_END); }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 188 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_ITERATION_END_START); }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 189 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_SCHEDULER_ITERATION_END_END); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 191 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_THREAD_START); }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 192 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_THREAD_END); }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 194 "ScannerPtarm.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserPtarm::token::FOREC_ITERATION_BOUND); }
	YY_BREAK
/* Whitespace */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 198 "ScannerPtarm.l"
{ count(yytext, yylineno); /* Ignore */ }
	YY_BREAK
/* Unmatched */
case 63:
YY_RULE_SETUP
#line 201 "ScannerPtarm.l"
{ count(yytext, yylineno); unmatched(yytext); /* Ignore */ }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 204 "ScannerPtarm.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1719 "lex.ptarm.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	ptarmfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	ptarmfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ptarmrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ptarmrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 771 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 771 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 770);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ptarmalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ptarmalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ptarmfree((void *) b->yy_ch_buf  );

	ptarmfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptarmalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptarmrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) ptarmalloc(new_size  );

		else
			(yy_start_stack) = (int *) ptarmrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ptarmalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ptarmrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ptarmfree (void * ptr )
{
	free( (char *) ptr );	/* see ptarmrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 204 "ScannerPtarm.l"



// Declared in ScannerMicroBlaze.l
extern int line;
extern int column;
extern std::string currentSourceLine;

// Error function throws an exception (std::string) with the location and error message
void forec::loader::ParserPtarm::error(const forec::loader::ParserPtarm::location_type &loc, const std::string &msg) {
	std::ostringstream error;
	error << currentSourceLine << std::endl;
	error << std::setw(column) << "^" << std::endl;
	error << "Parser Error at " << line << "." << column << ": " << msg << std::endl;
	throw error.str();
}




