
#line 3 "lex.microBlaze.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer microBlazeFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *microBlazealloc (yy_size_t  );
void *microBlazerealloc (void *,yy_size_t  );
void microBlazefree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ScannerMicroBlaze::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[583] =
    {   0,
        0,    0,   55,   53,   52,   52,   20,   53,   23,   18,
       19,   21,   22,   18,   24,   18,   18,   18,   18,   18,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   52,   53,   53,    1,    1,    1,    1,    1,
        1,    1,   18,    0,   18,   18,    0,   18,   24,   18,
       24,   24,   24,   18,   24,   24,   24,    5,   24,   18,
       24,   24,   18,   18,   18,   18,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   12,   24,   24,   24,
       24,   24,   24,   24,   24,    9,   24,   24,   16,   24,
       24,   24,   24,   24,   24,   24,   24,   13,   24,   13,

       24,   13,   24,   24,   24,   24,    0,    0,    1,    1,
        0,    0,    0,   25,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    0,    0,   24,   24,   10,
        9,    3,    5,    6,    5,    7,   24,   24,   24,    9,
       10,   18,   24,   24,   24,   11,   24,   24,   24,   12,
       24,   13,   12,   12,   12,   24,   14,   24,   10,    9,
       24,   13,   24,   24,   24,   24,   24,   24,   17,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       13,   24,   13,   10,   13,   13,    1,    0,    1,    1,
        0,    2,    2,   24,   10,   10,   10,    4,    3,    7,

       24,   10,   10,   11,   24,   24,   24,   12,   12,   12,
       15,   24,   24,   10,   10,   24,   24,   10,    8,   24,
       24,    0,    0,    1,    1,    2,   10,    0,   24,   24,
       10,   24,   24,   24,   17,   24,   24,   24,   17,   24,
       13,   24,   24,    0,   24,    0,    0,    0,    0,    9,
        0,    0,    0,   11,    0,    0,    0,    0,    0,    0,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   36,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   27,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   51,    0,   34,
        0,    0,    0,    0,    0,    0,   29,    0,    0,   26,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,    0,    0,    0,    0,    0,    0,
        0,   28,   31,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
       48,    0,    0,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
        0,   47,    0,    0,    0,    0,   45,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   42,    0,    0,    0,    0,    0,   40,    0,
        0,    0,   41,    0,    0,    0,   39,   38,    0,    0,
       37,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    6,    7,    8,    9,   10,   11,   10,
       10,   10,   10,   12,   10,   13,   10,   14,    1,   15,
        1,   16,    1,    1,   17,   17,   17,   17,   18,   17,
       19,   20,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   21,   22,   19,   19,   19,   19,   19,   19,   19,
        1,    1,    1,    1,   19,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   19,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       19,   46,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[47] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    3,    1,    4,
        4,    4,    4,    5,    1,    1,    6,    6,    7,    7,
        7,    7,    6,    6,    6,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[611] =
    {   0,
        0,   43, 1190, 1191, 1191, 1191, 1191,   52, 1180,   62,
     1191, 1191, 1191,   68, 1180,   89,  101,  109,   85,  122,
       50,   95,  141,  142,  150,   43,   80,  180,  172,  219,
      138,   51,  253,  220,  222,  226,  274,  160,  276,  218,
      281,  296,  262, 1183,  283,    0,  313,  224, 1178,  302,
       82,  111,   41,  312,  204,  305,   96,  325,  170,   63,
      117,  123,  175,  326,  333,  340,   49,  131,  125,  160,
      168,  299,  197,  235,  173,  241,  334,  337,  222,  250,
      304,  186,  335,  349,  351,  259,  280,  346,  380,  372,
      374,  345,  375,  373,  387,  394,  386,  391,  381,  393,

      420,  402, 1150,  309,  411,  398,    0,  438,  401,  448,
      460, 1175, 1180, 1191,  462,  466,    0,    0, 1156, 1143,
      374,  417, 1154, 1145, 1147,  473,  477,  484, 1170,  473,
      404,  485,  492, 1168,  430,  436,  493,  449,  484, 1167,
      473,  477,  431,  388,  401, 1166,  501,  505,  512,  513,
      514, 1165,  519,  521, 1164,  520, 1163,  523,  524, 1162,
      525,  518,  522,  527,  528,  529,  532,  530, 1161,  538,
      533,  534,  535,  562,  567,  568,  569,  572,  571,  545,
     1160,  537, 1159, 1158, 1157, 1156,  577, 1159,  567, 1136,
      593,  600, 1154,  604,  435,  593,  601, 1152,  574, 1151,

      611,  577, 1150,  596, 1149,  612,  583, 1148, 1147, 1146,
     1145,  548,  614,  615, 1144,  621,  639,  634, 1143,  630,
      656,  633, 1122,  607,    0,  661, 1141,  655,  638,  627,
      541,  146,  645,  668,  681,  670,  232,  635, 1140,  622,
     1139,  672,  674, 1110,  647,  659,  669, 1118, 1109, 1135,
     1115, 1099, 1101, 1191, 1116, 1098, 1110, 1097, 1105, 1109,
     1191, 1119,  668, 1091,  662, 1101, 1103, 1099, 1105, 1088,
     1087, 1098, 1083, 1096, 1099, 1095, 1093, 1096, 1077, 1075,
     1082, 1089, 1083, 1080, 1085, 1097, 1074, 1082, 1073,    0,
     1072, 1067, 1064, 1090, 1089, 1088, 1087, 1086,  671,    0,

      689,  679, 1064, 1057, 1083, 1072, 1059, 1058, 1052, 1069,
     1064, 1060, 1065, 1065, 1061, 1063, 1071, 1060, 1047, 1046,
     1039, 1053, 1040, 1055, 1038, 1040,  676, 1191, 1036, 1038,
     1034, 1031, 1036, 1031, 1049, 1043, 1040, 1027, 1051, 1024,
     1022, 1020, 1020, 1046, 1018, 1035, 1034, 1015, 1032, 1013,
        0, 1026, 1191, 1017, 1031,  677, 1023, 1008, 1013, 1016,
     1020, 1031, 1030, 1029, 1016, 1018, 1005,  998,  999, 1006,
     1010,  999, 1013,    0, 1019,  679,    0, 1018,  996, 1004,
     1006, 1014,  991,  993,  990,  997, 1009,  987,  980, 1006,
      711,  993, 1191,  979,  698,  982,  989,  709,  981, 1000,

      702,  987,  989,  997,  705,  723,  977,  968,  973,  966,
      988,  966,  969,  962,  966,  966,  714, 1191,  961,  964,
      957,  736,  970, 1191,  970,  972,  959,  979,  966,  968,
      947,  963,  952,  964,  945,  959,  961,  740,  944, 1191,
      943,  955,    0,  966,  940,  951, 1191,  940,  937, 1191,
     1191,  936,  960,  932,  958,  957,    0,  929,  955,  941,
      926,  925,    0, 1191,    0,  951,  720,  950,  949,    0,
      948, 1191, 1191,  947,  946,  936,  925,  943,  722,    0,
      942,  928,  940,  753,  939,  717,  912,  928,  927,  916,
      934,  933,  731,  911,  762,  910,  903,  902,  899,  901,

      917,  925,  727,  903,  896,  910,  741,  909,  911,  906,
      905,  890,  887,  906,  895,  901,  903, 1191,  890,  883,
     1191,  884,  883,  907,  893,  892,  878,  894, 1191,  877,
      889,  891,  872,  767,  873,  897,  869,  799,  799, 1191,
      798, 1191,  772,  777,  808,  805, 1191,  780,  764,  782,
      778,  800, 1191,  778,  771,  770,  788,  785,  780,  735,
      728,  795, 1191,  720,  717,  718,  775,  699, 1191,  605,
      436,  366, 1191,  267,  192,  190, 1191, 1191,  113,   11,
     1191, 1191,  812,  816,  823,  827,  832,  837,  838,  842,
      844,  848,  850,  854,  856,  858,  862,  866,  868,  872,

      874,  876,  878,  882,  884,  888,  892,  894,  898,  902
    } ;

static yyconst flex_int16_t yy_def[611] =
    {   0,
      582,    1,  582,  582,  582,  582,  582,  582,  582,  583,
      582,  582,  582,  584,  584,  584,   16,   16,   16,   16,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  582,  582,  585,  586,  584,   37,   37,   37,
       37,   37,  582,  582,  583,  583,  587,   16,  584,   16,
      584,  584,  584,   16,  584,  584,  584,  584,  584,   16,
      584,  584,   16,   16,   16,   16,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,   30,   30,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,   30,  584,  584,  584,   33,  582,   33,   33,
      582,  582,  585,  582,  585,  586,  586,   37,   37,   37,
       37,   37,   37,   37,   37,  588,  582,  587,  587,   16,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,   16,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  582,  582,   37,   37,
      582,  588,  588,  582,  130,  584,  584,  584,  584,  584,

      584,  584,  584,  130,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  128,  582,   37,   37,  582,  584,  128,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  587,  587,  582,  587,  582,  582,  582,  582,  584,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  589,
      582,  582,  582,  590,  582,  582,  582,  590,  582,  591,

      582,  582,  582,  582,  592,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  592,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      593,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  594,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  595,  594,  582,  596,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  597,  582,  582,  598,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  597,

      582,  582,  582,  598,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  599,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  600,  601,  582,  582,  582,
      582,  582,  602,  582,  603,  600,  582,  604,  582,  605,
      582,  582,  582,  606,  607,  582,  582,  604,  582,  608,
      609,  582,  606,  582,  607,  582,  582,  582,  582,  582,
      610,  609,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  610,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,    0,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582
    } ;

static yyconst flex_int16_t yy_nxt[1238] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    4,    9,   10,
       10,   10,   10,   11,   12,   13,   14,   14,   15,   15,
       15,   15,   16,   17,   18,   14,   19,   20,   21,   15,
       22,   15,   23,   24,   25,   26,   27,   15,   28,   29,
       30,   15,   15,   31,   32,   15,   33,   34,   47,   35,
       47,  581,   36,   36,   36,   36,   47,   47,   47,   37,
       37,   43,   43,   43,   43,   38,   39,   40,   37,   41,
       42,   45,   45,   45,   45,   47,   72,   48,   48,   48,
       48,   86,   88,  145,   48,   48,  106,   47,   48,   47,
       48,   48,   48,   48,   48,   48,   47,   49,   48,   48,

       48,   48,   47,   47,   87,   48,   48,   60,   72,   63,
       48,   48,   48,   48,   50,   48,   48,   51,   47,   49,
       73,   88,  132,   52,   47,   53,   48,   54,   74,   55,
       47,   60,   47,   56,   48,   57,  131,   49,   47,   58,
       59,   61,   62,   49,   64,   47,   65,   66,   47,   47,
       49,  580,   67,   47,   68,   69,   49,   47,   49,  141,
       70,   71,  140,  104,   75,   78,  147,   47,  105,   79,
       76,  146,   83,  250,   84,   47,   85,   47,   51,   47,
       47,   80,   81,   82,   77,  119,   53,   47,   51,   89,
       89,   89,   89,   47,   52,   98,   53,   60,   99,  148,

       48,  100,  138,   90,   47,  149,   91,   92,  139,   49,
      101,   47,  579,   93,  153,  102,   94,  578,  159,   95,
       96,  111,  111,  111,  114,   97,   47,  151,  112,   47,
      132,  115,  115,  115,  115,  116,  116,  116,  116,   47,
      121,   83,   47,   84,  132,   85,   51,   51,   47,   48,
       61,   62,   49,  103,   53,   53,  107,   47,   49,  108,
       49,  157,  109,  109,  109,  109,   47,  239,  152,  110,
      110,   43,   43,   43,   43,  110,  110,  110,  110,  110,
      110,   47,  154,  118,  118,  118,  118,   47,  158,  160,
      118,  118,   45,   45,   45,   45,  118,  118,  118,  118,

      118,  118,  120,  121,   55,  122,   47,  577,   56,   51,
       57,   47,   47,  161,   58,   59,   47,   53,  123,  127,
      124,  125,  128,  128,  128,  128,   67,  130,   68,   69,
       49,  132,   47,  186,   70,   71,   49,   48,   49,  150,
       49,   47,   47,  157,   47,  132,   49,  133,   49,  132,
      134,  142,   47,   47,   49,  135,  136,  137,   48,  156,
       49,   49,   49,   51,  155,   48,  143,   49,   49,   49,
      144,   53,  155,   49,   49,   49,   49,   49,  155,   47,
       47,   47,   47,   49,  167,   49,  162,   47,   47,   89,
       89,   89,   89,   47,   47,   47,  164,  169,   47,  165,

       47,   47,   51,  170,  582,   47,  576,  582,   47,   47,
       53,   47,  163,  166,  168,  171,  172,  175,   47,  173,
      176,  181,  180,  183,  177,  182,  178,   47,  174,  181,
      146,  183,  185,  179,  140,  152,   86,   47,   47,  121,
      185,  146,  184,   47,  184,   51,  185,  187,  187,  187,
      187,  582,  140,   53,  582,  134,   47,  110,  110,  110,
      110,  111,  111,  111,  114,   49,  200,  205,  112,   49,
      575,  115,  115,  115,  115,  116,  116,  116,  116,  191,
       47,  131,  192,  192,  192,  192,  194,  194,  194,  194,
      582,   47,   47,  128,  128,  128,  128,  195,   48,   47,

       47,   49,  204,  196,  197,   49,  202,  131,   47,   49,
      198,   49,   47,   49,  203,  199,  131,  134,  134,   47,
       47,   47,  135,  201,  137,   47,   47,   47,   47,   47,
       47,   47,   47,  146,   47,   47,   47,   47,  208,   47,
       47,   47,   47,  152,   47,   47,  206,  212,   47,  209,
      207,  210,   47,  214,  215,   47,  141,  209,  211,  210,
      169,  216,  213,  169,  217,  169,  169,  169,  169,   47,
      169,  217,  169,  169,   47,   47,   47,  221,   47,   47,
      229,   47,  215,  169,   47,  218,  187,  187,  187,  187,
       47,  224,  219,  219,  219,  220,  219,  196,  197,  198,

       47,  131,  226,  226,  226,  226,  582,  227,   47,  192,
      192,  192,  192,  194,  194,  194,  194,  197,   47,   47,
       48,   47,   47,  146,  197,  197,   49,   49,   47,   47,
       49,  224,  197,  241,   47,  146,  134,   47,  197,  127,
      230,   47,   47,  574,  232,   47,   47,  233,  235,  235,
      235,  235,   47,  582,  231,  234,  215,  242,  197,  236,
      243,  127,  237,   47,  196,  197,  240,  157,  241,  238,
      226,  226,  226,  226,  239,   47,  157,   47,  582,  239,
      582,  245,  250,  246,  254,  254,  268,  247,   47,  248,
      235,  235,  235,  235,  250,  254,  249,  303,  264,  254,

      239,  313,  269,  367,  251,  388,  252,  265,  266,  254,
      304,  306,  307,  308,  339,  314,  368,  340,  389,  309,
      406,  406,  406,  406,  409,  310,  413,  311,  416,  312,
      414,  420,  406,  406,  406,  406,  422,  410,  433,  573,
      570,  417,  569,  496,  421,  438,  438,  438,  438,  438,
      438,  438,  438,  476,  434,  489,  497,  504,  568,  477,
      514,  490,  495,  495,  495,  495,  515,  519,  566,  565,
      505,  495,  495,  495,  495,  507,  543,  543,  543,  543,
      520,  543,  543,  543,  543,  549,  550,  550,  550,  550,
      554,  550,  550,  550,  550,  556,  560,  562,  562,  562,

      562,  571,  564,  555,  562,  562,  562,  562,  567,  561,
      563,  559,  558,  557,  572,   46,  552,   46,   49,   49,
      553,   49,   49,  113,  113,  113,  113,  113,  113,  113,
      117,  552,  117,  129,  551,  129,  548,  129,  193,  547,
      193,  546,  193,  294,  294,  298,  298,  298,  298,  305,
      305,  317,  317,  317,  317,  363,  363,  375,  375,  375,
      375,  387,  387,  390,  390,  400,  400,  400,  400,  404,
      404,  404,  404,  456,  456,  466,  466,  466,  466,  468,
      468,  474,  474,  475,  475,  478,  478,  478,  478,  481,
      481,  483,  483,  483,  483,  485,  485,  485,  485,  491,

      491,  492,  492,  492,  492,  502,  502,  502,  502,  545,
      544,  536,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  524,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  518,  517,  516,  503,  513,
      512,  511,  510,  509,  508,  506,  493,  503,  501,  500,
      499,  498,  486,  484,  494,  493,  479,  488,  487,  486,
      484,  482,  480,  479,  467,  473,  472,  471,  470,  469,
      467,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  437,  436,  435,

      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      405,  419,  418,  401,  415,  412,  411,  408,  407,  405,
      403,  402,  401,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  376,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  374,  373,  372,  371,  370,  369,
      366,  365,  364,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  318,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  316,  315,  299,

      302,  301,  300,  299,  297,  296,  295,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  267,  263,  262,  261,  261,  260,  259,  258,  257,
      256,  255,   47,  254,  254,  253,   47,   47,   47,  244,
       47,   47,   47,   47,   47,   47,  228,   47,   47,   47,
      582,  225,  223,  222,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,  582,  144,  143,  190,
      132,  189,  114,  188,   49,   47,  126,   47,   44,  582,
        3,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582
    } ;

static yyconst flex_int16_t yy_chk[1238] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,   53,    2,
       26,  580,    2,    2,    2,    2,   67,   21,   32,    2,
        2,    8,    8,    8,    8,    2,    2,    2,    2,    2,
        2,   10,   10,   10,   10,   14,   21,   14,   14,   14,
       14,   26,   53,   67,   14,   14,   32,   27,   60,   51,
       14,   14,   14,   14,   14,   14,   16,   60,   16,   16,

       16,   16,   22,   57,   27,   16,   16,   19,   51,   19,
       19,   16,   16,   16,   16,   16,   16,   16,   52,   19,
       22,   27,   57,   16,   61,   16,   17,   17,   22,   17,
       62,   18,   69,   17,   18,   17,   52,   17,   68,   17,
       17,   18,   18,   18,   20,   31,   20,   20,   23,   24,
       20,  579,   20,  232,   20,   20,   20,   25,   20,   62,
       20,   20,   61,   31,   23,   24,   69,   70,   31,   24,
       23,   68,   25,  232,   25,   71,   25,   59,   25,   29,
       75,   24,   24,   24,   23,   38,   25,   28,   38,   28,
       28,   28,   28,   82,   38,   29,   38,   63,   29,   70,

       63,   29,   59,   28,   73,   71,   28,   28,   59,   63,
       29,   55,  576,   28,   75,   29,   28,  575,   82,   28,
       28,   34,   34,   34,   35,   28,   30,   73,   34,   79,
       55,   35,   35,   35,   35,   36,   36,   36,   36,  237,
       40,   30,   74,   30,   55,   30,   40,   30,   76,   48,
       40,   40,   48,   30,   40,   30,   33,   80,   48,   33,
       48,   79,   33,   33,   33,   33,   86,  237,   74,   33,
       33,   43,   43,   43,   43,   33,   33,   33,   33,   33,
       33,   37,   76,   37,   37,   37,   37,   87,   80,   86,
       37,   37,   45,   45,   45,   45,   37,   37,   37,   37,

       37,   37,   39,   41,   39,   41,   72,  574,   39,   41,
       39,   81,   56,   87,   39,   39,  104,   41,   42,   47,
       42,   42,   47,   47,   47,   47,   42,   50,   42,   42,
       50,   56,   58,  104,   42,   42,   50,   54,   50,   72,
       54,   77,   83,   81,   78,   56,   54,   58,   54,   54,
       58,   64,   92,   88,   64,   58,   58,   58,   65,   78,
       64,   65,   64,   83,   77,   66,   65,   65,   66,   65,
       66,   83,   77,   84,   66,   84,   66,   85,   77,   90,
       94,   91,   93,   84,   92,   85,   88,   89,   99,   89,
       89,   89,   89,   97,   95,  144,   91,   94,   98,   91,

      100,   96,  121,   94,  109,  106,  572,  109,  145,  102,
      121,  131,   90,   91,   93,   94,   95,   96,  105,   95,
       96,   98,   97,  100,   96,   99,   96,  101,   95,   98,
      144,  100,  102,   96,  131,  105,  106,  135,  143,  122,
      102,  145,  101,  136,  101,  122,  102,  108,  108,  108,
      108,  110,  101,  122,  110,  135,  138,  110,  110,  110,
      110,  111,  111,  111,  115,  195,  136,  143,  111,  195,
      571,  115,  115,  115,  115,  116,  116,  116,  116,  126,
      141,  138,  126,  126,  126,  126,  127,  127,  127,  127,
      128,  139,  132,  128,  128,  128,  128,  130,  130,  133,

      137,  130,  142,  130,  130,  142,  139,  130,  147,  130,
      132,  142,  148,  142,  141,  132,  139,  133,  137,  149,
      150,  151,  133,  137,  133,  162,  153,  156,  154,  163,
      158,  159,  161,  147,  164,  165,  166,  168,  150,  167,
      171,  172,  173,  162,  182,  170,  148,  158,  231,  153,
      149,  154,  180,  159,  159,  212,  151,  153,  156,  154,
      163,  161,  158,  170,  167,  164,  165,  166,  168,  174,
      167,  171,  172,  173,  175,  176,  177,  182,  179,  178,
      212,  199,  231,  180,  202,  174,  187,  187,  187,  187,
      207,  189,  175,  176,  177,  178,  179,  189,  189,  199,

      196,  189,  191,  191,  191,  191,  192,  202,  197,  192,
      192,  192,  192,  194,  194,  194,  194,  196,  201,  206,
      204,  213,  214,  207,  196,  197,  204,  204,  216,  240,
      204,  224,  197,  240,  230,  206,  201,  220,  224,  222,
      213,  218,  238,  570,  216,  229,  217,  216,  217,  217,
      217,  217,  233,  245,  214,  216,  214,  222,  218,  220,
      222,  228,  220,  221,  218,  218,  221,  230,  221,  220,
      226,  226,  226,  226,  220,  234,  229,  236,  242,  238,
      243,  228,  233,  228,  245,  246,  265,  228,  235,  228,
      235,  235,  235,  235,  234,  247,  228,  299,  263,  246,

      236,  302,  265,  356,  242,  376,  243,  263,  263,  247,
      299,  301,  301,  301,  327,  302,  356,  327,  376,  301,
      391,  391,  391,  391,  395,  301,  398,  301,  401,  301,
      398,  405,  406,  406,  406,  406,  406,  395,  417,  568,
      566,  401,  565,  486,  405,  422,  422,  422,  422,  438,
      438,  438,  438,  467,  417,  479,  486,  493,  564,  467,
      503,  479,  484,  484,  484,  484,  503,  507,  561,  560,
      493,  495,  495,  495,  495,  495,  534,  534,  534,  534,
      507,  543,  543,  543,  543,  543,  544,  544,  544,  544,
      549,  550,  550,  550,  550,  550,  556,  557,  557,  557,

      557,  567,  559,  549,  562,  562,  562,  562,  562,  556,
      558,  555,  554,  552,  567,  583,  551,  583,  584,  584,
      548,  584,  584,  585,  585,  585,  585,  585,  585,  585,
      586,  546,  586,  587,  545,  587,  541,  587,  588,  539,
      588,  538,  588,  589,  589,  590,  590,  590,  590,  591,
      591,  592,  592,  592,  592,  593,  593,  594,  594,  594,
      594,  595,  595,  596,  596,  597,  597,  597,  597,  598,
      598,  598,  598,  599,  599,  600,  600,  600,  600,  601,
      601,  602,  602,  603,  603,  604,  604,  604,  604,  605,
      605,  606,  606,  606,  606,  607,  607,  607,  607,  608,

      608,  609,  609,  609,  609,  610,  610,  610,  610,  537,
      536,  535,  533,  532,  531,  530,  528,  527,  526,  525,
      524,  523,  522,  520,  519,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  506,  505,  504,  502,  501,
      500,  499,  498,  497,  496,  494,  492,  491,  490,  489,
      488,  487,  485,  483,  482,  481,  478,  477,  476,  475,
      474,  471,  469,  468,  466,  462,  461,  460,  459,  458,
      456,  455,  454,  453,  452,  449,  448,  446,  445,  444,
      442,  441,  439,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  423,  421,  420,  419,

      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      404,  403,  402,  400,  399,  397,  396,  394,  392,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  375,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      355,  354,  352,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  298,

      297,  296,  295,  294,  293,  292,  291,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  264,  262,  260,  259,  258,  257,  256,  255,  253,
      252,  251,  250,  249,  248,  244,  241,  239,  227,  223,
      219,  215,  211,  210,  209,  208,  205,  203,  200,  198,
      193,  190,  188,  186,  185,  184,  183,  181,  169,  160,
      157,  155,  152,  146,  140,  134,  129,  125,  124,  123,
      120,  119,  113,  112,  103,   49,   44,   15,    9,    3,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[55] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ScannerMicroBlaze.l"
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 9 "ScannerMicroBlaze.l"
	#include <cstdio>
	#include <iomanip>
	#include <sstream>
	#include "ScannerMicroBlaze.hpp"
	
	int line = 0;
	int column = 0;
	std::string currentSourceLine;
	
	/* Complain about unmatched characters */
	void unmatched(const std::string yytext) {
		std::ostringstream error;
		error << currentSourceLine << std::endl;
		error << std::setw(column) << "^" << std::endl;
		error << "Lexical Error at " << line << "." << column << ": " << "unmatched characters: " << yytext << std::endl;
		throw error.str();
	}
	
	/* Count the number of columns (zero indexing) */
	void count(const std::string yytext, const int lineno) {
		line = lineno;
		
		for (int i = 0; yytext[i] != '\0'; i++) {
			if (yytext[i] == '\n') {
				column = 0;
				currentSourceLine = "";
			} else if (yytext[i] == '\t') {
				const int columnDifference = 4 - (column % 4);
				column += columnDifference;
				for (int i = 0; i < columnDifference; ++i) {
					currentSourceLine += " ";					
				}
			} else {
				column++;
				currentSourceLine += yytext[i];
			}
		}
	}
/* White space */
/* Digit */
/* Letter */
/* Hexadecimal */
/* Identifier */
/* Constant */
/* Program Counter */
/* Registers */
/* Symbolic instructions */
/* Source code */
/* Analysis annotations */
#line 966 "lex.microBlaze.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 152 "ScannerMicroBlaze.l"



#line 1100 "lex.microBlaze.cc"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 583 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1191 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* Program Counters */
case 1:
YY_RULE_SETUP
#line 156 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::PC); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 157 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::PC_1); }
	YY_BREAK
/* Assembly instructions */
case 3:
YY_RULE_SETUP
#line 161 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::BRANCH_CONDITIONAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 162 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::BRANCH_CONDITIONAL_WITH_DELAY); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 163 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::BRANCH_UNCONDITIONAL); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 164 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::BRANCH_UNCONDITIONAL_WITH_DELAY); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 165 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::BREAK); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 166 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::RETURN); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 168 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::LOGIC); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 169 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::ARITHMETIC_INTEGER); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 170 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::ARITHMETIC_FLOAT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 172 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::READ); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 173 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::STORE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 174 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::MOVE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 175 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::MEMORY); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 177 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::REGISTERS_GENERAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 178 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::REGISTERS_SPECIAL); }
	YY_BREAK
/* Numbers */
case 18:
YY_RULE_SETUP
#line 182 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::CONSTANT); }
	YY_BREAK
/* Characters */
case 19:
YY_RULE_SETUP
#line 186 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); return(':'); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 187 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); return(','); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 188 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); return('<'); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 189 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); return('>'); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 190 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); return('/'); }
	YY_BREAK
/* Assembly label */
case 24:
YY_RULE_SETUP
#line 194 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::LABEL); }
	YY_BREAK
/* Source lines */
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 198 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); yylval->str->erase(yylval->str->begin()); return(forec::loader::ParserMicroBlaze::token::C_SOURCE); }
	YY_BREAK
/* Analysis annotations */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 202 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_PAR_START); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 203 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_PAR_END); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 204 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_ABORT_START); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 205 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_ABORT_END); }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 206 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_ABORT_SCOPE_END); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 207 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_PAUSE_START); }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 208 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_STATEMENT_PAUSE_END); }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 210 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_COUNTER_START); }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 211 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_COUNTER_END); }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 214 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_BOOT_START); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 215 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_BOOT_END); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 216 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_REACTION_START_START); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 217 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_REACTION_START_END); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 218 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_REACTION_END_START); }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 219 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_REACTION_END_END); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 220 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_PAR_HANDLER_START); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 221 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_PAR_HANDLER_END); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 222 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_ABORT_HANDLER_START); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 223 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_ABORT_HANDLER_END); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 225 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_THREAD_REMOVE_START); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 226 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_THREAD_REMOVE_END); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 227 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_ITERATION_END_START); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 228 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_SCHEDULER_ITERATION_END_END); }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 230 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_THREAD_START); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 231 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_THREAD_END); }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 233 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::ParserMicroBlaze::token::FOREC_ITERATION_BOUND); }
	YY_BREAK
/* Whitespace */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 237 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); /* Ignore */ }
	YY_BREAK
/* Unmatched */
case 53:
YY_RULE_SETUP
#line 240 "ScannerMicroBlaze.l"
{ count(yytext, yylineno); unmatched(yytext); /* Ignore */ }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 243 "ScannerMicroBlaze.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1477 "lex.microBlaze.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	microBlazefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	microBlazefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					microBlazerealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) microBlazerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 583 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 583 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 582);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) microBlazealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) microBlazealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		microBlazefree((void *) b->yy_ch_buf  );

	microBlazefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)microBlazealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)microBlazerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) microBlazealloc(new_size  );

		else
			(yy_start_stack) = (int *) microBlazerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *microBlazealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *microBlazerealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void microBlazefree (void * ptr )
{
	free( (char *) ptr );	/* see microBlazerealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 243 "ScannerMicroBlaze.l"



// Error function throws an exception (std::string) with the location and error message
void forec::loader::ParserMicroBlaze::error(const forec::loader::ParserMicroBlaze::location_type &loc, const std::string &msg) {
	std::ostringstream error;
	error << currentSourceLine << std::endl;
	error << std::setw(column) << "^" << std::endl;
	error << "Parser Error at " << line << "." << column << ": " << msg << std::endl;
	throw error.str();
}


