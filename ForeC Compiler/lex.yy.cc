
#line 2 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[422] =
    {   0,
        0,    0,  121,  119,  118,  118,  105,  119,  117,  111,
      104,  119,   99,  100,  109,  108,   96,  107,  103,  110,
       62,   62,   97,   93,  112,   98,  113,  116,   59,   59,
      101,  102,  114,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   94,  115,   95,  106,   92,    0,   70,    0,    0,
        0,    0,    0,   78,   95,   87,   79,    0,    0,   76,
       84,   74,   85,   75,   86,    0,   65,    0,    4,   77,
       66,   61,    0,   62,   62,    0,   62,   62,  102,   94,
      101,   83,   89,   91,   90,   82,   59,    0,    0,   80,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   14,   59,   59,   59,   59,   59,   59,   59,   23,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   81,   88,
        0,    0,    0,    0,    0,   63,   71,    0,   65,    0,
        0,    4,   65,    0,   66,   61,   61,   61,    0,   64,
       62,   62,   62,   62,    0,   60,   73,   72,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   21,   59,   59,   59,
       59,   26,   59,   59,   50,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,    0,    0,    0,
        0,    0,    0,    0,   65,    3,    0,   65,    0,   66,
       61,   61,   61,   61,   64,   62,   68,   69,   60,    0,
       60,   60,   59,   59,   59,   59,    5,   59,    8,    9,
       59,   59,   59,   59,   59,   59,   59,   59,   16,   17,
       59,   59,   59,   22,   59,   59,   59,   27,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   37,   59,   59,   59,   41,   59,   51,   54,   59,
       45,    0,    0,    0,    0,    0,    0,    0,   65,   61,

       68,    0,   68,   69,    0,   60,   60,    0,   67,   60,
       60,    6,   59,   59,   53,    7,   59,   11,   59,   59,
       59,   59,   59,   59,   59,   19,   20,   59,   59,   47,
       59,   49,   59,   59,   59,   59,   31,   59,   59,   59,
       59,   59,   59,   59,   39,   59,   59,   43,    0,    2,
        0,    0,    0,   68,   68,    0,    0,   69,   67,   60,
       59,   59,   59,   59,   58,   59,   59,   59,   15,   18,
       59,   25,   48,   59,   59,   30,   46,   32,   33,   34,
       35,   36,   55,   59,   59,   59,    2,    2,    0,    0,
       68,   59,   59,   44,   59,   56,   59,   13,   59,   59,

       59,   38,   59,   59,    2,    2,    0,   10,   59,   12,
       57,   59,   28,   29,   40,   42,    1,   59,   52,   24,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   26,   29,   30,
       31,   31,   32,   31,   31,   33,   31,   31,   31,   34,
       31,   31,   31,   31,   35,   31,   31,   36,   31,   31,
       37,   38,   39,   40,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   31,   51,   52,   53,   54,
       55,   56,   31,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    4,    1,    5,    5,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        6,    6,    7,    7,    6,    6,    1,    1,    1,    1,
        6,    5,    5,    5,    5,    5,    5,    6,    6,    6,
        6,    7,    6,    6,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[433] =
    {   0,
        0,    0,  644,  645,  645,  645,  620,   65,   26,   50,
       67,  604,  645,  645,  618,   64,  645,   65,   63,   79,
       88,   76,  616,  645,   77,  616,   89,  645,    0,  105,
      645,  645,  615,   88,   58,  580,   77,   83,   79,   95,
      581,   92,  580,  574,  591,  586,   94,  100,  577,  575,
      109,  645,   60,  645,  645,  645,  103,  645,    0,  583,
      574,   31,  573,  645,  645,  645,  645,  116,  617,  645,
      645,  645,  645,  645,  645,  609,  142,  612,    0,  645,
      144,  149,  168,  164,  133,  607,  158,  184,  645,  645,
      645,  599,  645,  645,  645,  598,    0,  174,  582,  645,

      564,  563,  564,  561,  556,  568,  555,  570,  116,  570,
      563,  549,  550,  547,  547,  553,  549,  546,  543,    0,
      548,  152,  546,  540,  163,  157,  172,  173,  150,  548,
      540,  536,  539,  148,  176,  552,  130,  534,  645,  645,
      545,  546,  177,  546,  544,  645,  645,  222,  645,  576,
      570,    0,  224,  232,  645,  199,  196,  204,  242,  244,
      198,  645,  553,  533,    0,  233,  645,  645,  529,  530,
      540,  524,  525,  537,  532,  520,  533,  214,  229,  533,
      531,  527,  519,  525,  512,  527,    0,  513,  521,  516,
      505,    0,  516,  507,    0,  504,  511,  501,  499,  501,

      500,  502,  509,  495,  493,  493,  505,  504,  503,  493,
      497,  501,  503,  493,  489,  490,  492,  490,  489,  492,
      492,  484,  489,  260,  262,  645,  284,  645,  282,  286,
      230,  645,  501,  481,  645,  645,  273,  278,  253,  302,
      275,  283,  480,  475,  482,  470,    0,  477,    0,    0,
      477,  467,  475,  470,  468,  463,  461,  468,    0,    0,
      462,  472,  458,    0,  471,  461,  455,    0,  453,  466,
      453,  453,  452,  462,  448,  460,  450,  454,  459,  458,
      459,    0,  455,  445,  450,    0,  438,    0,    0,  450,
        0,  441,  447,  446,  446,  431,  443,  304,  318,  645,

      645,  313,  306,  645,  331,  234,  645,  323,  334,  456,
      436,    0,  435,  436,    0,    0,  431,    0,  430,  438,
      428,  439,  428,  433,  424,    0,    0,  427,  430,    0,
      416,    0,  410,  405,  398,  398,    0,  382,  379,  375,
      357,  366,  369,  365,    0,  356,  359,    0,  361,  368,
      358,  359,  336,  338,  645,  359,  341,  361,  645,  645,
      357,  348,  355,  340,    0,  353,  340,  337,    0,    0,
      351,    0,    0,  346,  345,    0,    0,    0,    0,    0,
        0,    0,    0,  341,  341,  321,  331,  307,  320,  357,
      365,  300,  319,    0,  278,    0,  239,    0,  225,  225,

      196,    0,  207,  200,  187,  344,    0,    0,   95,    0,
        0,   84,    0,    0,    0,    0,    0,   34,    0,    0,
      645,  417,  424,  427,  434,  441,  445,   88,  446,  453,
      460,  467
    } ;

static const flex_int16_t yy_def[433] =
    {   0,
      421,    1,  421,  421,  421,  421,  421,  422,  421,  421,
      421,  423,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  424,  424,
      421,  421,  421,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  421,  421,  421,  421,  421,  422,  421,  422,  421,
      421,  421,  421,  421,  421,  421,  421,  423,  423,  421,
      421,  421,  421,  421,  421,  421,  421,  425,  426,  421,
      421,  421,  421,  421,  421,  427,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  424,  422,  423,  421,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  425,
      425,  426,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  428,  427,  421,  421,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  428,  429,  421,  421,
      421,  421,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  429,  421,  421,  421,  421,  421,  421,  421,
      421,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  421,  430,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  430,  431,  421,  421,
      421,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  430,  431,  432,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  432,  424,  424,  424,
        0,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421
    } ;

static const flex_int16_t yy_nxt[715] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   29,   29,   29,   29,
       29,   29,   30,   29,   29,   29,   31,    4,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   29,   42,
       29,   43,   29,   29,   44,   45,   46,   47,   48,   49,
       50,   51,   29,   29,   29,   52,   53,   54,   55,   58,
       60,   61,   64,   65,   66,   62,   71,  143,   76,   73,
       77,   77,  139,   90,  144,   63,   72,   74,   75,   67,
       78,   81,  237,   88,   88,   79,   91,  420,   92,   93,

      104,   80,   59,   81,   83,   82,   82,   58,   84,   98,
       85,   95,   96,   99,  101,  102,   83,  105,  107,  103,
       84,   83,   85,   86,  146,  108,  140,   87,  111,  419,
      113,  109,  114,   83,  110,   85,  116,  112,  120,   87,
       59,  115,  127,  128,  121,  122,  117,   85,  131,  118,
       86,  418,  129,   69,  136,  130,  132,  137,  138,   77,
       77,  153,  153,  133,   81,  163,   82,   82,  177,  178,
      148,  149,  154,  155,  149,  215,  155,   83,   58,  216,
      159,  156,  159,  157,  164,  160,  160,  148,  149,  154,
      155,  204,  162,  149,   83,  155,  161,  210,  162,   81,

      158,   88,   88,  190,  197,  211,  205,  191,  157,  161,
      192,   59,   83,  200,  198,  199,   84,  162,   85,  195,
      202,  220,  196,  162,  388,  212,  201,  213,  233,   83,
      221,  231,  162,  232,  224,   87,  224,  203,  232,  225,
      225,  153,  153,   85,  229,  416,  229,  234,  238,  230,
      230,  415,  227,  228,  414,  231,  228,  162,  232,  160,
      160,  160,  160,  232,  232,  239,  240,  241,  307,  227,
      228,  252,  253,  235,  254,  228,  235,  225,  225,  225,
      225,  413,  255,  412,  242,  306,  256,  307,  240,  232,
      235,  149,  241,  307,  149,  235,  298,  411,  298,  230,

      230,  299,  299,  230,  230,  301,  302,  310,  149,  387,
      304,  305,  307,  149,  308,  155,  308,  307,  155,  309,
      309,  299,  299,  410,  301,  353,  311,  353,  302,  304,
      354,  354,  155,  305,  306,  299,  299,  155,  355,  356,
      309,  309,  307,  357,  406,  357,  387,  228,  358,  358,
      228,  309,  309,  354,  354,  354,  354,  355,  358,  358,
      409,  356,  408,  359,  228,  407,  359,  301,  388,  228,
      301,  390,  404,  390,  391,  391,  391,  391,  358,  358,
      359,  406,  391,  391,  301,  359,  403,  402,  401,  301,
      304,  400,  399,  304,  355,  398,  397,  355,  396,  395,

      394,  393,  392,  389,  350,  388,  350,  304,  386,  385,
      384,  355,  304,  383,  382,  381,  355,   57,  380,   57,
       57,   57,   57,   57,   68,  379,  378,   68,   68,   68,
       68,   97,   97,   97,  150,  150,  150,  150,  150,  150,
      150,  152,  377,  152,  152,  152,  152,  152,  166,  166,
      303,  376,  303,  387,  375,  387,  387,  387,  387,  387,
      405,  405,  405,  405,  405,  405,  405,  417,  374,  417,
      417,  417,  417,  417,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  360,  350,
      352,  351,  350,  350,  349,  348,  347,  346,  345,  344,

      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  300,  300,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  236,  236,  226,  151,  223,  222,
      219,  218,  217,  214,  209,  208,  207,  206,  194,  193,

      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  176,  175,  174,  173,  172,  171,  170,  169,   69,
      168,  167,  165,  151,  147,   68,  145,  142,  141,  135,
      134,  126,  125,  124,  123,  119,  106,  100,   94,   89,
       70,   69,   56,  421,    3,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421
    } ;

static const flex_int16_t yy_chk[715] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    8,
        9,    9,   10,   10,   11,    9,   16,   62,   19,   18,
       19,   19,   53,   25,   62,    9,   16,   18,   18,   11,
       20,   22,  428,   22,   22,   20,   25,  418,   25,   25,

       35,   20,    8,   21,   22,   21,   21,   57,   22,   30,
       22,   27,   27,   30,   34,   34,   21,   35,   37,   34,
       21,   22,   21,   21,   68,   37,   53,   22,   38,  412,
       39,   37,   39,   21,   37,   22,   40,   38,   42,   21,
       57,   39,   47,   47,   42,   42,   40,   21,   48,   40,
       21,  409,   47,   68,   51,   47,   48,   51,   51,   77,
       77,   81,   81,   48,   82,   85,   82,   82,  109,  109,
       77,   77,   81,   81,   77,  137,   81,   82,   98,  137,
       83,   82,   83,   82,   85,   83,   83,   77,   77,   81,
       81,  129,   87,   77,   82,   81,   84,  134,   84,   88,

       82,   88,   88,  122,  126,  134,  129,  122,   82,   87,
      122,   98,   88,  127,  126,  126,   88,   87,   88,  125,
      128,  143,  125,   84,  405,  135,  127,  135,  157,   88,
      143,  156,  161,  156,  148,   88,  148,  128,  158,  148,
      148,  153,  153,   88,  154,  404,  154,  157,  166,  154,
      154,  403,  153,  153,  401,  158,  153,  161,  156,  159,
      159,  160,  160,  158,  231,  166,  166,  166,  306,  153,
      153,  178,  178,  160,  179,  153,  160,  224,  224,  225,
      225,  400,  179,  399,  166,  239,  179,  239,  166,  231,
      160,  225,  166,  306,  225,  160,  227,  397,  227,  229,

      229,  227,  227,  230,  230,  237,  237,  241,  225,  388,
      238,  238,  239,  225,  240,  230,  240,  242,  230,  240,
      240,  298,  298,  395,  237,  302,  241,  302,  237,  238,
      302,  302,  230,  238,  242,  299,  299,  230,  303,  303,
      308,  308,  242,  305,  388,  305,  406,  299,  305,  305,
      299,  309,  309,  353,  353,  354,  354,  303,  357,  357,
      393,  303,  392,  309,  299,  389,  309,  354,  387,  299,
      354,  356,  386,  356,  390,  390,  356,  356,  358,  358,
      309,  406,  391,  391,  354,  309,  385,  384,  375,  354,
      358,  374,  371,  358,  391,  368,  367,  391,  366,  364,

      363,  362,  361,  352,  351,  350,  349,  358,  347,  346,
      344,  391,  358,  343,  342,  341,  391,  422,  340,  422,
      422,  422,  422,  422,  423,  339,  338,  423,  423,  423,
      423,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  426,  336,  426,  426,  426,  426,  426,  427,  427,
      429,  335,  429,  430,  334,  430,  430,  430,  430,  430,
      431,  431,  431,  431,  431,  431,  431,  432,  333,  432,
      432,  432,  432,  432,  331,  329,  328,  325,  324,  323,
      322,  321,  320,  319,  317,  314,  313,  311,  310,  297,
      296,  295,  294,  293,  292,  290,  287,  285,  284,  283,

      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  267,  266,  265,  263,  262,  261,  258,
      257,  256,  255,  254,  253,  252,  251,  248,  246,  245,
      244,  243,  234,  233,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  194,  193,  191,  190,  189,  188,  186,  185,
      184,  183,  182,  181,  180,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  164,  163,  151,  150,  145,  144,
      142,  141,  138,  136,  133,  132,  131,  130,  124,  123,

      121,  119,  118,  117,  116,  115,  114,  113,  112,  111,
      110,  108,  107,  106,  105,  104,  103,  102,  101,   99,
       96,   92,   86,   78,   76,   69,   63,   61,   60,   50,
       49,   46,   45,   44,   43,   41,   36,   33,   26,   23,
       15,   12,    7,    3,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.l"
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
#line 9 "scanner.l"
	#include <cstdio>
	#include <iomanip>
	#include <sstream>
	#include "Scanner.hpp"
	
	#include "parser.tab.h"
	#define YY_USER_ACTION yylloc->begin.line = yylineno;

	void unmatched(const std::string yytext);
	void count(const std::string yytext, const int lineno);
	void comment(const std::string yytext);
	void isInTypedef(void);
	void isExpectingTypeName(int value);
	void isNotExpectingTypeName(const int increment);
	int checkType(const std::string typeName);
#line 755 "lex.yy.cc"
/* White space */
/* Digit */
/* Letter */
/* Hexadecimal */
/* Decimal floating point */
/* Hexadecimal floating point */
/* Floating point specifier */
/* Integer specifier */
#line 764 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 53 "scanner.l"



#line 900 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 422 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 645 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* Preprocessor directives */
case 1:
YY_RULE_SETUP
#line 57 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::INCLUDE); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::DEFINE); }
	YY_BREAK
/* Comments */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "scanner.l"
{ count(yytext, yylineno); comment(yytext); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "scanner.l"
{ count(yytext, yylineno); comment(yytext); }
	YY_BREAK
/* C-keywords */
case 5:
YY_RULE_SETUP
#line 67 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::AUTO); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::BOOL); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::BREAK); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CASE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::CHAR); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::COMPLEX); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CONST); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CONTINUE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::DEFAULT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::DO); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::DOUBLE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::ELSE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::ENUM); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::EXTERN); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::FALSE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::FLOAT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::FOR); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::GOTO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::IF); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::IMAGINARY); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::INLINE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::INT); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::LONG); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::REGISTER); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::RESTRICT); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::RETURN); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::SHORT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::SIGNED); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::SIZEOF); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::STATIC); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 98 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 99 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::TRUE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 100 "scanner.l"
{ count(yytext, yylineno); isInTypedef(); return(forec::loader::Parser::token::TYPEDEF); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 101 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::UNION); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 102 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::UNSIGNED); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 103 "scanner.l"
{ count(yytext, yylineno); isExpectingTypeName(1); return(forec::loader::Parser::token::VOID); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 104 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 105 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::WHILE); }
	YY_BREAK
/* ForeC keywords */
case 44:
YY_RULE_SETUP
#line 109 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::COMBINE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::WITH); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::SHARED); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::INPUT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::OUTPUT); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::PAUSE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::PAR); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::WEAK); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::IMMEDIATE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 118 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::ABORT); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 119 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::WHEN); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 120 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::THREAD); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 122 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CS_NONE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 123 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CS_START); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 124 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::CS_END); }
	YY_BREAK
/* Identifiers and Type names */
case 59:
YY_RULE_SETUP
#line 128 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(checkType(yytext)); }
	YY_BREAK
/* Numbers */
case 60:
YY_RULE_SETUP
#line 132 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); /*'*/ }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 137 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 138 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 139 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 140 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::CONSTANT); }
	YY_BREAK
/* String */
case 70:
YY_RULE_SETUP
#line 146 "scanner.l"
{ count(yytext, yylineno); yylval->str = new std::string(yytext); return(forec::loader::Parser::token::STRING_LITERAL); /*"*/ }
	YY_BREAK
/* Operators */
case 71:
YY_RULE_SETUP
#line 150 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::ELLIPSIS); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 151 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::RIGHT_ASSIGN); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 152 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::LEFT_ASSIGN); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 153 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::ADD_ASSIGN); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 154 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::SUB_ASSIGN); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 155 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::MUL_ASSIGN); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 156 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::DIV_ASSIGN); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 157 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::MOD_ASSIGN); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 158 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::AND_ASSIGN); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 159 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::XOR_ASSIGN); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 160 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::OR_ASSIGN); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 161 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::RIGHT_OP); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 162 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::LEFT_OP); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 163 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::INC_OP); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::DEC_OP); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 165 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::PTR_OP); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 166 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::AND_OP); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 167 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::OR_OP); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 168 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::LE_OP); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 169 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::GE_OP); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::EQ_OP); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "scanner.l"
{ count(yytext, yylineno); return(forec::loader::Parser::token::NE_OP); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "scanner.l"
{ count(yytext, yylineno); return(';'); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "scanner.l"
{ count(yytext, yylineno); isNotExpectingTypeName(1); return('{'); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 174 "scanner.l"
{ count(yytext, yylineno); isNotExpectingTypeName(-1); return('}'); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 175 "scanner.l"
{ count(yytext, yylineno); return(','); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 176 "scanner.l"
{ count(yytext, yylineno); return(':'); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "scanner.l"
{ count(yytext, yylineno); return('='); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 178 "scanner.l"
{ count(yytext, yylineno); return('('); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "scanner.l"
{ count(yytext, yylineno); return(')'); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 180 "scanner.l"
{ count(yytext, yylineno); return('['); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 181 "scanner.l"
{ count(yytext, yylineno); return(']'); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 182 "scanner.l"
{ count(yytext, yylineno); return('.'); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 183 "scanner.l"
{ count(yytext, yylineno); return('&'); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 184 "scanner.l"
{ count(yytext, yylineno); return('!'); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 185 "scanner.l"
{ count(yytext, yylineno); return('~'); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 186 "scanner.l"
{ count(yytext, yylineno); return('-'); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 187 "scanner.l"
{ count(yytext, yylineno); return('+'); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 188 "scanner.l"
{ count(yytext, yylineno); return('*'); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 189 "scanner.l"
{ count(yytext, yylineno); return('/'); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "scanner.l"
{ count(yytext, yylineno); return('%'); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "scanner.l"
{ count(yytext, yylineno); return('<'); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "scanner.l"
{ count(yytext, yylineno); return('>'); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 193 "scanner.l"
{ count(yytext, yylineno); return('^'); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 194 "scanner.l"
{ count(yytext, yylineno); return('|'); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 195 "scanner.l"
{ count(yytext, yylineno); return('?'); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 196 "scanner.l"
{ count(yytext, yylineno); return('#'); }
	YY_BREAK
/* Whitespace */
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 200 "scanner.l"
{ count(yytext, yylineno); }
	YY_BREAK
/* Unmatched */
case 119:
YY_RULE_SETUP
#line 204 "scanner.l"
{ count(yytext, yylineno); unmatched(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 206 "scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1580 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 422 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 422 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 421);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 206 "scanner.l"

int inTypedef = 0;
int expectingTypeName = 0;
int typeCount = 0;
std::string typeNames[256];

int line = 0;
int column = 0;
std::string currentSourceLine;


// Error function throws an exception (std::string) with the location and error message
void forec::loader::Parser::error(const forec::loader::Parser::location_type &loc, const std::string &msg) {
	std::ostringstream error;
	error << currentSourceLine << std::endl;
	error << std::setw(column) << "^" << std::endl;
	error << "Parser Error at " << line << "." << column << ": " << msg << std::endl;
	throw error.str();
}

/* Complain about unmatched characters */
void unmatched(const std::string yytext) {
	std::ostringstream error;
	error << currentSourceLine << std::endl;
	error << std::setw(column) << "^" << std::endl;
	error << "Lexical Error at " << line << "." << column << ": " << "unmatched characters: " << yytext << std::endl;
	throw error.str();
}

void comment(const std::string yytext) {
//	std::cout << "#" << yytext << "#" << std::endl;
}

/* Count the number of columns (zero indexing) */
void count(const std::string yytext, const int lineno) {
	line = lineno;
	
	for (int i = 0; yytext[i] != '\0'; i++) {
		if (yytext[i] == '\n') {
			column = 0;
			currentSourceLine = "";
		} else if (yytext[i] == '\t') {
			column += 4 - (column % 4);
			currentSourceLine += "    ";
		} else {
			column++;
			currentSourceLine += yytext[i];
		}
	}
}

void isInTypedef(void) {
	inTypedef = 1;
	expectingTypeName = 2;
}

void isExpectingTypeName(int value) {
	if (inTypedef == 1) {
		expectingTypeName = value;
	}
}

void isNotExpectingTypeName(const int increment) {
	if (increment > 0) {
		inTypedef <<= 1;
	} else {
		inTypedef >>= 1;
		isExpectingTypeName(1);
	}
}

int checkType(const std::string typeName) {	
	if (inTypedef == 1) {
		if (expectingTypeName == 2) {
			expectingTypeName = 1;

			for (int i = 0; i < typeCount; i++) {
				if (typeName.compare(typeNames[i]) == 0) {
					return(forec::loader::Parser::token::TYPE_NAME);
				}
			}
		} else if (expectingTypeName == 1) {
			inTypedef = 0;
			expectingTypeName = 0;
			for (int i = 0; i < typeCount; i++) {
				if (typeName.compare(typeNames[i]) == 0) {
					std::ostringstream error;
					error << currentSourceLine << std::endl;
					error << std::setw(column) << "^" << std::endl;
					error << "Lexical Error at " << line << "." << column << ": " << "redefinition of typedef " << typeName << std::endl;
					throw error.str();
				}
			}

			typeNames[typeCount++] = typeName;
			return(forec::loader::Parser::token::TYPE_NAME);
		}
	} else {
		for (int i = 0; i < typeCount; i++) {
			if (typeName.compare(typeNames[i]) == 0) {
				return(forec::loader::Parser::token::TYPE_NAME);
			}
		}
	}

	return(forec::loader::Parser::token::IDENTIFIER);
}




