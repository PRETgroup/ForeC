ForeC Compiler (multicore distribution)
Version: 0.983 (27 May 2013)
Debug output
---------------------------------------

Source file name: HelloWorld.forec
Header file name: HelloWorld.foreh

============================
tools::Multicore::toString()
============================
Multicore architecture:
-----------------------
	x86

Multicore allocations:
----------------------
	Core	Thread
	----	------
	0		hello__thread
	0		main__thread
	1		world__thread


==============================
tools::SymbolTable::toString()
==============================
Symbol tables:
--------------
	Scope name: global
		Scope level: 0
			Instance: 0
				(thread) hello__thread
				(thread) world__thread
				(shared) state__global_0_0

	Scope name: main
		Scope level: 0
			Instance: 0
				(variable) argc__main_0_0
				(variable) argv__main_0_0

	Scope name: plus
		Scope level: 0
			Instance: 0
				(variable) copy1__plus_0_0
				(variable) copy2__plus_0_0


Declared shared symbols:
------------------------
	Scope name: global
		(Shared_state__global_0_0) state__global_0_0


Use/Def of symbols:
-------------------
	Scope name: main
		use:
			(thread) hello__thread
			(thread) world__thread
			(shared) state__global_0_0

	Scope name: plus
		use:
			(variable) copy1__plus_0_0
			(variable) copy2__plus_0_0

	Scope name: world
		def:
			(shared) state__global_0_0


Indirect use/def of symbols by parId:
-------------------------------------
	par0:
		state__global_0_0
			def (root): world 


Indirect use/def of symbols by threadId:
----------------------------------------
	main:
		state__global_0_0
			def (root): main 

	world:
		state__global_0_0
			def (intermediate): world 


Functions used for combining shared variables:
----------------------------------------------
	plus

============================
tools::Threading::toString()
============================
Threads declared:
-----------------
	* hello__thread
	* main__thread
	* world__thread

Threads unused:
---------------

par(...) statements:
--------------------
	Thread scope: main
		par0:
		* hello__thread
		* world__thread

========================
tools::Abort::toString()
========================
Abort statements:
-----------------
	Thread scope: main__thread
		par0:
		* abortStrong0 strong


============================
tools::Condition::toString()
============================

========================
tarot::Tarot::toString()
========================
Full tarot:
-----------
	core0: main__thread
	.	core0: abortStrong0
	.	:	core0: par0
	.	:	|	core0: hello__thread
	.	:	|	.	core0: while_0
	.	:	|	.	.	pause0
	.	:	|	.	.	pause1
	.	:	|	core1: world__thread
	.	:	|	.	pause2


Tarot by coreId:
----------------
	core0:
	-------
		core0: main__thread
		.	core0: abortStrong0
		.	:	core0: par0
		.	:	|	core0: hello__thread
		.	:	|	.	core0: while_0
		.	:	|	.	.	pause0
		.	:	|	.	.	pause1

	core1:
	-------
		core0: main__thread
		.	core0: abortStrong0
		.	:	core0: par0
		.	:	|	core1: world__thread
		.	:	|	.	pause2


par(...) statements with core allocation:
-----------------------------------------
	Thread main__thread:
		all:
		* core0
		* core1

		par0:
		* core0
		* core1


par(...) statements with active cores:
--------------------------------------
	Thread main__thread:
		all:
		* core0
		* core1

		par0:
		* core0
		* core1


Reaction starts:
----------------
	core0:
		main: Master

	core1:
		main: Slave


Reaction ends:
--------------
	core0:
		par0:
			coreIds:
			* 0
			* 1

			isMaster:
			* true

			threadScope:
			* main

	core1:
		par0:
			threadScope:
			* main


Par(...) handlers:
------------------
	par0:
	* hello__thread
	* world__thread
	* mainReactionStartMaster0
	* mainReactionStartSlave1
	* mainReactionEndMaster0
	* mainReactionEndSlave1
	* abortStrong0Check0
	* abortStrong0Check1


Abort checks:
-------------
	core0:
		main:
			strong:
			* abortStrong0(state__global_0_0.value == 1)

	core1:
		main:
			strong:
			* abortStrong0(state__global_0_0.value == 1)


Linked lists:
-------------
	core0:
		Thread main__thread linked lists:
			par0:
			* (parStart) mainReactionStartMaster0
			* (abortStrong) abortStrong0Check0
			* (thread) hello__thread
			* (parEnd) mainReactionEndMaster0

	core1:
		Thread main__thread linked lists:
			par0:
			* (parStart) mainReactionStartSlave1
			* (abortStrong) abortStrong0Check1
			* (thread) world__thread
			* (parEnd) mainReactionEndSlave1


par(...) handlers in thread scopes:
-----------------------------------
	par0	main__thread

Last par(...)s in each abort:
-------------------------------
	core0:
		Thread scope: main
		* abortStrong0->par0

	core1:
		Thread scope: main
		* abortStrong0->par0


Scoped aborts:
--------------
	abortStrong0:
		coreIds:
		* 0
		* 1

		parIds:
		* par0


Aborts around par(...):
-----------------------
	par0:
	* abortStrong0 (par0)


============================
tools::Multicore::toString()
============================
Multicore architecture:
-----------------------
	x86

Multicore allocations:
----------------------
	Core	Thread
	----	------
	0		hello__thread
	0		main__thread
	1		world__thread


========================
tools::Mutex::toString()
========================
Mutex information:
------------------

