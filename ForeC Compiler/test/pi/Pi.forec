#include <stdio.h>
#include <sys/time.h> 

thread t0(void);
thread t1(void);
thread t2(void);
thread t3(void);
thread t4(void);
thread t5(void);

typedef int integer;
typedef long double real;

integer INITIAL = 0;
integer LIMIT = 599999999;
integer THREADS = 6;
integer ITERATIONS = 10000000;
shared integer RANGE;
shared integer SUBRANGE;

typedef struct {
	real total;
	real current;
} AccumReal;

const AccumReal plus(AccumReal *copy1, const AccumReal *copy2) {
	copy1->total = copy1->total + copy1->current + copy2->current;
	copy1->current = 0;
	return *copy1;
}

shared AccumReal result = 0 combine with plus;
shared integer segment;

real calculatePi(const integer subSegment, integer RANGE, integer SUBRANGE, integer segment);

integer main(integer argc, char **argv) {
	struct timeval startTime, endTime;
	gettimeofday(&startTime, 0);
	// ---
	
	RANGE = ((LIMIT - INITIAL)/ITERATIONS + 1);
	SUBRANGE = RANGE/THREADS;
	
	int i;
	for (i = 0; i < ITERATIONS; ++i) {
		segment = i;
		par(t0, t1, t2, t3, t4, t5);
	}

	// ---
	gettimeofday(&endTime,0);
	long seconds = endTime.tv_sec - startTime.tv_sec;
	integer microseconds = endTime.tv_usec - startTime.tv_usec;
	if (microseconds < 0) {
		microseconds += 1000000;
		seconds--;
	}

	printf("Pi1: %d.%ld\r\n", (integer)result.total, (long)((result.total - (integer)result.total) * 1000000000));
	printf("Runtime: %ld.%.6d\r\n", seconds, microseconds);
	
	return 0;
}


thread t0(void) {
	result.current = calculatePi(0, RANGE, SUBRANGE, segment);
}

thread t1(void) {
	result.current = calculatePi(1, RANGE, SUBRANGE, segment);
}

thread t2(void) {
	result.current = calculatePi(2, RANGE, SUBRANGE, segment);
}

thread t3(void) {
	result.current = calculatePi(3, RANGE, SUBRANGE, segment);
}

thread t4(void) {
	result.current = calculatePi(4, RANGE, SUBRANGE, segment);
}

thread t5(void) {
	result.current = calculatePi(5, RANGE, SUBRANGE, segment);
}

real calculatePi(const integer subSegment, integer RANGE, integer SUBRANGE, integer segment) {
	real result = 0;
	real denominator = 0;
	real numerator = -1;

	const integer startIndex = SUBRANGE*subSegment + RANGE*segment;
	const integer endIndex = SUBRANGE*(subSegment + 1) + RANGE*segment;
	
	integer i;
	for (i = startIndex; i < endIndex; ++i) {
		numerator = numerator * -1;
		denominator = 2*i + 1;
		result += 4*(numerator/denominator);
	}
	
	return result;
}


