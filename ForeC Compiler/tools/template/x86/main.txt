{

/*==============================================================
| Multicore startup:
| Platform dependent code.  Core identifies itself and
| executes its corresponding start up code.
*=============================================================*/
%{multicore}
// forec:scheduler:boot:end

/*==============================================================
| Core specific instructions:
| Contains par, abort and synchronisation handlers.
*=============================================================*/
	/*--------------------------------------------------------------
	| Master core: core%{masterCoreId}
	| ForeC program's main() function:
	| Original main() function code with ForeC constructs
	| translated into C code.
	*-------------------------------------------------------------*/
	
	// Thread local declarations -----------------------------------
%{declarations}
mainParCore%{masterCoreId}: {
	// forec:scheduler:counter:start
	// Initialise and start timing each reaction.
	clockTimeUs.previous = getClockTimeUs();
	// forec:scheduler:counter:end
	
%{masterCoreBody}
	// forec:scheduler:threadRemove:main:start

	// forec:scheduler:counter:start
	clockTimeUs.current = getClockTimeUs();
	clockTimeUs.elapsed = clockTimeUs.current - clockTimeUs.previous;
	if (0 <= clockTimeUs.elapsed && clockTimeUs.elapsed < %{minReactionTime}) {
		usleep(%{minReactionTime} - clockTimeUs.elapsed);
	}
	clockTimeUs.previous = getClockTimeUs();
	// forec:scheduler:counter:end
	
	programStatus = TERMINATED;
	pthread_exit(NULL);
	// forec:scheduler:threadRemove:main:end
} // mainParCore%{masterCoreId}
	// forec:thread:main:end

%{parHandler}

	// Nested par(...) handlers ------------------------------------
%{masterCoreParHandlers}

	// Reaction start handlers ---------------------------------------
%{masterReactionStarts}

	// Reaction end handlers ---------------------------------------
%{masterReactionEnds}

	// Abort check handlers ----------------------------------------
%{masterAbortChecks}

%{slaveCoreBodies}

/*==============================================================
| ForeC threads:
| Threads' code translated into C code.
*=============================================================*/
%{threads}
} // End of the main() function.
