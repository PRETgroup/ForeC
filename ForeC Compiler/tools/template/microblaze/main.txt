{

/*==============================================================
| Multicore startup:
| Platform dependent code.  Core identifies itself and
| executes its corresponding start up code.
*=============================================================*/
%{multicore}
// forec:scheduler:boot:end

/*==============================================================
| Core specific instructions:
| Contains par, abort and synchronisation handlers.
*=============================================================*/

	// forec:thread:main:start
	/*--------------------------------------------------------------
	| Master core: core%{masterCoreId}
	| ForeC program's main() function:
	| Original main() function code with ForeC constructs
	| translated into C code.
	*-------------------------------------------------------------*/

	// Thread local declarations -----------------------------------
%{declarations}
mainParCore%{masterCoreId}: {
	// forec:scheduler:counter:start
	// Initialise and start counting the elapsed cycles for each reaction.
	counterInitialise(counter);
	counterStart(counter, FSL_COUNTER_ID);
	// forec:scheduler:counter:end
	
%{masterCoreBody}
	// forec:scheduler:threadRemove:main:start

	// forec:scheduler:counter:start
	do { counterRead(counter, FSL_COUNTER_ID); } while (counter.current < %{minReactionTime});
	// Stop counting the elapsed cycles for the current reaction.
	counterStop(FSL_COUNTER_ID);
	counterRead(counter, FSL_COUNTER_ID);
	counterDifference(counter);
	counterMaximum(counter);
	counterMinimum(counter);
	counterAccumulate(counter);
	counterAverage(counter);
	xil_printf("%ld Reaction time: %d cycles, Min: %d, Avg: %d, Max: %d\r\n", globalReactions, counter.difference, counter.min, counter.avg, counter.max);
	xil_printf("Total time: %d cycles\r\n", counter.total);
	xil_printf("Program termination\r\n");
	// forec:scheduler:counter:end

	asm volatile (".long 0x80000001\r\n");
	return 0;
	// forec:scheduler:threadRemove:main:end
} // mainParCore%{masterCoreId}
	// forec:thread:main:end

%{parHandler}

	// Nested par(...) handlers ------------------------------------
%{masterCoreParHandlers}

	// Reaction start handlers ---------------------------------------
%{masterReactionStarts}

	// Reaction end handlers ---------------------------------------
%{masterReactionEnds}

	// Abort check handlers ----------------------------------------
%{masterAbortChecks}

%{slaveCoreBodies}

/*==============================================================
| ForeC threads:
| Threads code translated into C code.
*=============================================================*/
%{threads}
} // End of the main() function.
