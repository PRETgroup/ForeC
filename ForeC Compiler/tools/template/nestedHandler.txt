	// forec:scheduler:parHandler:%{threadScope}:%{masterOrSlave}:%{coreId}:start
	//-- Thread %{threadScope} par(...) handlers
%{handlerName}: {
%{mutex}
	int parId = %{threadScope}ParParent.parId;

	// Check the par(...) ID.
	%{nestedHandlers}if (parId == -2) {
		// Iteration
%{forLoop}
	} else if (parId == -3) {
		// Thread termination
		%{decrementEnclosingThreadCount}
		%{threadScope}ParCore%{coreId}.activeThreads--;

%{synchronise}
		// Delete this par(...) handler.
		%{handlerName}.prevThread -> nextThread = %{handlerName}.nextThread;
		%{handlerName}.nextThread -> prevThread = %{handlerName}.prevThread;
			
%{nextThread}
	} else {
		// Unscheduled par(...)
		%{threadScope}ParCore%{coreId}.reactionCounter = %{threadScope}ParReactionCounter;

		%{handlerName}.programCounter = &&wrongParId_%{handlerName};
		wrongParId_%{handlerName}:;

		pthread_mutex_lock(&%{threadScope}ParCore%{coreId}.statusLock);
		%{threadScope}ParCore%{coreId}.status = FOREC_CORE_TERMINATED;
		pthread_cond_signal(&%{threadScope}ParCore%{coreId}.statusCond);
		pthread_mutex_unlock(&%{threadScope}ParCore%{coreId}.statusLock);

		// Wait for the next tick.
		pthread_mutex_lock(&%{threadScope}ParReactionCounterLock);
		while (%{threadScope}ParCore%{coreId}.reactionCounter == %{threadScope}ParReactionCounter) { pthread_testcancel(); pthread_cond_wait(&%{threadScope}ParReactionCounterCond, &%{threadScope}ParReactionCounterLock); }
		pthread_mutex_unlock(&%{threadScope}ParReactionCounterLock);
		%{threadScope}ParCore%{coreId}.reactionCounter++;

		// Wait for the par(...) to terminate.
		if (%{threadScope}ParParent.parStatus == FOREC_PAR_ON && %{threadScope}ParParent.parId == parId) {
			goto *%{handlerName}.nextThread -> programCounter;
		}
		
		// Go back to the top and wait for the next nested par(...)
		%{handlerName}.programCounter = &&%{handlerName};
		%{armNop}
		goto %{handlerName};
	}
	%{armNop}
	// Control should not reach here.
	goto %{handlerName};
}
	// forec:scheduler:parHandler:%{threadScope}:%{masterOrSlave}:%{coreId}:end
 
