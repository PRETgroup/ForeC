#include <uav.h> (*\label{code:forec:uav_header}*)
input int pos1,pos2,proxL,proxR;  // Inputs. (*\label{code:forec:uav_inputs}*)
output int motors=0,flaps=0;      // Outputs. (*\label{code:forec:uav_outputs}*)

void main(void) { (*\label{code:forec:uav_main}*)
	shared int obst=0 combine new with min; (*\label{code:forec:uav_obst}*)
	shared int newPos=0 combine new with plus; (*\label{code:forec:uav_newpos}*)
	par(Flight(&newPos,&obst),Avoidance(&obst)); (*\label{code:forec:uav_par1}*)
}

void Flight(shared int *newPos,shared int *obst) {(*\label{code:forec:uav_flight}*)
	par(Navigation(newPos,obst),Stability(newPos)); (*\label{code:forec:uav_par2}*)
}

void Navigation(shared int *newPos,shared int *obst) { (*\label{code:forec:uav_nav}*)
	while (1) { (*\label{code:forec:uav_while1}*)
		*newPos=plan(pos1,obst); (*\label{code:forec:uav_while2}*)
		pause; (*\label{code:forec:uav_pause1}*)
	}
} 
	            
void Stability(shared int *newPos) { (*\label{code:forec:uav_stability}*)
	while (1) { 
		motors=thrust(pos2,newPos); 
		flaps=angle(pos2,newPos);
		pause;
	}
}

void Avoidance(shared int *obst) { (*\label{code:forec:uav_avoid}*)
	while (1) { 
		par( (*\label{code:forec:uav_par3}*)
		     {*obst=find(proxL);},       // Thread FindL. 
		     {*obst=find(proxR);}        // Thread FindR.
		);
		pause; (*\label{code:forec:uav_pause2}*)
	}
} 
	            
int min(int th1,int th2) { (*\label{code:forec:uav_min}*)
	if (th1<th2) {
		return th1; 
	} else {
		return th2;
	}
}

int plus(int th1,int th2) { (*\label{code:forec:uav_plus}*)
	return (th1+th2);
}