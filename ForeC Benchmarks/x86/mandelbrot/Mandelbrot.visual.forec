//#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>

#include <X11/Xlib.h>
#include <X11/Xutil.h>

/* X11 data */
extern typedef void Display;
shared Display *dpy;

extern typedef void Window;
shared Window win;

extern typedef void XImage;
shared XImage *bitmap;

extern typedef void Atom;
Atom wmDeleteMessage;

extern typedef void GC;
GC gc_obj;
shared GC *gc = &gc_obj;

// ForeC workaround to external declarations.
extern struct timeval;
extern typedef int size_t;
extern typedef void XEvent;
extern typedef void XTextProperty;
extern typedef void Status;
extern typedef void Visual;
extern typedef void Drawable;
extern typedef void XSetWindowAttributes;
extern typedef void XGCValues;
extern typedef void Bool;

// C standard function prototypes
int gettimeofday(struct timeval * __restrict, void * __restrict);
int printf(const char * __restrict, ...);
int rand(void);
void exit(int status);
void *malloc(size_t size);
int XPutImage(Display *display, Drawable d, GC gc, XImage *image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height);
int XFlush(Display *display);
int XCloseDisplay(Display *display);
Window XCreateWindow(Display *display, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int border_width, int depth, unsigned int class, Visual *visual, unsigned long valuemask, XSetWindowAttributes *attributes);
Window XCreateSimpleWindow(Display *display, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int border_width, unsigned long border, unsigned long background);
XImage *XCreateImage(Display *display, Visual *visual, unsigned int depth, int format, int offset, char *data, unsigned int width, unsigned int height, int bitmap_pad, int bytes_per_line);
int XSelectInput(Display *display, Window w, long event_mask);
int XMapWindow(Display *display, Window w);
int XNextEvent(Display *display, XEvent *event_return);
Status XStringListToTextProperty(char **list, int count, XTextProperty *text_prop_return);
void XSetWMName(Display *display, Window w, XTextProperty *text_prop);
GC XCreateGC(Display *display, Drawable d, unsigned long valuemask, XGCValues *values);
int XSetForeground(Display *display, GC gc, unsigned long foreground);
Status XSetWMProtocols(Display *display, Window w, Atom *protocols, int count);
int XDestroyWindow(Display *display, Window w);

int NULL;
#define NULL__global_0_0 NULL

int False;
#define False__global_0_0 False

int StructureNotifyMask;
#define StructureNotifyMask__global_0_0 StructureNotifyMask

int MapNotify;
#define MapNotify__global_0_0 MapNotify

int ZPixmap;
#define ZPixmap__global_0_0 ZPixmap

int KeyPressMask;
#define KeyPressMask__global_0_0 KeyPressMask

int ExposureMask;
#define ExposureMask__global_0_0 ExposureMask

int WhitePixel;
#define WhitePixel__global_0_0 WhitePixel

int BlackPixel;
#define BlackPixel__global_0_0 BlackPixel

int DefaultScreen;
#define DefaultScreen__global_0_0 DefaultScreen

int DefaultRootWindow;
#define DefaultRootWindow__global_0_0 DefaultRootWindow

int DefaultDepth;
#define DefaultDepth__global_0_0 DefaultDepth

int DefaultVisual;
#define DefaultVisual__global_0_0 DefaultVisual

int XOpenDisplay;
#define XOpenDisplay__global_0_0 XOpenDisplay

int XInternAtom;
#define XInternAtom__global_0_0 XInternAtom

int XDestroyImage;
#define XDestroyImage__global_0_0 XDestroyImage

/* Image size */
shared int ASIZE = 1000;

unsigned cols_array[(1 << 14) + 1];
shared unsigned *cols = cols_array;

unsigned mandel_double(const double cr, const double ci);
void display_double(const int size, const double xmin, const double xmax, const double ymin, const double ymax, const int ystart, const int yrange, XImage *bitmap, unsigned *cols, Display *dpy, Window win, GC *gc);
void exit_x11(XImage *bitmap, Display *dpy, Window win);

thread init_x11(void);
thread init_colours(void);

thread display_double0(void);
thread display_double1(void);
thread display_double2(void);
thread display_double3(void);

int main(int argc, char **argv) {
	struct timeval startTime, endTime;
	gettimeofday(&startTime, 0);
	//- - - -
	
	/* Make a window! */
	par(init_x11, init_colours);
	
	par(display_double0, display_double1, display_double2, display_double3);
	
	/* Done! */
	exit_x11(bitmap, dpy, win);
	
	//- - - -
	gettimeofday(&endTime,0);
	long seconds = endTime.tv_sec - startTime.tv_sec;
	int microseconds = endTime.tv_usec - startTime.tv_usec;
	if (microseconds < 0) {
		microseconds += 1000000;
		seconds--;
	}

	printf("Runtime: %ld.%.6d\r\n", seconds, microseconds);
}

thread display_double0(void) {
	double xmin = -2;
	double xmax = 1.0;
	double ymin = -1.5;
	double ymax = 1.5;
	display_double(ASIZE, xmin, xmax, ymin, ymax,   0, 400, bitmap, cols, dpy, win, gc);
}

thread display_double1(void) {
	double xmin = -2;
	double xmax = 1.0;
	double ymin = -1.5;
	double ymax = 1.5;
	display_double(ASIZE, xmin, xmax, ymin, ymax, 400, 100, bitmap, cols, dpy, win, gc);
}

thread display_double2(void) {
	double xmin = -2;
	double xmax = 1.0;
	double ymin = -1.5;
	double ymax = 1.5;
	display_double(ASIZE, xmin, xmax, ymin, ymax, 500, 100, bitmap, cols, dpy, win, gc);
}

thread display_double3(void) {
	double xmin = -2;
	double xmax = 1.0;
	double ymin = -1.5;
	double ymax = 1.5;
	display_double(ASIZE, xmin, xmax, ymin, ymax, 600, 400, bitmap, cols, dpy, win, gc);
}

/* The Inner Loop */
unsigned mandel_double(const double cr, const double ci) {
	int MAX_ITER = (1 << 14);
	
	double zr = cr, zi = ci;
	double tmp;
	
	unsigned i;
	
	for (i = 0; i < MAX_ITER; i++) {
		tmp = zr * zr - zi * zi + cr;
		zi *= 2 * zr;
		zi += ci;
		zr = tmp;
		
		if (zr * zr + zi * zi > 4.0) {
			break;
		}
	}
	
	return i;
}

/* For each point, evaluate its colour */
void display_double(const int size, const double xmin, const double xmax, const double ymin, const double ymax, const int ystart, const int yrange, XImage *bitmap, unsigned *cols, Display *dpy, Window win, GC *gc) {
	int x, y;
	
	double cr, ci;
	
	double xscal = (xmax - xmin) / size;
	double yscal = (ymax - ymin) / size;
	
	unsigned counts;
	
	for (y = ystart; y < ystart + yrange; y++) {
		for (x = 0; x < size; x++) {
			cr = xmin + x * xscal;
			ci = ymin + y * yscal;
			
			counts = mandel_double(cr, ci);
			
			((unsigned *) bitmap->data)[x + y*size] = cols[counts];
		}
		
		/* Display it line-by-line for speed */
		XPutImage(dpy, win, *gc, bitmap, 0, y, 0, y, size, 1);
	}
	
	XFlush(dpy);
}

thread init_colours(void) {
	int MAX_ITER = (1 << 14);
	
	int i;
	
	for (i = 0; i < MAX_ITER; i++) {
		char r = (rand() & 0xff) * MAX_ITER / (i + MAX_ITER + 1);
		char g = (rand() & 0xff) * MAX_ITER / (i + MAX_ITER + 1);
		char b = (rand() & 0xff) * MAX_ITER / (i + MAX_ITER + 1);
		
		cols[i] = b + 256 * g + 256 * 256 * r;
	}
	
	cols[MAX_ITER] = 0;
}

thread init_x11(void) {
	int bytes_per_pixel;
	
	/* Attempt to open the display */
	dpy = XOpenDisplay(NULL);
	
	/* Failure */
	if (!dpy) exit(0);
	
	unsigned long white = WhitePixel(dpy,DefaultScreen(dpy));
	unsigned long black = BlackPixel(dpy,DefaultScreen(dpy));
	
	win = XCreateSimpleWindow(dpy, DefaultRootWindow(dpy), 0, 0, ASIZE, ASIZE, 0, black, white);
	
	/* We want to be notified when the window appears */
	XSelectInput(dpy, win, StructureNotifyMask);
	
	/* Make it appear */
	XMapWindow(dpy, win);
	
	while (1) {
		XEvent e;
		XNextEvent(dpy, &e);
		if (e.type == MapNotify) break;
	}
	
	XTextProperty tp;
	char *name;
	name = "Mandelbrot";
	Status st = XStringListToTextProperty(&name, 1, &tp);
	if (st) XSetWMName(dpy, win, &tp);
	
	/* Wait for the MapNotify event */
	XFlush(dpy);
	
	int ii, jj;
	int depth = DefaultDepth(dpy, DefaultScreen(dpy));
	Visual *visual;
	visual = DefaultVisual(dpy, DefaultScreen(dpy));
	int total;
	
	/* Determine total bytes needed for image */
	ii = 1;
	jj = (depth - 1) >> 2;
	while (jj >>= 1) ii <<= 1;
	
	/* Pad the scanline to a multiple of 4 bytes */
	total = ASIZE * ii;
	total = (total + 3) & ~3;
	total *= ASIZE;
	bytes_per_pixel = ii;
	
	if (bytes_per_pixel != 4) {
		printf("Need 32bit colour screen!");
	}
	
	/* Make bitmap */
	bitmap = XCreateImage(dpy, visual, depth, ZPixmap, 0, malloc(total), ASIZE, ASIZE, 32, 0);
	
	/* Init GC */
	*gc = XCreateGC(dpy, win, 0, NULL);
	XSetForeground(dpy, *gc, black);
	
	if (bytes_per_pixel != 4) {
		printf("Need 32bit colour screen!\n");
		exit_x11(bitmap, dpy, win);
		exit(0);
	}
	
	XSelectInput(dpy, win, ExposureMask | KeyPressMask | StructureNotifyMask);
	
	wmDeleteMessage = XInternAtom(dpy, "WM_DELETE_WINDOW", False);
	XSetWMProtocols(dpy, win, &wmDeleteMessage, 1);
}

void exit_x11(XImage *bitmap, Display *dpy, Window win) {
	XDestroyImage(bitmap);
	XDestroyWindow(dpy, win);
	XCloseDisplay(dpy);
}


