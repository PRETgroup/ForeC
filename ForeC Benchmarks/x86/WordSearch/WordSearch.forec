#include <sys/time.h>
#include <stdio.h>
#include <string.h>

typedef int FILE;
#define FILE__global_0_0 FILE

int NULL;
#define NULL__global_0_0 NULL

input char newWord[20] = "";
char oldWord[20] = "";
shared char (*oldWord_ptr)[20] = &oldWord;
shared FILE *file1;
shared FILE *file2;

typedef struct {
	int last;
	int current;
} Accum;

shared Accum found = {.last = 0, .current = 0} combine with plus;

int fgetw(FILE *file, char wordFound[20]);
int fgetws(FILE *file, char word[20], int *wordsLeft);
const Accum plus(Accum *lhs, const Accum *rhs);

thread mimicInput(void);
thread search1(void);
thread search2(void);

int tickCount = 0;

static const int MAX_WORDS_TO_SEARCH = 100;

int main(int argc, char **argv) {
	struct timeval startTime, endTime;
	gettimeofday(&startTime, 0);
	//- - - -
	printf("Case-sensitive word search across two text files.\n");
	if (argc != 4) {
		printf("Usage: ./WordSearch <word> <file1> <file2>\n");
		return 0;
	}
	strcpy(newWord, argv[1]);
	
	file1 = fopen(argv[2], "r");
	if (file1 == NULL) {
		printf("Could not open \"%s\".\n", argv[2]);
	}
	file2 = fopen(argv[3], "r");
	if (file2 == NULL) {
		printf("Could not open \"%s\".\n", argv[3]);
	}
	
	for (int i = 0; i < 4; i++) {
		found.current = 0;
		found.last = 0;
		strcpy(oldWord, newWord);

		int preemptionOccured = 1;
		abort {
			par(mimicInput, search1, search2);
			printf("\"%s\" appears %d times in %s and %s.\n", *oldWord_ptr, found.current, argv[2], argv[3]);

			preemptionOccured = 0;
		} when immediate (strcmp(oldWord, newWord) != 0 && strcmp("", newWord) != 0);

		if (preemptionOccured) {
			printf("\"%s\" appeared %d times in %s and %s before being preempted.\n", *oldWord_ptr, found.current, argv[2], argv[3]);
		}
	}
	
	fclose(file1);
	fclose(file2);
	
	printf("Number of times \"%s\" appears in %s and %s is %d.\n", *oldWord_ptr, argv[2], argv[3], found.current);
	
	//- - - -
	gettimeofday(&endTime,0);
	long seconds = endTime.tv_sec - startTime.tv_sec;
	int microseconds = endTime.tv_usec - startTime.tv_usec;
	if (microseconds < 0) {
		microseconds += 1000000;
		seconds--;
	}
	
	printf("Runtime: %ld.%.6d\r\n", seconds, microseconds);
	return 0;
}

thread mimicInput(void) {
	switch(tickCount) {
		case 0:		strcpy(newWord, "");
					pause;
		case 1:		strcpy(newWord, "");
					pause;
		case 2:		strcpy(newWord, "if");
					pause;
		default:	break;
	}

	tickCount = tickCount + 1;
}

thread search1(void) {
	int numSearched = 0;
	rewind(file1);

	do {
		numSearched = 0;
		found.current = found.current + fgetws(file1, *oldWord_ptr, &numSearched);
		pause;
	} while (numSearched != 0);
}

thread search2(void) {
	int numSearched = 0;
	rewind(file2);
	
	do {
		numSearched = 0;
		found.current = found.current + fgetws(file2, *oldWord_ptr, &numSearched);
		pause;
	} while (numSearched != 0);
}

int fgetws(FILE *file, char word[20], int *numSearched) {
	int found = 0;
	char wordFound[20];
	while((fgetw(file, wordFound) != 0) && (*numSearched < MAX_WORDS_TO_SEARCH)) {
		if (strcmp(word, wordFound) == 0) {
			found = found + 1;
		}
		*numSearched = *numSearched + 1;
	}

	return found;
}

int fgetw(FILE *file, char wordFound[20]) {
	int length = 0;
	
	// Get a continuous sequence of letters.
	char c = fgetc(file);
	while ((0x40 < c && c < 0x5B) || (0x60 < c && c < 0x7B)) {
		// Add the character if it is A-Z or a-z.
		// Otherwise, the word has ended.
		if (length < 20) {
			wordFound[length] = c;
			length = length + 1;
		}

		// Get the next character.
		c = fgetc(file);
	}
	wordFound[length] = '\0';
	
	// Skip to the start of the next word.
	while ((-1 < c && c < 0x41) || (0x5A < c && c < 0x61) || 0x7A < c) {
		// Get the next character.
		c = fgetc(file);
	}
	ungetc(c, file);
	
	return length;
}

const Accum plus(Accum *lhs, const Accum *rhs) {
	lhs->current = lhs->current + rhs->current - rhs->last;
	lhs->last = lhs->current;
	return *lhs;
}
