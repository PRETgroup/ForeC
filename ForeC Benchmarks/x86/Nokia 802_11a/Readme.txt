Nokia 802.11a benchmark
-----------------------
Original source: 
  A. Pop and A. Cohen, “A Stream-Computing Extension to OpenMP,”
  in Proceedings of the 6th International Conference on High Performance
  and Embedded Architectures and Compilers, ser. HiPEAC ’11, 2011, pp. 5 – 14.


Folders:
--------
original: 
  The original C code.
  
pipelined: 
  The original C code modified into ForeC code (802_11a.forec), using software 
  pipelining to expose parallelism.
  
pipelined (predicated execution):
  The pipelined implementation with the removal of if-else statements 
  through predicated execution (802_11a.forec). The statements in if-else 
  bodies are predicated by the if-condition. Predication was needed to 
  reduce the number of paths in the program so that timing analysis without
  optimisations could be performed within a reasonable amount of time.


Multi-threaded C programs from the ForeC implementations:
---------------------------------------------------------
The ForeC compiler was developed to target execution on a "bare metal" 
multicore MicroBlaze system. Each ForeC thread is statically mapped to 
an available core by the programmer in a ForeC header file (*.foreh).
From the mapping, the ForeC compiler creates a light-weight static thread 
scheduler for each core.

The ForeC compiler can also target OSes supporting Pthreads, but 
the implementation is naive. The bare metal code generated for a core 
(with a few modifications) is wrapped up in a Pthread. This Pthread 
is then executed by the OS on an underlying core.


Outputs:
--------
The outputs generated by the original program are located in 
"/original/plainC_SimOutput/".

The diff command can be used to compare the outputs to see if the ForeC 
implementation preserves the functionality of the original C program.



