#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

input char radioInput;
input char spiInput;
output double servoOutputs[4];

shared int terminate = 0;
shared int isSafe = 1;
double decision = 0.0;
int _1Hz = 0;
int _20Hz = 0;

const int MAX_DOWN_TIME = 100;

const char INVALID = '0';
const char VALID = '1';
const int MANUAL = 0;
const int AUTOMATIC = 1;

typedef int FILE;
#define FILE__global_0_0 FILE

int EOF;
#define EOF__global_0_0 EOF

shared FILE* inputFile;
shared FILE* outputFile;

shared long long radioDownTime;
shared long long spiDownTime;

int getMode(const int communicationInput);
double autopilot(const int mode, const int communicationInput);
void computation(void);

thread flight(void);
thread servo(void);
thread servo0(void);
thread servo1(void);
thread servo2(void);
thread servo3(void);
thread timer(void);
thread failsafe(void);

int main(int argc, char **argv) {
	struct timeval startTime, endTime;
	gettimeofday(&startTime, 0);
	//- - - -

	inputFile = fopen("input.dat", "r");
	outputFile = fopen("output.txt", "w");

	servoOutputs[0] = 0.0;
	servoOutputs[1] = 0.0;
	servoOutputs[2] = 0.0;
	servoOutputs[3] = 0.0;

	radioDownTime = 0;
	spiDownTime = 0;
	
	while (!terminate) {
		weak abort {
			par(servo, timer, flight, failsafe);
		} when (!isSafe);

		pause;
	}
	
	//- - - -
	gettimeofday(&endTime,0);
	long seconds = endTime.tv_sec - startTime.tv_sec;
	int microseconds = endTime.tv_usec - startTime.tv_usec;
	if (microseconds < 0) {
		microseconds += 1000000;
		seconds--;
	}
	
	printf("Runtime: %ld.%.6d\r\n", seconds, microseconds);
	
	return 0;
}

thread flight(void) {
	int mode;
	
	abort {
		while (1) {
			if (getMode(radioInput) != VALID) {
				mode = getMode(radioInput);
			}
			
			decision = autopilot(mode, radioInput);
			pause;
		}
	} when (terminate);
}

thread servo(void) {
	abort {
		while (1) {
			par(servo0, servo1, servo2, servo3);
			computation();
			pause;
		}
	} when (terminate);
}

thread servo0(void) {
	computation();
	computation();
	computation();
	servoOutputs[0] = 0;
}

thread servo1(void) {
	computation();
	computation();
	computation();
	servoOutputs[1] = 1;
}

thread servo2(void) {
	computation();
	computation();
	computation();
	servoOutputs[2] = 2;
}

thread servo3(void) {
	computation();
	computation();
	computation();
	servoOutputs[3] = 3;
}

thread timer(void) {
	abort {
		while (1) {
			if (_1Hz++ > 60) {
				computation();
				_1Hz = 0;
			}

			if (_20Hz++ > 3) {
				computation();
				_20Hz = 0;
			}

			radioInput = fgetc(inputFile);
			spiInput = fgetc(inputFile);
			
			char newLine = fgetc(inputFile);
			while (newLine == '\n' || newLine == '\r') #0#10 {
				newLine = fgetc(inputFile);
			}
			ungetc(newLine, inputFile);
			
			if (radioInput == EOF || spiInput == EOF) {
				terminate = 1;
			}
					
			pause;
		}
	} when (terminate);
}

thread failsafe(void) {
	abort {
		while (1) {
			computation();
			computation();
			computation();
			computation();
			
			if (radioInput == INVALID) {
				radioDownTime++;
			} else {
				radioDownTime = 0;
			}
			
			computation();
			computation();
			computation();
			computation();
			if (spiInput == INVALID) {
				spiDownTime++;
			} else {
				spiDownTime = 0;
			}
			
			isSafe = (radioDownTime < MAX_DOWN_TIME) || (spiDownTime < MAX_DOWN_TIME);
			fprintf(outputFile, "%d\n", isSafe);
			pause;
		}
	} when (terminate);
}

int getMode(const int communicationInput) {
	const int mask = (communicationInput & 0x02) > 1;
//	computation();
//	computation();	
	
	switch (mask) {
		case (0):	return MANUAL;
		
		case (1):	return AUTOMATIC;
		
		default:
					break;
	}
	
	return AUTOMATIC;
}

double autopilot(const int mode, const int communicationInput) {
	computation();
	computation();
	computation();
	computation();
	computation();
	computation();
	computation();
	computation();

	return (double)(communicationInput * mode);
}

void computation(void) {
	double result = 1.0;
	
	int i;
	for (i = 1; i < 2000; i++) #1999#1999 {
		result += (double)((int)result % i) * (result / result);
	}
}

