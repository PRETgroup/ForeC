#include <sys/time.h>
#include <stdio.h>
#include <omp.h>
#include <unistd.h>

// ForeC workaround to external declarations.
extern struct timeval;

// C standard function prototypes
int gettimeofday(struct timeval * __restrict, void * __restrict);
int printf(const char * __restrict, ...);


long double calculatePi(const int range, int threadId);

thread calculatePi0(void);
thread calculatePi1(void);
thread calculatePi2(void);
thread calculatePi3(void);

shared int SUBRANGE;
shared long double pi = 0 combine with plus;

long double plus(long double *left, long double *right);


int main(int argc, char **argv) {
    int THREADS = 4;
    
    struct timeval startTime, endTime;
    gettimeofday(&startTime, 0);
    //- - - -
    
    int RANGE = 1000000000;
    SUBRANGE = RANGE/THREADS;
    
    par(calculatePi0, calculatePi1, calculatePi2, calculatePi3);
    
    //- - - -
    gettimeofday(&endTime, 0);
    long seconds = endTime.tv_sec - startTime.tv_sec;
    int microseconds = endTime.tv_usec - startTime.tv_usec;
    if (microseconds < 0) {
        microseconds += 1000000;
        seconds--;
    }
    printf("Runtime: %ld.%.6d seconds\r\n", seconds, microseconds);
    
    printf("Approximation of pi: %.21Lg\r\n", pi);
}

long double calculatePi(const int range, int threadId) {
    long double result = 0.0;
    long double denominator = 0.0;
    long double numerator = -1;
    
    const int startIndex = range*threadId;
    const int endIndex = range*(threadId + 1);
    
    for (int i = startIndex; i < endIndex; ++i) {
        numerator = numerator * -1;
        denominator = 2*i + 1;
        result += 4*(numerator/denominator);
    }
    
    return result;
}

long double plus(long double *left, long double *right) {
	return *left + *right;
}

thread calculatePi0(void) {
	pi = calculatePi(SUBRANGE, 0);
}

thread calculatePi1(void) {
	pi = calculatePi(SUBRANGE, 1);
}

thread calculatePi2(void) {
	pi = calculatePi(SUBRANGE, 2);
}

thread calculatePi3(void) {
	pi = calculatePi(SUBRANGE, 3);
}




