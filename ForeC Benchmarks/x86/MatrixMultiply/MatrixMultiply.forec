/*******************************************************************************
 * Based on:
 *   Copyright (c) 2008 International Business Machines Corp.
 *   All rights reserved. This program and the accompanying materials
 *   are made available under the terms of the Eclipse Public License v1.0
 *   which accompanies this distribution, and is available at
 *   http://www.eclipse.org/legal/epl-v10.html
 *
 *   Contributors:
 *      Ajith Ramanath            - initial API and implementation
 *      Radhakrishnan Thangamuthu - initial API and implementation
 *      Mike Fulton               - initial API and implementation
 *******************************************************************************/
 
#include <sys/time.h>
#include <stdlib.h>
#include <stdio.h>

int RAND_MAX;
#define RAND_MAX__global_0_0 RAND_MAX

static const int MAXINT = 10000;
static const int THREAD_COUNT = 16;
static const int REPEAT = 10;

int** matrixA;
int** matrixB;
int** matrixC;

shared int*** matrixA_ptr = &matrixA;
shared int*** matrixB_ptr = &matrixB;
shared int*** matrixC_ptr = &matrixC;

void allocateMatrix(int*** matrix);
void fillMatrix(int*** matrix);
void multiplyMatrix(int*** matrixA, int*** matrixB, int*** matrixC, const int startIndex);

thread initialiseMatrixA(void);
thread initialiseMatrixB(void);
thread initialiseMatrixC(void);

thread multiplyMatrix0(void);
thread multiplyMatrix1(void);
thread multiplyMatrix2(void);
thread multiplyMatrix3(void);

int main(int argc, char **args) {
	struct timeval startTime, endTime;
	gettimeofday(&startTime, 0);
	//- - - -

	printf("Initialising matrices\n");
	par(initialiseMatrixA, initialiseMatrixB, initialiseMatrixC);
	
	int i;
	for (i = 0; i < REPEAT; i++) #10#10 {
		printf("Iteration %d\n", i);
		
		/* matrix multiplication code here */
		par(multiplyMatrix0, multiplyMatrix1, multiplyMatrix2, multiplyMatrix3);
	}
	
	//- - - -
	gettimeofday(&endTime,0);
	long seconds = endTime.tv_sec - startTime.tv_sec;
	int microseconds = endTime.tv_usec - startTime.tv_usec;
	if (microseconds < 0) {
		microseconds += 1000000;
		seconds--;
	}

	printf("Runtime: %ld.%.6d\r\n", seconds, microseconds);
	
	return 0;
}

thread initialiseMatrixA(void) {
	allocateMatrix(matrixA_ptr);
	fillMatrix(matrixA_ptr);
}

thread initialiseMatrixB(void) {
	allocateMatrix(matrixB_ptr);
	fillMatrix(matrixB_ptr);
}

thread initialiseMatrixC(void) {
	allocateMatrix(matrixC_ptr);
	fillMatrix(matrixC_ptr);
}

thread multiplyMatrix0(void) {
	int RANGE = 150;
	multiplyMatrix(matrixA_ptr, matrixB_ptr, matrixC_ptr, 0 * RANGE);
}

thread multiplyMatrix1(void) {
	int RANGE = 150;
	multiplyMatrix(matrixA_ptr, matrixB_ptr, matrixC_ptr, 1 * RANGE);
}

thread multiplyMatrix2(void) {
	int RANGE = 150;
	multiplyMatrix(matrixA_ptr, matrixB_ptr, matrixC_ptr, 2 * RANGE);
}

thread multiplyMatrix3(void) {
	int RANGE = 150;
	multiplyMatrix(matrixA_ptr, matrixB_ptr, matrixC_ptr, 3 * RANGE);
}

void allocateMatrix(int*** matrix) {
	int SIZE = 150 * 4;
	
	(*matrix) = (int**)malloc(SIZE * sizeof(int*));
	
	int i;
	for (i = 0; i < SIZE; i++) #600#600 {
		(*matrix)[i] = (int*)malloc(SIZE * sizeof(int));
	}
}

void fillMatrix(int*** matrix) {
	int SIZE = 150 * 4;
	unsigned int seed = 10000;

	int i;
	for (i = 0; i < SIZE; i++) #600#600 {
	
		int j;
		for (j = 0; j < SIZE; j++) #600#600 {
			(*matrix)[i][j] = 1 + (int) (MAXINT * (rand_r(&seed) / (RAND_MAX + 1.0)));
		}
	}
}

void multiplyMatrix(int*** matrixA, int*** matrixB, int*** matrixC, const int startIndex) {
	int SIZE = 150 * 4;
	int RANGE = 150;
	
	int i;
	for (i = startIndex; i < startIndex + RANGE; i++) #150#150 {
		
		int j;
		for (j = 0; j < SIZE; j++) #600#600 {
			int sum = 0;
			
			int k;
			for (k = 0; k < SIZE; k++) #600#600 {
				sum += (*matrixA)[i][k] * (*matrixB)[k][j];
			}
			
			(*matrixC)[i][j] = sum;
		}
	}
}

