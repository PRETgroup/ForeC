/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Implementation of a pacemaker based on the UPPAAL model provided
 * by "Zhihao Jiang, Miroslav Pajic, Salar Moarref, Rajeev Alur,
 * and Rahul Mangharam. Modeling and Verification of a Dual Chamber
 * Implantable Pacemaker. Tools and Algorithms for the Construction
 * and Analysis of Systems. LNCS, vol. 7214, pp. 188-203. Springer
 * Berlin Heidelberg (2012)". UPPAAL models retrieved from
 * http://www.seas.upenn.edu/~zhihaoj/VHM/PM_verify.zip
 *
 * Author of this file: Eugene Kin Chee Yip (29 September 2013)
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Abbreviations
 * -------------
 * SA: Sinoatrial
 * AV: Atrioventricular
 * AS: Atrial Sense
 * AP: Atrial Pacing
 * AR: Artrial Refractory
 * VS: Ventricular Sense
 * VP: Ventricular Pacing
 *
 * SVT: Supraventricular Tachycardia
 * PMT: Pacemaker Mediated Tachycardia
 * PVAB: Post Ventricular Atrial Blanking
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#include <stdio.h>

// Signal definition.
typedef enum {
	absent = 0,
	present = 1
} Signal;

// Event definition.
typedef struct {
	unsigned int timestamp;
	Signal AP;
	Signal VP;
	Signal DDD;
	Signal VDI;
	
	Signal lrl;
	Signal url;
	Signal pmt;
	Signal vurl;
	Signal elt;
} Event;

// Data log definition.
typedef struct {
	Event events[100];	// Used as a circular buffer.
	unsigned int tail;
	unsigned int size;
} Log;


// Arithmetic max combine function.
const unsigned int max(const unsigned int * const copy1, const unsigned int * const copy2) {
	if (*copy1 > *copy2) {
		return *copy1;
	} else {
		return *copy2;
	}
}

// Logical or combine function.
const Signal or(const Signal * const copy1, const Signal * const copy2) {
	if ((*copy1 == present) || (*copy2 == present)) {
		return present;
	} else {
		return absent;
	}
}


// Base period of the program in nanoseconds.
const unsigned int Base_Period = 1562500;

// Time periods in multiples of the Base_Period.
shared unsigned int TURI = 256;			// Upper Rate Interval
shared unsigned int TLRI = 640;			// Lowest Rate Interval
shared unsigned int TAVI = 96;			// Atrio-Ventricular Interval
const unsigned int TVRP = 96;			// Ventricular Refractory Period
const unsigned int TPVAB = 32;			// Post-Ventricular Atrial Blocking
const unsigned int Threshold = 256;		// Mode-Switch Atrial Threshold

shared unsigned int TPVARP = 64 combine with max;	// Post-Ventricular Atrial Refractory Period
const unsigned int TPVARP_100 = 64;		// 100 milliseconds.
const unsigned int TPVARP_500 = 320;	// 500 milliseconds.

const unsigned int T_150 = 96;			// 150 milliseconds.
const unsigned int T_200 = 128;			// 200 milliseconds.
const unsigned int T_500 = 320;			// 500 milliseconds.

const unsigned int Aminwait = 320;		// 500 milliseconds.
const unsigned int Vminwait = 320;		// 500 milliseconds.
const unsigned int Tantemin = 128;		// 200 milliseconds.
const unsigned int Tretromin = 128;		// 200 milliseconds.

shared unsigned int timer_uri = 0;		// Global timer for URI.


// Input variables.
shared Signal A_Get = absent;
input Signal A_Get_o = absent;

shared Signal A_Act = absent;
input Signal A_Act_o = absent;

shared Signal V_Get = absent;
input Signal V_Get_o = absent;

shared Signal V_Act = absent;
input Signal V_Act_o = absent;


// Output variables.
shared Signal AP = absent;
output Signal AP_o = absent;

shared Signal VP = absent combine with or;
output Signal VP_o = absent;


// Internal variables.
shared Signal AS = absent;
shared Signal AR = absent;

shared Signal VS = absent;

shared Signal DDD = absent;
shared Signal VDI = absent;

shared Signal A_Block = absent;
shared Signal V_Block = absent;

shared Signal Fast = absent;
shared Signal Slow = absent;

shared Signal D_Beg = absent;
shared Signal D_End = absent;

shared Signal VP_AS = absent;
shared Signal Reset = absent;

shared Log log = {.events = { {0} , }, .tail = 0, .size = 100};


// Thread prototypes.
thread ekgSensing(shared Signal AP, shared Signal A_Act, shared Signal A_Get, shared Signal VP, shared Signal V_Act, shared Signal V_Get);
thread lri_ms(shared Signal AS, shared Signal VS, shared Signal VP, shared Signal DDD, shared Signal VDI, shared Signal AP, shared Signal VP);
thread avi_ms(shared Signal AS, shared Signal VS, shared Signal VP, shared Signal DDD, shared Signal VDI, shared Signal AP, shared Signal VP, shared unsigned int timer_uri);
thread uri(shared Signal VP, shared Signal VS, shared unsigned int timer_uri);
thread pvarp_elt(shared Signal A_Get, shared Signal VS, shared Signal VP, shared Signal A_Act, shared Signal AS, shared Signal AR, shared Signal A_Block, shared unsigned int TPVARP);
thread vrp(shared Signal V_Get, shared Signal VP, shared Signal V_Act, shared Signal VS, shared Signal V_Block);
thread interval_ms(shared Signal AS, shared Signal AR, shared Signal AP, shared Signal Fast, shared Signal Slow);
thread counter_ms(shared Signal Fast, shared Signal Slow, shared Signal D_End, shared Signal DDD, shared Signal VDI, shared Signal D_Beg);
thread duration_ms(shared Signal VS, shared Signal VP, shared Signal D_Beg, shared Signal D_End);
thread pattern_vpAs(shared Signal VP, shared Signal VS, shared Signal AP, shared Signal AR, shared Signal VP_AS, shared Signal Reset);
thread counter_vpAs(shared Signal VP_AS, shared Signal Reset, shared unsigned int TPVARP);
thread logging(shared Signal AS, shared Signal AP, shared Signal AR, shared Signal A_Block, shared Signal VS, shared Signal VP, shared Signal V_Block, shared Log log);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Lower Rate Interval (LRI) with Mode-Switch (MS)
 * -----------------------------------------------
 * This component keeps the heart rate above a minimum value. Can
 * switch between DDD and VDI modes.
 *
 * Inputs: AS, VS, VP, DDD, VDI.
 * Outputs: AP, VP.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
void main(int argc, char **argv) {
	printf("Pacemaker\n");
	
	par(
		ekgSensing,								// Random heart model.
		lri_ms, avi_ms, uri, pvarp_elt, vrp,	// Basic pacemaker.
		interval_ms, counter_ms, duration_ms,	// Mode-switch.
		pattern_vpAs, counter_vpAs,				// ELT termination.
		logging
	);
}


thread ekgSensing(shared Signal AP, shared Signal A_Act, shared Signal A_Get, shared Signal VP, shared Signal V_Act, shared Signal V_Get) {
	// Internal state.
	enum {
		Init_conduction = 0,
		Ante,
		Retro
	} state_conduction = Init_conduction;
	
	// Internal timers.
	unsigned int timer_rhm_a = 0;
	unsigned int timer_rhm_v = 0;
	unsigned int timer_conduction = 0;
	
	while (1) {
		// thread rhm_a(shared Signal AP, shared Signal A_Act, shared Signal A_Get);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		* Atrial Random Heart Model (RHM-A)
		* --------------------------------------
		* This component models the heart atrial behaviour in a random
		* manner.
		*
		* Inputs: AP, A_Act.
		* Outputs: A_Get.
		* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("rhm_a\n");
		
		timer_rhm_a = timer_rhm_a + 1;
		
		if ((A_Act == present) || (AP == present)) {
			timer_rhm_a = 0;
		} else if (timer_rhm_a > Aminwait) {
			A_Get = present;
		} else {
			// Do nothing.
		}
		
		
		// thread rhm_v(shared Signal VP, shared Signal V_Act, shared Signal V_Get);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		* Ventricular Random Heart Model (RHM-V)
		* --------------------------------------
		* This component models the heart ventricle behaviour in a random
		* manner.
		*
		* Inputs: VP, V_Act.
		* Outputs: V_Get.
		* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("rhm_v\n");
		
		timer_rhm_v = timer_rhm_v + 1;
		
		if ((V_Act == present) || (VP == present)) {
			timer_rhm_v = 0;
		} else if (timer_rhm_v > Vminwait) {
			V_Get = present;
		} else {
			// Do nothing.
		}
		
		
		// thread conduction(shared Signal AP, shared Signal A_Act, shared Signal A_Get, shared Signal VP, shared Signal V_Act, shared Signal V_Get);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		* Ventricular Random Heart Model (RHM-V)
		* --------------------------------------
		* This component models the heart ventricle behaviour in a random
		* manner.
		*
		* Inputs: AP, A_Act, VP, V_Act.
		* Outputs: A_Get, V_Get.
		* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("conduction\n");
		
		timer_conduction = timer_conduction + 1;
		
		if (state_conduction == Init_conduction) {
			if ((A_Get == present) || (AP == present)) {
				state_conduction = Ante;				// Go to state Ante.
				timer_conduction = 0;
			} else if ((V_Get == present) || (VP == present)) {
				state_conduction = Retro;				// Go to state Retro.
				timer_conduction = 0;
			} else if ((A_Get == present) || (AP == present) || (V_Get == present) || (VP == present)) {
				state_conduction = Init_conduction;		// Stay in state Init.
			} else {
				// Do nothing.
			}
		} else if (state_conduction == Ante) {
			if ((V_Get == present) || (VP == present)) {
				state_conduction = Init_conduction;		// Go to state Init.
			} else if (timer_conduction >= Tantemin) {
				state_conduction = Init_conduction;		// Go to state Init.
				V_Act = present;
			} else {
				// Do nothing.
			}
		} else if (state_conduction == Retro) {
			if ((A_Get == present) || (AP == present)) {
				state_conduction = Init_conduction;		// Go to state Init.
			} else if (timer_conduction >= Tretromin) {
				state_conduction = Init_conduction;		// Go to state Init.
				A_Act = present;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("conduction: In an undefined state (%d)\n", state_conduction);
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Lower Rate Interval (LRI) with Mode-Switch (MS)
 * -----------------------------------------------
 * This component keeps the heart rate above a minimum value. Can
 * switch between DDD and VDI modes.
 *
 * Inputs: AS, VS, VP, DDD, VDI.
 * Outputs: AP, VP.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread lri_ms(shared Signal AS, shared Signal VS, shared Signal VP, shared Signal DDD, shared Signal VDI, shared Signal AP, shared Signal VP) {
	// Internal state.
	enum State {
		Init_lri_ms = 0,	// State LRI
		Sensed,
		VDI_LRI
	} state_lri_ms = Init_lri_ms;
	
	// Internal timer.
	unsigned int timer_lri_ms = 0;
	
	// New VP
	Signal VP_new = absent;
	
	while (1) {
		printf("lri_ms\n");
		
		timer_lri_ms = timer_lri_ms + 1;
		
		// Reset output signals.
		AP = absent;
		VP_new = absent;
		
		if (state_lri_ms == Init_lri_ms) {
			if ((VP == present) || (VS == present)) {
				state_lri_ms = Init_lri_ms; // Stay in state Init.
				timer_lri_ms = 0;
			} else if (timer_lri_ms >= (TLRI - TAVI)) {
				state_lri_ms = Init_lri_ms;	// Stay in state Init.
				AP = present;
			} else if (AS == present) {
				state_lri_ms = Sensed;		// Go to state Sensed.
			} else if (VDI == present) {
				state_lri_ms = VDI_LRI;		// Go to state VDI_LRI.
			} else {
				// Do nothing.
			}
		} else if (state_lri_ms == VDI_LRI) {
			if (VS == present) {
				state_lri_ms = VDI_LRI;		// Stay in state VDI_LRI.
				timer_lri_ms = 0;
			} else if (timer_lri_ms >= TLRI) {
				state_lri_ms = Init_lri_ms;	// Stay in state VDI_LRI.
				VP_new = present;
			} else if (DDD == present) {
				state_lri_ms = Init_lri_ms;	// Go to state Init.
				timer_lri_ms = 0;
			}
		} else if (state_lri_ms == Sensed) {
			if (VDI == present) {
				state_lri_ms = VDI_LRI;		// Go to state VDI_LRI.
			} else if ((VP == present) || (VS == present)) {
				state_lri_ms = Init_lri_ms;	// Go to state Init.
				timer_lri_ms = 0;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("lri_ms: In an undefined state (%d)\n", state_lri_ms);
		}
		
		VP = VP_new;
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Atrio-Ventricular Interval (AVI) with Mode-Switch (MS)
 * ------------------------------------------------------
 * This component maintains the appropriate delay between the
 * atrial activation and the ventricular activation. Can switch
 * between DDD and VDI modes.
 *
 * Inputs: AS, VS, VP, DDD, VDI.
 * Outputs: AP, VP.
 * Side-effects: timer_uri.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread avi_ms(shared Signal AS, shared Signal VS, shared Signal VP, shared Signal DDD, shared Signal VDI, shared Signal AP, shared Signal VP, shared unsigned int timer_uri) {
	// Internal state.
	enum State {
		Init_avi_ms = 0,
		AVI,
		Wait_URI,
		VDI_Idle,
		VDI_AVI
	} state_avi_ms = Init_avi_ms;
	
	// Internal timer.
	unsigned int timer_avi_ms = 0;
	
	while (1) {
		printf("avi_ms\n");
		
		timer_avi_ms = timer_avi_ms + 1;
		
		// Reset signals.
		VP = absent;
		
		if (state_avi_ms == Init_avi_ms) {
			if ((AS == present) || (AP == present)) {
				state_avi_ms = AVI;				// Go to state AVI.
				timer_avi_ms = 0;
			} else if (VDI == present) {
				state_avi_ms = VDI_Idle;		// Go to state VDI_Idle.
			} else {
				// Do nothing.
			}
		} else if (state_avi_ms == AVI) {
			if (VDI == present) {
				state_avi_ms = VDI_AVI;			// Go to state VDI_AVI.
			} else if (VS == present) {
				state_avi_ms = Init_avi_ms;		// Go to state Init.
			} else if (timer_avi_ms >= TAVI) {
				if (timer_uri >= TURI) {
					state_avi_ms = Init_avi_ms;	// Go to state Init.
					VP = present;
				} else if (timer_uri <= TURI) {
					state_avi_ms = Wait_URI;	// Go to state Wait_URI.
				} else {
					// Do nothing.
				}
			} else {
				// Do nothing.
			}
		} else if (state_avi_ms == Wait_URI) {
			if (timer_uri >= TURI) {
				state_avi_ms = Init_avi_ms;		// Go to state Init.
				VP = present;
			} else if (VS == present) {
				state_avi_ms = Init_avi_ms;		// Go to state Init.
			} else if (VDI == present) {
				state_avi_ms = VDI_Idle;		// Go to state VDI_Idle.
				timer_avi_ms = 0;
			} else {
				// Do nothing.
			}
		} else if (state_avi_ms == VDI_Idle) {
			if (DDD == present) {
				state_avi_ms = Init_avi_ms;		// Go to state Init.
			} else if ((AS == present) || (AP == present)) {
				state_avi_ms = VDI_AVI;			// Go to state VDI_AVI.
				timer_avi_ms = 0;
			} else {
				// Do nothing.
			}
		} else if (state_avi_ms == VDI_AVI) {
			if (VS == present) {
				state_avi_ms = VDI_Idle;		// Go to state VDI_Idle.
			} else if (DDD == present) {
				state_avi_ms = AVI;				// Go to state AVI.
			} else if (timer_avi_ms >= TAVI) {
				state_avi_ms = VDI_Idle;		// Go to state VDI_Idle.
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("avi_ms: In an undefined state (%d)\n", state_avi_ms);
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Upper Rate Interval (URI)
 * -------------------------
 * This component limits the ventricular pacing rate by enforcing
 * a lower bound on the times between consecutive ventricle events.
 *
 * Inputs: VS, VP.
 * Outputs: none.
 * Side-effects: timer_uri.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread uri(shared Signal VP, shared Signal VS, shared unsigned int timer_uri) {
	while (1) {
		printf("uri\n");
		
		timer_uri = timer_uri + 1;
		
		if ((VP == present) || (VS == present)) {
			timer_uri = 0;
		} else {
			// Do nothing.
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Post Ventricular Atrial Refractory Period (PVARP) with Endless
 * Loop Tachycardia (ELT) Termination
 * --------------------------------------------------------------
 * This component ignores atrial events during the PVAB period and
 * allows atrial events to trigger AR events during the PVARP. This
 * filters noisy atrial events. The PVARP is allowed to be changed
 * once by the anti-ELT algorithm.
 *
 * Inputs: A_Get, VS, VP, A_Act.
 * Outputs: AS, AR, A_Block.
 * Side-effects: TPVARP.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread pvarp_elt(shared Signal A_Get, shared Signal VS, shared Signal VP, shared Signal A_Act, shared Signal AS, shared Signal AR, shared Signal A_Block, shared unsigned int TPVARP) {
	// Internal state.
	enum State {
		Init_pvarp_elt = 0,
		PVAB, PVARP
		//	Inter1, ABI, Inter2
	} state_pvarp_elt = Init_pvarp_elt;
	
	// Internal timer.
	unsigned int timer_pvarp_elt = 0;
	
	while (1) {
		printf("pvarp_elt\n");
		
		timer_pvarp_elt = timer_pvarp_elt + 1;
		
		// Reset signals.
		AS = absent;
		AR = absent;
		A_Block = absent;
		
		if (state_pvarp_elt == Init_pvarp_elt) {
			if ((A_Act == present) || (A_Get == present)) {
				//	state_pvarp_elt = Inter1;		// Instantaneous transition.
				
				state_pvarp_elt = Init_pvarp_elt;	// Stay in state Init.
				AS = present;
			} else if ((VS == present) || (VS == present)) {
				state_pvarp_elt = PVAB;				// Go to state PVAB.
				timer_pvarp_elt = 0;
			} else {
				// Do nothing.
			}
		} else if (state_pvarp_elt == PVAB) {
			if ((A_Act == present) || (A_Get == present)) {
				//	state_pvarp_elt = ABI;			// Instantaneous transition.
				
				state_pvarp_elt = PVAB;				// Stay in state PVAB.
				A_Block = present;
			} else if (timer_pvarp_elt >= TPVAB) {
				state_pvarp_elt = PVARP;			// Go to state PVARP.
			} else {
				// Do nothing.
			}
		} else if (state_pvarp_elt == PVARP) {
			if ((A_Act == present) || (A_Get == present)) {
				// state_pvarp_elt = Inter2;		// Instantaneous transition.
				
				state_pvarp_elt = PVARP;			// Stay in state PVARP.
				AR = present;
			} else if (timer_pvarp_elt >= TPVARP) {
				state_pvarp_elt = Init_pvarp_elt;	// Go to state Init.
				TPVARP = TPVARP_100;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("pvarp_elt: In an undefined state (%d)\n", state_pvarp_elt);
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Ventricular Refractory Period (VRP)
 * -----------------------------------
 * This component follows each ventricular event to filter noise
 * and early events in the ventricular channel which could
 * otherwise cause undesired pacemaker behaviour.
 *
 * Inputs: V_Get, VP, V_Act.
 * Outputs: VS, V_Block.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread vrp(shared Signal V_Get, shared Signal VP, shared Signal V_Act, shared Signal VS, shared Signal V_Block) {
	// Internal state.
	enum State {
		Init_vrp = 0,	// Idle state.
		VRP
		//	Inter, VB
	} state_vrp = Init_vrp;
	
	// Internal timer.
	unsigned int timer_vrp = 0;
	
	while (1) {
		printf("vrp\n");
		
		timer_vrp = timer_vrp + 1;
		
		// Reset signals;
		VS = absent;
		V_Block = absent;
		
		if (state_vrp == Init_vrp) {
			if ((V_Act == present) || (V_Get == present)) {
				//	state_vrp = Inter;	// Instantaneous transition.
				
				state_vrp = VRP;		// Go to state VRP.
				VS = present;
				timer_vrp = 0;
			} else if (VP == present) {
				state_vrp = VRP;		// Go to state Inter.
				timer_vrp = 0;
			}
		} else if (state_vrp == VRP) {
			if (timer_vrp >= TVRP) {
				state_vrp = Init_vrp;	// Go to state Init.
			} else if ((V_Act == present) || (V_Get == present)) {
				//	state_vrp = VB;		// Instantaneous transition.
				
				state_vrp = VRP;		// Stay in state VRP.
				V_Block = present;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("vrp: In an undefined state (%d)\n", state_vrp);
		}
		
		pause;
	}
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Interval between Atrial Events (for the Mode-Switch Algorithm)
 * --------------------------------------------------------------
 * This component measures the interval between atrial events
 * outside the blanking period (AS, AR). The interval is "fast" if
 * it is above a threshold and "slow" otherwise.
 *
 * Inputs: AS, AR, AP.
 * Outputs: Fast, Slow.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread interval_ms(shared Signal AS, shared Signal AR, shared Signal AP, shared Signal Fast, shared Signal Slow) {
	// Internal state.
	enum State {
		Init_interval_ms = 0,	// First Wait state.
		Wait
		//	Reset, APed
	} state_interval_ms = Init_interval_ms;
	
	// Internal timer.
	unsigned int timer_interval_ms = 0;
	
	while (1) {
		printf("interval_ms\n");
		
		timer_interval_ms = timer_interval_ms + 1;
		
		// Reset signals.
		Fast = absent;
		Slow = absent;
		
		if (state_interval_ms == Init_interval_ms) {
			if ((AP == present) || (AR == present) || (AS == present)) {
				state_interval_ms = Wait;		// Go to state Wait.
				timer_interval_ms = 0;
			} else {
				// Do nothing.
			}
		} else if (state_interval_ms == Wait) {
			if ((AR == present) || (AS == present)) {
				//	state_interval_ms = Reset;	// Instantaneous transiiton.
				
				if (timer_interval_ms <= Threshold) {
					state_interval_ms = Wait;	// Stay in state Wait.
					Fast = present;
					timer_interval_ms = 0;
				} else if (timer_interval_ms > Threshold) {
					state_interval_ms = Wait;	// Stay in state Wait.
					Slow = present;
					timer_interval_ms = 0;
				} else {
					// Do nothing.
				}
			} else if (AP == present) {
				//	state_interval_ms = APed;	// Instantaneous transition.
				
				state_interval_ms = Wait;		// Stay in state Wait.
				Slow = present;
				timer_interval_ms = 0;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("interval_ms: In an undefined state (%d)\n", state_interval_ms);
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Counter for Fast and Slow Intervals between Atrial Events (for
 * the Mode-Switch Algorithm)
 * --------------------------------------------------------------
 * This component counts up for "fast" events and counts down for
 * "slow" events. Switches to VDI mode when "fast" events have
 * occured and DDD otherwise.
 *
 * Inputs: Fast, Slow, D_End.
 * Outputs: DDD, VDI, D_Beg.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread counter_ms(shared Signal Fast, shared Signal Slow, shared Signal D_End, shared Signal DDD, shared Signal VDI, shared Signal D_Beg) {
	// Internal state.
	enum State {
		Init_counter_ms = 0,
		Fast1, Fast2, Fast3, Fast4, Fast5, Fast6, Fast7, Fast8
		//	Switch1, Switch2
	} state_counter_ms = Init_counter_ms;
	
	while (1) {
		printf("counter_ms\n");
		
		// Reset signals.
		DDD = absent;
		VDI = absent;
		D_Beg = absent;
		
		if (state_counter_ms == Init_counter_ms) {
			if (Fast == present) {
				state_counter_ms = Fast1;					// Go to state Fast1.
			} else {
				// Do nothing.
			}
		} else if (state_counter_ms == Fast1) {
			if (Slow == present) {
				state_counter_ms = Init_counter_ms;			// Go to state Init.
				DDD = present;								// From the transition from state Switch1.
			} else if (Fast == present) {
				state_counter_ms = Fast2;					// Go to state Fast2.
			} else if (D_End == present) {
				state_counter_ms = Fast1;					// Stay in state Fast1.
				VDI = present;								// From the committed state transition.
			} else {
				// Do nothing.
			}
		} else if (state_counter_ms == Fast8) {
			if (Slow == present) {
				state_counter_ms = Fast7;					// Go back to state Fast7.
			} else if (D_End == present) {
				state_counter_ms = Fast8;					// Stay in state Fast8.
				VDI = present;								// From the transition from state Fast8.
			} else {
				// Do nothing.
			}
		} else {
			// Fast2 to Fast7.
			if (Slow == present) {
				state_counter_ms = State((int)state_counter_ms - 1);	// Go back to state Fast1 to Fast6.
			} else if (Fast == present) {
				if (state_counter_ms == Fast7) {
					D_Beg_new = present;								// From the committed state transition.
				}
				state_counter_ms = State((int)state_counter_ms + 1);	// Go to state Fast3 to Fast8.
			} else if (D_End == present) {
				state_counter_ms = State((int)state_counter_ms + 0);	// Stay in the current state.
				VDI = present;											// From the transition from the current state.
			} else {
				// Do nothing.
			}
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Duration of Fast Atrial Events (for the Mode-Switch Algorithm)
 * --------------------------------------------------------------
 * This component confirms SVT after a period of time.
 *
 * Inputs: VS, VP, D_Beg.
 * Outputs: D_End.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread duration_ms(shared Signal VS, shared Signal VP, shared Signal D_Beg, shared Signal D_End) {
	// Internal state.
	enum State {
		Init_duration_ms = 0,
		V1, V2, V3, V4, V5, V6, V7, V8, V9
	} state_duration_ms = Init_duration_ms;
	
	while (1) {
		printf("duration_ms\n");
		
		// Reset signal.
		D_End = absent;
		
		if (state_duration_ms == Init_duration_ms) {
			if (D_Beg == present) {
				state_duration_ms = V1;									// Go to state V1.
			} else {
				// Do nothing.
			}
		} else {
			// V1 to V8.
			if ((VS == present) || (VP == present)) {
				state_duration_ms = State((int)state_duration_ms + 1);	// Go to state V2 to V9.
				
				if (state_duration_ms == V9) {							// Instantaneous transition.
					state_duration_ms = Init_duration_ms;				// Go to state Init.
					D_End = present;
				} else {
					// Do nothing.
				}
			} else {
				// Do nothing.
			}
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Ventricular Pacing - Atrial Pacing (VP-AS) Pattern Detector
 * (for ELT-Termination Algorithm)
 * -----------------------------------------------------------
 * This component detects the VP-AS pattern with ventricular rate
 * at the upper rate limit and sends out VP_AS event if the
 * interval qualifies.
 *
 * Inputs: VP, VS, AP, AR.
 * Outputs: VP_AS, Reset.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread pattern_vpAs(shared Signal VP, shared Signal VS, shared Signal AP, shared Signal AR, shared Signal VP_AS, shared Signal Reset) {
	// Internal state.
	enum State {
		Init_pattern_vpAs = 0,
		VP1
		//	AS1,
		//	Cancel
	} state_pattern_vpAs = Init_pattern_vpAs;
	
	// Internal timer.
	unsigned int timer_pattern_vpAs = 0;
	
	while (1) {
		printf("pattern_vpAs\n");
		
		timer_pattern_vpAs = timer_pattern_vpAs + 1;
		
		// Reset signals.
		VP_AS = absent;
		Reset = absent;
		
		if (state_pattern_vpAs == Init_pattern_vpAs) {
			if (VP == present) {
				state_pattern_vpAs = VP1;			// Go to state VP1.
				timer_pattern_vpAs = 0;
			} else {
				// Do nothing.
			}
		} else if (state_pattern_vpAs == VP1) {
			if (AS == present) {
				//	state_pattern_vpAs = AS1;		// Instantaneous transition.
				
				if (T_150 <= timer_pattern_vpAs && timer_pattern_vpAs <= T_200) {
					VP_AS = present;
				} else {
					// Do nothing.
				}
			} else if ((VS == present) || (AP == present) || (AR == present)) {
				//	state_pattern_vpAs = Cancel;	// Instantaneous transition.
				
				Reset = present;
			}
			state_pattern_vpAs = Init_pattern_vpAs;	// Go to state Init.
		} else {
			// In an undefined state.
			printf("pattern_vpAs: In an undefined state (%d)\n", state_pattern_vpAs);
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Counter for Ventricular Pacing - Atrial Pacing (VP-AS) Patterns
 * (for ELT-Termination Algorithm)
 * ---------------------------------------------------------------
 * This component counts the number of qualified VP-AS patterns.
 *
 * Inputs: VP_AS, Reset.
 * Outputs: none.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

thread counter_vpAs(shared Signal VP_AS, shared Signal Reset, shared unsigned int TPVARP) {
	// Internal state.
	enum State {
		Init_counter_vpAs = 0,
		E1, E2, E3, E4, E5, E6, E7, E8
	} state_counter_vpAs = Init_counter_vpAs;
	
	while (1) {
		printf("counter_vpAs\n");
		
		if (state_counter_vpAs == Init_counter_vpAs) {
			if (VP_AS == present) {
				state_counter_vpAs = E1;								// Go to state E1.
			} else {
				// Do nothing.
			}
		} else {
			// E1 to E7.
			if (Reset == present) {
				state_counter_vpAs = Init_counter_vpAs;					// Go to state Init.
			} else if (VP_AS == present) {
				state_counter_vpAs = State((int)state_counter_vpAs + 1);// Go to state E2 to E8.
				
				if (state_counter_vpAs == E8) {							// Instantaneous transition.
					state_counter_vpAs = Init_counter_vpAs;				// Go to state Init.
					TPVARP = T_500;
				} else {
					// Do nothing.
				}
			} else {
				// Do nothing.
			}
		}
		
		pause;
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Logging of state violations
 * ---------------------------
 * This component monitors the pacemaker and logs any state 
 * violations.
 *
 * Inputs: AS, AP, AR, A_Block, VS, VP, V_Block, VDI.
 * Outputs: none.
 * Side-effects: log.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
thread logging(shared Signal AS, shared Signal AP, shared Signal AR, shared Signal A_Block, shared Signal VS, shared Signal VP, shared Signal V_Block, shared Signal VDI) {
	// Internal states.
	enum {
		Init_lrl = 0,
		Wait_lrl
	} state_lrl = Init_lrl;

	enum {
		Init_url = 0,
		Wait_url
	} state_url = Init_url;

	enum {
		Init_pmt = 0,
		Wait_pmt,
		Error_pmt
	} state_pmt = Init_pmt;
	
	enum {
		Init_vurl = 0,
		V_vurl,
		Error_vurl
	} state_vurl = Init_vurl;

	enum {
		Init_elt = 0,
		AS_elt, VP_elt,
		Error_elt
	} state_elt = Init_elt;
	
	// Internal timers.
	unsigned int timer_lrl = 0;
	unsigned int timer_url = 0;
	unsigned int timer_pmt = 0;
	unsigned int timer_vurl = 0;

	// Internal signals.
	Signal violated = absent;
	Event event;

	while (1) {
		violated = absent;
		
		event.timestamp = 0;
		event.AP = absent;
		event.VP = absent;
		event.DDD = absent;
		event.VDI = absent;
		event.lrl = absent;
		event.url = absent;
		event.pmt = absent;
		event.vurl = absent;
		event.elt = absent;
	
		// lrl(shared Signal VP, shared Signal VS);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Lower Rate Limit (LRL)
		 * ----------------------------------
		 * This component monitors the ventricular rate. The interval 
		 * between two ventricle events should be less than TLRI.
		 *
		 * Inputs: VP, VS.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
		printf("lrl\n");
		
		timer_lrl = timer_lrl + 1;
		
		if (state_lrl == Init_lrl) {
			if ((VS == present) || (VP == present)) {
				state_lrl = Wait_lrl;	// Go to state Wait.
				timer_lrl = 0;
			} else {
				// Do nothing.
			}
		} else if (state_lrl == Wait_lrl) {
			if ((VS == present) || (VP == present)) {
				state_lrl = Wait_lrl;	// Stay in state Wait.
				if (timer_lrl > TLRI) {
					// Timing violation.
					violated = present;
					event.lrl = present;
				}
				timer_lrl = 0;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("lrl: In an undefined state (%d)\n", state_lrl);
		}
		
		
		// url(shared Signal VP, shared Signal VS);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Upper Rate Limit (URL)
		 * ----------------------------------
		 * This component monitors the ventricular rate. The interval 
		 * between a ventricle event and pacing should be longer than
		 * TLRI.
		 *
		 * Inputs: VP, VS.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("url\n");
		
		timer_url = timer_url + 1;

		if (state_url == Init_url) {
			if ((VS == present) || (VP == present)) {
				state_url = Wait_url;	// Go to state Wait.
				timer_url = 0;
			} else {
				// Do nothing.
			}
		} else if (state_url == Wait_url) {
			if (VS == present) {
				state_url = Wait_url;	// Stay in state Wait.
				timer_url = 0;
			} else if (VP == present) {
				state_url = Wait_url;	// Stay in state Wait.
				if (timer_url < TLRI) {
					// Timing violation.
					violated = present;
					event.url = present;
				}
				timer_url = 0;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("url: In an undefined state (%d)\n", state_url);
		}


		// pmt(shared Signal VP, shared Signal VS);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Pacemaker Mediated Tachycardia (PMT)
		 * ------------------------------------------------
		 * This component monitors for tachycardia caused by the pacemaker.
		 *
		 * Inputs: VP, VS.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("pmt\n");
		
		timer_pmt = timer_pmt + 1;

		if (state_pmt == Init_pmt) {
			if ((VS == present) || (VP == present)) {
				state_pmt = Wait_pmt;	// Go to state Wait.
				timer_pmt = 0;
			} else {
				// Do nothing.
			}
		} else if (state_pmt == Wait_pmt) {
			if ((VS == present) || (VP == present)) {
				state_pmt = Wait_pmt;	// Stay in state Wait.
				if (timer_pmt > TLRI) {
					// Timing violation.
					violated = present;
					event.pmt = present;
				}
				timer_pmt = 0;
			} else {
				// Do nothing.
			}
		} else {
			// In an undefined state.
			printf("pmt: In an undefined state (%d)\n", state_pmt);
		}


		// ms(shared Signal VDI);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Mode-Switch (MS)
		 * ----------------------------
		 * This component monitors the pacing mode (DDD or VDI).
		 *
		 * Inputs: VDI.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("ms\n");

		if (VDI == present) {
			violated = present;
		} else {
			// Do nothing.
		}

		
		// vurl(shared Signal VP);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Ventricle Upper Rate Limit (VURL)
		 * ---------------------------------------------
		 * This component monitors the upper rate limit of ventricular
		 * pacing.
		 *
		 * Inputs: VP.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("vurl\n");
		
		timer_vurl = timer_vurl + 1;

		if (state_vurl == Init_vurl) {
			if (VP == present) {
				state_vurl = V_vurl;	// Go to state V.
				timer_vurl = 0;
			} else {
				// Do nothing.
			}
		} else if (state_vurl == V_vurl) {
			if (VP == present) {
				if (timer_vurl <= TURI) {
					state_vurl = V_vurl;	// Stay in state V.
				} else {
					state_vurl = Error_vurl;// Go to state Error.
					violated = present;
					event.vurl = present;
				}
				
				timer_vurl = 0;
			} else {
				// Do nothing.
			}
		} else if (state_vurl == Error_vurl) {
			state_vurl = Error_vurl;	// Stay in state Error.
			violated = present;
			event.vurl = present;
			timer_vurl = 0;
		} else {
			// In an undefined state.
			printf("vurl: In an undefined state (%d)\n", state_vurl);
		}
		
		
		// elt(shared Signal AS, shared Signal AP, shared Signal AR, shared Signal A_Block, shared Signal VS, shared Signal VP, shared Signal V_Block);
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Monitor for Endless Loop Tachycardia (ELT)
		 * ------------------------------------------
		 * This component monitors the existence of endless loop tachycardia.
		 *
		 * Inputs: AS, AP, AR, A_Block, VS, VP, V_Block.
		 * Outputs: none.
		 * Side-effects: log.
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		
		printf("elt\n");

		if (state_elt == Init_elt) {
			if (AS == present) {
				state_elt = AS_elt;		// Go to state AS.
			} else if ((AP == present) || (AR == present) || (A_Block == present) || (V_Block == present)) {
				state_elt = Error_elt;	// Go to state Error.
			} else if (VP == present) {
				state_elt = VP_elt;		// Go to state VP.
			} else {
				// Do nothing.
			}
		} else if (state_elt == AS_elt) {
			if ((AS == present) || (AP == present) || (AR == present) || (A_Block == present) || (VS == present) || (V_Block == present)) {
				state_elt = Error_elt;	// Go to state Error.
			} else if (VP == present) {
				state_elt = VP_elt;		// Go to state VP.
			} else {
				// Do nothing.
			}
		} else if (state_elt == VP_elt) {
			if ((VS == present) || (VP == present) || (AP == present) || (AR == present) || (A_Block == present) || (V_Block == present)) {
				state_elt = Error_elt;	// Go to state Error.
			} else if (AS == present) {
				state_elt = AS_elt;		// Go to state AS.
			} else {
				// Do nothing.
			}
		} else if (state_elt == Error_elt) {
			state_elt = Error_elt;		// Stay in state Error.
			violated = present;
			event.elt = present;
		} else {
			// In an undefined state.
			printf("elt: In an undefined state (%d)\n", state_elt);
		}
		
		
		// Log the violations.
		if (violated == present) {
		//	event.timestamp = getTime();
			event.AP = AP;
			event.VP = VP;
			event.DDD = DDD;
			event.VDI = VDI;
			
			log.events[log.tail] = event;
			log.tail = (log.tail + 1) % log.size;
		}
		
		pause;
	}
}

